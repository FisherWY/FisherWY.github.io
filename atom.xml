<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fisher&#39;s Blog</title>
  
  <subtitle>大都会に僕はもう一人で  投げ捨てられた空きカンのようだ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fisher.lazybone.xyz/"/>
  <updated>2019-11-20T02:08:31.483Z</updated>
  <id>http://fisher.lazybone.xyz/</id>
  
  <author>
    <name>Fisher</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSGO服务器更新失败的解决方法</title>
    <link href="http://fisher.lazybone.xyz/csgo%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
    <id>http://fisher.lazybone.xyz/csgo服务器更新失败的解决方法.html</id>
    <published>2019-11-20T01:50:29.000Z</published>
    <updated>2019-11-20T02:08:31.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>CSGO裂网大行动更新之后，我也迫不及待地要更新自己的CSGO服务器了。但是一运行更新脚本，就发现了Steamcmd报错，具体信息为：<code>ERROR! Timed out waiting for AppInfo update.</code></p><p><img src="images/csgo/server/updatefail.png" alt="更新失败"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>上网查了一圈之后发现，这个问题是因为Steam中的<code>appinfo.vdf</code>更新失败造成的。这个文件的具体目录位于<code>Steam/appcache</code>中。我们可以将其删除，然后就可以更新了</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Steam/appcache</span><br><span class="line">rm appinfo.vdf</span><br><span class="line"><span class="built_in">cd</span> ~/steamcmd/</span><br><span class="line">./csgo_server_update.sh</span><br></pre></td></tr></table></figure><p><img src="images/csgo/server/updatesuccess.png" alt="更新成功"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;CSGO裂网大行动更新之后，我也迫不及待地要更新自己的CSGO服务器了。但是一运行更新脚本，就发现了Steamcmd报错，具体信息为：&lt;code&gt;ERROR! Timed out waiting for AppInfo update.&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;images/csgo/server/updatefail.png&quot; alt=&quot;更新失败&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h1&gt;&lt;p&gt;上网查了一圈之后发现，这个问题是因为Steam中的&lt;code&gt;appinfo.vdf&lt;/code&gt;更新失败造成的。这个文件的具体目录位于&lt;code&gt;Steam/appcache&lt;/code&gt;中。我们可以将其删除，然后就可以更新了&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://fisher.lazybone.xyz/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop之HDFS搭建</title>
    <link href="http://fisher.lazybone.xyz/hadoop%E4%B9%8Bhdfs%E6%90%AD%E5%BB%BA.html"/>
    <id>http://fisher.lazybone.xyz/hadoop之hdfs搭建.html</id>
    <published>2019-11-18T11:52:56.000Z</published>
    <updated>2019-11-18T12:35:11.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因学校团委项目需要，我们团队需要一个统一的大数据文件储存节点。自己的电脑不能保证24h开机状态，因此我们打算在阿里云服务器上搭建HDFS节点，并以单节点模式运行</p><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>首先下载Hadoop，这里使用了清华的镜像站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/stable2/hadoop-3.2.1.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后下载Java JDK或Open JDK，由于Oracle官方的JDK下载需要Oracle账号，这里提供放在自己服务器上的资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://fisher.lazybone.xyz/downloads/software/jdk-8u231-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>因为组员可能要在本地搭建HDFS节点，因此我将JDK集成和数据文件夹放在Hadoop文件夹下，整个Hadoop文件夹目录结构如下：</p><ul><li>Hadoop<ul><li>jdk</li><li>data</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-3.2.1.tar.gz</span><br><span class="line">mv hadoop-3.2.1.tar.gz hadoop</span><br><span class="line">tar -zxvf jdk-8u231-linux-x64.tar.gz -C ./hadoop</span><br><span class="line"><span class="built_in">cd</span> hadoop/</span><br><span class="line">mv jdk1.8.0_231 jdk</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>接下来我们需要配置Hadoop的HDFS模块，一共包括<code>core-site.xml</code>，<code>hdfs-site.xml</code>和<code>hadoop-env.sh</code>，这三个文件都在Hadoop文件夹的<code>etc/hadoop/</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> etc/hadoop</span><br><span class="line">vim core-site.xml</span><br><span class="line">vim hdfs-site.xml</span><br><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure><p>对于<code>core-site.xml</code>，我的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://0.0.0.0:8000&lt;/value&gt;</span><br><span class="line"> &lt;description&gt;NameNode URL&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/fisher/hadoop/data/temp&lt;/value&gt;</span><br><span class="line"> &lt;description&gt;hadoop的临时本地文件目录&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;io.file.buffer.size&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;51200&lt;/value&gt;</span><br><span class="line"> &lt;description&gt;读写序列文件缓存大小&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>对于<code>hdfs-site.xml</code>，我的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">            &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;/home/fisher/hadoop/data/name&lt;/value&gt;</span><br><span class="line">            &lt;description&gt;本地文件系统存储着命令空间和操作日志 &lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;/home/fisher/hadoop/data/file&lt;/value&gt;</span><br><span class="line">             &lt;description&gt;存储blocks的本地路径列表，用逗号隔开 &lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">             &lt;description&gt; 备份数，根据集群节点合理规划&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;http://0.0.0.0:8001&lt;/value&gt;</span><br><span class="line">             &lt;description&gt; namenode 界面访问地址&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">            &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">            &lt;description&gt; 是否使用界面访问&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>对于<code>hadoop-env.sh</code>，我们需要将JDK添加到其环境变量中，找到<code>JAVA_HOME</code>所在地方，将其修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/fisher/hadoop/jdk</span><br></pre></td></tr></table></figure><p>至此，Hadoop的HDFS节点就搭建完成了。<strong>需要注意的是：如果我们需要将HDFS暴露到外网中，我们需要将节点的地址都修改为<code>0.0.0.0</code>，并且开放相应的防火墙端口</strong></p><h2 id="配置免登录密钥"><a href="#配置免登录密钥" class="headerlink" title="配置免登录密钥"></a>配置免登录密钥</h2><p>我们还需要为当前用户配置<code>.shh</code>免登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>在Hadoop文件夹中初始化节点并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs namenode -format</span><br><span class="line">sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p>启动结果如下图所示，则表示启动成功：</p><p><img src="images/hadoop/hdfstart.png" alt="启动HDFS"></p><p>使用<code>域名+端口</code>访问网页管理界面，可以看到如下图：</p><p><img src="images/hadoop/hdfstatus.png" alt="管理界面"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因学校团委项目需要，我们团队需要一个统一的大数据文件储存节点。自己的电脑不能保证24h开机状态，因此我们打算在阿里云服务器上搭建HDFS节点，并以单节点模式运行&lt;/p&gt;&lt;h1 id=&quot;搭建过程&quot;&gt;&lt;a href=&quot;#搭建过程&quot; class=&quot;headerlink&quot; title=&quot;搭建过程&quot;&gt;&lt;/a&gt;搭建过程&lt;/h1&gt;&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;首先下载Hadoop，这里使用了清华的镜像站&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/stable2/hadoop-3.2.1.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="服务器配置" scheme="http://fisher.lazybone.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Hadoop" scheme="http://fisher.lazybone.xyz/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验三：模拟P、V操作</title>
    <link href="http://fisher.lazybone.xyz/%E6%A8%A1%E6%8B%9Fp%E3%80%81v%E6%93%8D%E4%BD%9C.html"/>
    <id>http://fisher.lazybone.xyz/模拟p、v操作.html</id>
    <published>2019-11-17T11:20:31.000Z</published>
    <updated>2019-11-17T12:17:40.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>操作系统系列博客的所有实验源自于课程<code>&quot;操作系统原理与实践检验&quot;</code>，代码是参考老师给的<code>&quot;软件工程专业操作系统实验指导书&quot;</code>文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法</p><a id="more"></a><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ol><li>理解信号量相关理论</li><li>掌握记录型信号量结构</li><li>掌握 P、V 原语实现机制</li></ol><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>本实验针对操作系统中信号量的相关理论进行实验，要求实验者输入实验指导书提供的代码并进行测试。代码主要模拟信号量的P（down）、V（up）操作</p><ul><li><p>信号量</p><p>信号量也称为信号锁，主要应用于进程间的同步和互斥，在用于互斥时，信号量通常作为资源锁。信号量通过两个原子操作P（down）和V（up）来访问。down操作使信号量的值-1，up操作使信号量的值+1</p></li><li><p>记录型信号量</p><p>记录型信号量采用了“让权等待”的策略，当存在多个资源访问同一个临界资源的情况时，记录型信号量可以使用一个等待链来存放等待使用资源的进程。在本次实验中，我们使用的是记录型信号量</p></li></ul><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><ul><li>对于P（down）操作。首先我们需要判断申请的临界资源是否存在。若该资源存在，接下来我们要判断该资源是否被其他进程使用中。如果其他进程使用中，我们将申请使用该资源的进程添加到等待链表中，并且信号量-1。如果没有其他进程使用中，则信号量-1，并将该资源标识为该进程使用中</li><li>对于V（up）操作。首先我们需要判断释放的临界资源是否存在。若该资源存在，接下来我们可以释放该资源，并查看等待链表中是否有正在等待使用资源的进程。如果没有等待使用资源的进程，则该资源的信号量+1，如果有等待使用资源的进程，我们将其从等待链表移入到正在使用的列表中，同时信号量+1</li></ul><h1 id="代码汇总"><a href="#代码汇总" class="headerlink" title="代码汇总"></a>代码汇总</h1><p><code>basicpcb.h</code>已经定义了关于信号量的结构体，我们只需要创建<code>semaphore.cpp</code>，并实现P、V操作</p><h2 id="P操作"><a href="#P操作" class="headerlink" title="P操作"></a>P操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申请资源 -&gt; P操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">char</span> *sname, <span class="keyword">int</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sflag: 信号量找到标志</span></span><br><span class="line"><span class="comment"> * pflag: 进程找到标志</span></span><br><span class="line"><span class="comment"> * p: 找到的进程节点</span></span><br><span class="line"><span class="comment"> * s: 找到的信号量节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    <span class="keyword">int</span> sflag = <span class="number">0</span>, pflag = <span class="number">0</span>;</span><br><span class="line">    pnode *p;</span><br><span class="line">    semaphore *s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据名字查找信号量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SEMAPHORE_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(sem[i].name, sname))</span><br><span class="line">        &#123;</span><br><span class="line">            s = &amp;sem[i];</span><br><span class="line">            sflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据进程ID查找进程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PROCESS_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pr[i]-&gt;node-&gt;pid == pid)</span><br><span class="line">        &#123;</span><br><span class="line">            p = pr[i];</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标信号量或进程未找到</span></span><br><span class="line">    <span class="keyword">if</span> (!sflag || !pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Semaphore %s not exist or Process %d not exist.\n"</span>, sname, pid);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Semaphore find result: %d. Process find result: %d\n"</span>, sflag, pflag);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量-1</span></span><br><span class="line">    s-&gt;count--;</span><br><span class="line">    <span class="comment">// 临界资源仍足够</span></span><br><span class="line">    <span class="keyword">if</span> (s-&gt;count &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;curpid = p-&gt;node-&gt;pid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 临界资源不足</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 添加到等待列表</span></span><br><span class="line">        <span class="keyword">if</span> (s-&gt;wlist != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pnode *tmp = s-&gt;wlist;</span><br><span class="line">            <span class="keyword">while</span> (tmp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">                tmp = tmp-&gt;next;</span><br><span class="line">            tmp-&gt;next = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s-&gt;wlist = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="V操作"><a href="#V操作" class="headerlink" title="V操作"></a>V操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放资源 -&gt; V操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">char</span> *sname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sflag: 信号量找到标志</span></span><br><span class="line"><span class="comment"> * spos: 信号量位置</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    <span class="keyword">int</span> sflag = <span class="number">0</span>, spos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找信号量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SEMAPHORE_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(sem[i].name, sname))</span><br><span class="line">        &#123;</span><br><span class="line">            sflag = <span class="number">1</span>;</span><br><span class="line">            spos = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量未找到</span></span><br><span class="line">    <span class="keyword">if</span> (!sflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Semaphore %s not found\n"</span>, sname);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源</span></span><br><span class="line"><span class="comment"> * 如果等待列表中有进程，count数量不变，等待列表入队</span></span><br><span class="line"><span class="comment"> * 如果等待列表中无进程，count数量++</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    <span class="keyword">if</span> (sem[spos].wlist != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sem[spos].curpid = sem[spos].wlist-&gt;node-&gt;pid;</span><br><span class="line">        sem[spos].wlist = sem[spos].wlist-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sem[spos].count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他完善程序的函数"><a href="#其他完善程序的函数" class="headerlink" title="其他完善程序的函数"></a>其他完善程序的函数</h2><p>我们需要完善<code>showdetail()</code>，<code>help()</code>，<code>init()</code>，<code>terminal()</code>函数来让整个程序跑起来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在程序的最开始定义宏</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> SEMAPHORE_NUMBER 5</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> PROCESS_NUMBER 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义5个信号量</span></span><br><span class="line">semaphore sem[SEMAPHORE_NUMBER];</span><br><span class="line"><span class="comment">// 定义0-19一共20个进程</span></span><br><span class="line">pnode *pr[PROCESS_NUMBER];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看临界资源使用状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showdetail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n===================================================\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SEMAPHORE_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sem[i].count &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s (Current process id: %d) | Wait list: "</span>, sem[i].name, sem[i].curpid);</span><br><span class="line">            pnode *p = sem[i].wlist;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%5d -&gt;"</span>, p-&gt;node-&gt;pid);</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"   List end\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s now avaliable\n"</span>, sem[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"===================================================\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 帮助命令</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n===================================================\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sname: 临界资源名称  pid: 进程ID\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"申请资源: down(sname,pid)\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"释放资源: up(sname)\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"查看当前资源使用情况: showdetail\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"获取帮助: help\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"退出: exit\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"===================================================\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化信号量semaphore</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SEMAPHORE_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> sname[] = &#123;<span class="string">'s'</span>, i+<span class="number">48</span>, <span class="string">'\0'</span>&#125;;</span><br><span class="line">        <span class="built_in">strcat</span>(sem[i].name, sname);</span><br><span class="line">        sem[i].wlist = <span class="literal">NULL</span>;</span><br><span class="line">        sem[i].count = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化进程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PROCESS_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pr[i] = <span class="keyword">new</span> pnode;</span><br><span class="line">        pr[i]-&gt;node = <span class="keyword">new</span> pcb;</span><br><span class="line">        pr[i]-&gt;node-&gt;pid = i;</span><br><span class="line">        pr[i]-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line">        pr[i]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        pr[i]-&gt;sub = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">terminal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> cflag, pflag;</span><br><span class="line">    <span class="keyword">char</span> cmdstr[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    initerror();</span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cflag = <span class="number">0</span>;</span><br><span class="line">        pflag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cmd: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmdstr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"exit"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"showdetail"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            showdetail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"help"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            help();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmdstr, <span class="string">"down"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> *sname = substr(cmdstr, instr(cmdstr, <span class="string">'('</span>)+<span class="number">1</span>, instr(cmdstr, <span class="string">','</span>)<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">char</span> *pid = substr(cmdstr, instr(cmdstr, <span class="string">','</span>)+<span class="number">1</span>, instr(cmdstr, <span class="string">')'</span>)<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sname &amp;&amp; pid)</span><br><span class="line">            &#123;</span><br><span class="line">                down(sname, atoi(pid));</span><br><span class="line">                pflag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmdstr, <span class="string">"up"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> *sname = substr(cmdstr, instr(cmdstr, <span class="string">'('</span>)+<span class="number">1</span>, instr(cmdstr, <span class="string">')'</span>)<span class="number">-1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (sname)</span><br><span class="line">            &#123;</span><br><span class="line">                up(sname);</span><br><span class="line">                pflag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入错误或参数错误</span></span><br><span class="line">        <span class="keyword">if</span> (!cflag)</span><br><span class="line">            geterror(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!pflag)</span><br><span class="line">            geterror(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个semaphore.cpp程序的入口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    terminal();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h1><ol><li><p>编译并运行程序</p><p><code>g++ semaphore.cpp -o semaphore &amp;&amp; ./semaphore</code></p><p><img src="images/os/semaphorecompile.png" alt="编译运行"></p></li><li><p>使用<code>help</code>命令查看帮助</p><p><img src="images/os/semaphorehelp.png" alt="查看帮助"></p></li><li><p>使用<code>down</code>命令申请资源，使用<code>up</code>命令释放资源，使用<code>showdetail</code>查看资源使用情况</p><p><img src="images/os/semaphoredetail.png" alt="PV操作"></p><p>从上图中可以看到，我们申请了临界资源，程序会判断临界资源和进程是否同时存在，再进行P操作，释放资源也是如此。但是我们的程序有一个缺点，就是PV操作必须要成对地进行，而且一个进程不能多次申请同一个临界资源，因为我们没有对其进行限制。这是程序不完美的地方</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本次的实验中，我们模拟进行了进程的P、V操作。PV操作解决了临界资源的分配问题，进程可以通过一个等待列表来先后使用需要的资源，但是PV操作存在一个问题就是：如果A进程占用了1号资源，需要再申请占用2号资源才能运行；而B进程占用了2号资源，需要再申请占用1号资源才能运行。这就造成了死锁的问题，对于该问题的解决方案，人们提出了“银行家算法”，在计算进程申请资源后是否会造成死锁问题后，选择不会形成死锁的解决方案来分配进程，破坏进程死锁产生的条件。该算法虽然会影响系统的性能，但与死锁造成的资源浪费、产生死锁后再解决问题相比，“银行家算法”显然是一个比较好的解决方案</p><h1 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h1><ol><li><p>如何修改<code>down</code>操作，使之能一次申请多个信号量？</p><p>将<code>down</code>函数的信号量参数改为一个信号量数组之后，进程能一次申请多个信号量。这会同时带来进程的死锁问题，为了避免该问题，其中一个解决方案：将信号量的申请改为<code>&amp;&amp;</code>关系，即该进程的一次申请中，所有要申请的临界资源都能使用，才能正式分配资源</p></li><li><p>在某个时刻，一个进程最多可以等待多少个信号量？</p><p>从理论上来说，一个进程最多可以等待很多个信号量。但是如果等待的信号量越多，产生死锁的可能性就越来越大，为了避免死锁的产生，进程最好是不需要等待信号量，或者在可控范围下等待信号量</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;操作系统系列博客的所有实验源自于课程&lt;code&gt;&amp;quot;操作系统原理与实践检验&amp;quot;&lt;/code&gt;，代码是参考老师给的&lt;code&gt;&amp;quot;软件工程专业操作系统实验指导书&amp;quot;&lt;/code&gt;文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://fisher.lazybone.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验二：模拟进程的撤销</title>
    <link href="http://fisher.lazybone.xyz/%E6%A8%A1%E6%8B%9F%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%92%A4%E9%94%80.html"/>
    <id>http://fisher.lazybone.xyz/模拟进程的撤销.html</id>
    <published>2019-11-13T07:40:15.000Z</published>
    <updated>2019-11-17T11:39:51.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>操作系统系列博客的所有实验源自于课程<code>&quot;操作系统原理与实践检验&quot;</code>，代码是参考老师给的<code>&quot;软件工程专业操作系统实验指导书&quot;</code>文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法</p><a id="more"></a><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ul><li>理解进程撤销相关理论</li><li>掌握进程撤销流程</li></ul><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>本实验针对操作系统进程撤销相关理论进行实验。要求实验者设计一个程序，该程序可以模拟撤销多个进程及其子孙进程</p><ol><li>采用动态或静态方法生成一颗进程树（进程数目&gt;=20）</li><li>设计进程撤销算法</li><li>实现进程撤销函数，采用级联方法撤销</li><li>可动态撤销进程</li><li>可动态观察进程树的情况</li><li>测试程序并获得正确结果</li></ol><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><ol><li>首先我们需要从进程总链中找到要撤销的进程。如果查找不成功，则进程撤销操作结束，返回查找不成功消息</li><li>找到要撤销的进程之后，我们需要查找该进程的父进程。如果该进程没有父进程，我们认为这个进程是进程总链和进程树的根节点，根节点不可以被撤销</li><li>将要撤销的进程从进程树上截下。由于我们使用的是广义二叉树中的<code>孩子兄弟表示法</code>，因此我们需要判断要撤销的进程是否为父进程的第一个节点。如果是第一个节点，则直接置父进程的孩子节点为<code>NULL</code>即可；如果不是第一个节点，则需要在兄弟链中摘除节点</li><li>撤销进程树，从进程总链上摘除。我们使用递归的方法遍历撤销进程及其子孙，同时将其从进程总链上摘除</li></ol><h1 id="代码汇总"><a href="#代码汇总" class="headerlink" title="代码汇总"></a>代码汇总</h1><p><code>basicpcb.h</code>和<code>process.cpp</code>的代码已经在上一篇博客中定义，我们只需要将下面的代码附加到<code>process.cpp</code>文件中，注意代码位置即可</p><h2 id="进程树撤销"><a href="#进程树撤销" class="headerlink" title="进程树撤销"></a>进程树撤销</h2><p>进程树的撤销使用了递归的方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从节点p开始删除进程树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deltree</span><span class="params">(pnode *tbd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (pnode *p = plink; p; p = p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next!=<span class="literal">NULL</span> &amp;&amp; p-&gt;next==tbd)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;next = tbd-&gt;next;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tbd-&gt;brother != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        deltree(tbd-&gt;brother);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tbd-&gt;sub != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        deltree(tbd-&gt;sub);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> tbd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程撤销"><a href="#进程撤销" class="headerlink" title="进程撤销"></a>进程撤销</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 撤销进程</span></span><br><span class="line"><span class="comment"> * para[0]: 要撤销的进程pid</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deletepc</span><span class="params">(<span class="keyword">int</span> *para)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (para[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Root process(pid:0) can not be deleted!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * p: 工作指针</span></span><br><span class="line"><span class="comment"> * ptree_previous: 要撤销的进程在进程树中的前一个节点</span></span><br><span class="line"><span class="comment"> * tbd: 要撤销的进程节点</span></span><br><span class="line"><span class="comment"> * pflag: 记录要撤销的进程是否查找成功</span></span><br><span class="line"><span class="comment"> * tbd_ppid: 要撤销的进程的父进程</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    pnode *p, *ptree_previous, *tbd;</span><br><span class="line">    <span class="keyword">int</span> pflag = <span class="number">0</span>, tbd_ppid = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到要撤销的进程</span></span><br><span class="line">    <span class="keyword">for</span> (p=plink; p; p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            tbd_ppid = p-&gt;node-&gt;ppid;</span><br><span class="line">            tbd = p;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到要撤销的进程的父进程</span></span><br><span class="line">    <span class="keyword">for</span> (p=plink; p; p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == tbd_ppid)</span><br><span class="line">        &#123;</span><br><span class="line">            ptree_previous = p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Process pid %d not found!\n"</span>, para[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tbd_ppid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Process parent(pid:%d) not found!\n"</span>, tbd_ppid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将进程从进程树中删除</span></span><br><span class="line">    <span class="keyword">if</span> (ptree_previous != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 进程是父进程的第一个字节点</span></span><br><span class="line">        <span class="keyword">if</span> (ptree_previous-&gt;sub == tbd)</span><br><span class="line">        &#123;</span><br><span class="line">            ptree_previous-&gt;sub = tbd-&gt;brother;</span><br><span class="line">            tbd-&gt;brother=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 进程是子节点但不是第一个</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (p=ptree_previous-&gt;sub; p; p=p-&gt;brother)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;brother == tbd)</span><br><span class="line">                &#123;</span><br><span class="line">                    p-&gt;brother = tbd-&gt;brother;</span><br><span class="line">                    tbd-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将进程及其子进程从进程链表中删除，然后从内存中删除</span></span><br><span class="line">    deltree(tbd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMD指令解析"><a href="#CMD指令解析" class="headerlink" title="CMD指令解析"></a>CMD指令解析</h2><p>我们需要修改<code>processterminal()</code>函数中的代码，更新<code>cmd</code>指令</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 撤销进程</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(cmdstr, <span class="string">"deletepc"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> *para;</span><br><span class="line">    <span class="keyword">char</span> *s;</span><br><span class="line"></span><br><span class="line">    cflag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = instr(cmdstr, <span class="string">'('</span>);</span><br><span class="line">    <span class="keyword">int</span> end = instr(cmdstr, <span class="string">')'</span>);</span><br><span class="line">    s = substr(cmdstr, start+<span class="number">1</span>, end<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    para = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line">    para = strtoarray(s);</span><br><span class="line"></span><br><span class="line">    deletepc(para);</span><br><span class="line"></span><br><span class="line">    pflag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h1><ol><li><p>编译并运行程序</p><p><code>g++ process.cpp -o process</code></p><p><img src="images/os/compile.png" alt="编译并运行"></p></li><li><p>使用<code>help</code>命令查看帮助</p><p><img src="images/os/createhelp.png" alt="help命令"></p></li><li><p>使用<code>createpc</code>命令自行创建进程，可以创建一个子孙进程比较多的进程。使用<code>showdetail</code>命令查看进程信息</p><p><img src="images/os/createpc.png" alt="创建进程"></p></li><li><p>使用<code>deletepc</code>命令撤销进程，使用<code>showdetail</code>命令查看撤销后的进程信息。可以从下图中看出，我使用了<code>deletepc(1)</code>撤销了<code>pid=1</code>的进程，并且<code>pid=3</code>的子孙进程也相应的被撤销了</p><p><img src="images/os/deletepc.png" alt="撤销进程"></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本次实验中，我们模拟了进程的撤销。在实际的操作系统中，进程的撤销还需要涉及资源的释放、回收等操作，系统还需要对该进程的信息进行收集，例如：进程异常结束时，系统需要收集异常信息，发送异常报告。但其核心就是进程树、进程总链上的摘除，我们了解掌握其核心即可</p><h1 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h1><ol><li><p>进程撤销的核心是什么？</p><p>答：进程撤销的核心是将进程及其子孙进程从进程树和进程总链中摘除，释放其占用的资源，并且保证不破坏现有的进程树和进程总链结构</p></li><li><p>进程总链在进程撤销的过程中有什么作用？</p><p>答：进程总链能够快速定位我们需要查找的进程，如果通过进程树查找进程，我们需要耗费较长的时间，这在系统级操作中是不允许的</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;操作系统系列博客的所有实验源自于课程&lt;code&gt;&amp;quot;操作系统原理与实践检验&amp;quot;&lt;/code&gt;，代码是参考老师给的&lt;code&gt;&amp;quot;软件工程专业操作系统实验指导书&amp;quot;&lt;/code&gt;文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://fisher.lazybone.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验一：模拟进程的创建</title>
    <link href="http://fisher.lazybone.xyz/%E6%A8%A1%E6%8B%9F%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA.html"/>
    <id>http://fisher.lazybone.xyz/模拟进程的创建.html</id>
    <published>2019-11-11T11:22:24.000Z</published>
    <updated>2019-11-13T07:59:25.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>操作系统系列博客的所有实验源自于课程<code>&quot;操作系统原理与实践检验&quot;</code>，代码是参考老师给的<code>&quot;软件工程专业操作系统实验指导书&quot;</code>文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法</p><a id="more"></a><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ul><li>理解进程创建的相关理论</li><li>掌握进程创建的方法</li><li>掌握进程相关数据结构</li></ul><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>本实验针对操作系统中进程创建相关理论进行实验。要求实验者输入实验指导书提供的代码并进行测试。代码简化了进程创建的多个步骤和内容。进程的树形结构采用广义二叉树的方式进行储存</p><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="定义进程控制块PCB-Process-Control-Block"><a href="#定义进程控制块PCB-Process-Control-Block" class="headerlink" title="定义进程控制块PCB(Process Control Block)"></a>定义进程控制块PCB(Process Control Block)</h2><p>为了描述和控制进程的运行，系统为每个进程定义了一个进程控制块（PCB）。它是进程实体的一部分，是操作系统进程管理中最重要的数据结构，其主要包含以下信息：</p><ol><li>进程标识符：在系统中唯一地标识一个进程。通常包括：<ul><li>进程号<code>pid</code></li><li>父进程号<code>ppid</code></li><li>用户号<code>uid</code>。</li></ul></li><li>处理机状态：处理器的状态通常由处理机的各种寄存器中的内容组成。PCB负责存放<strong>中断/阻塞/挂起</strong>时各个寄存器的值，当进程恢复执行时，进程可以从断点处恢复并继续运行。其数据结构包括：<ul><li>通用寄存器</li><li>指令计数器</li><li>程序状态字PSW</li><li>用户栈指针。</li></ul></li><li>进程调度信息：进程在调度过程中，系统需要记录进程的执行信息，以管理进程的运行，为进程分配CPU时间片。调度需要用到以下的信息：<ul><li>进程状态（就绪/阻塞/挂起）</li><li>进程优先级（用于描述优先获得CPU时间片的级别的整数，高优先级的进程优先获得CPU时间片。通常情况下，该值越小优先级越高）</li><li>其他信息（等待时间、运行总时间等。用于记录进程执行的相关信息）</li><li>事件（描述进程挂起/阻塞的原因）</li></ul></li><li>进程控制信息：用于记录进程执行所需要的资源信息，创建执行进程的程序信息以及进程锁和进程之间的通信信息。其数据结构包括：<ul><li>程序和数据的地址（程序在内存和外存中的首地址）</li><li>进程同步和通信机制</li><li>资源列表（进程除CPU以外的所有资源）</li><li>链接指针（进程队列中指向下一个进程的PCB首地址）</li></ul></li></ol><p><strong>定义进程控制块的代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础进程控制块（PCB）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 进程ID</span></span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="comment">// 进程父ID</span></span><br><span class="line">    <span class="keyword">int</span> ppid;</span><br><span class="line">    <span class="comment">// 进程优先级</span></span><br><span class="line">    <span class="keyword">int</span> prio;</span><br><span class="line">    <span class="comment">// 进程状态</span></span><br><span class="line">    <span class="keyword">int</span> state;</span><br><span class="line">    <span class="comment">// 上次运行时间</span></span><br><span class="line">    <span class="keyword">int</span> lasttime;</span><br><span class="line">    <span class="comment">// 进程运行总时间</span></span><br><span class="line">    <span class="keyword">int</span> totaltime;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程组织结构：进程在广义二叉树或者进程链表中的节点结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 当前节点对应的进程控制块</span></span><br><span class="line">    pcb *node;</span><br><span class="line">    <span class="comment">// 进程树中，当前节点的子节点</span></span><br><span class="line">    pnode *sub;</span><br><span class="line">    <span class="comment">// 进程树中，当前节点的兄弟节点</span></span><br><span class="line">    pnode *brother;</span><br><span class="line">    <span class="comment">// 进程链表中，当前节点的下一节点</span></span><br><span class="line">    pnode *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号量机制，进程的资源分配</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 信号量资源名称</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">// 计数值</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="comment">// 当前进程ID</span></span><br><span class="line">    <span class="keyword">int</span> curpid;</span><br><span class="line">    <span class="comment">// 等待进程链表</span></span><br><span class="line">    pnode *wlist;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h2><ol><li><p>进程创建首先需要申请一个空白的PCB，获得唯一的进程ID，装载进程运行所需要的信息</p></li><li><p>为新进程分配内存和栈空间</p></li><li><p>初始化进程控制块：</p><ul><li>初始化标识信息</li><li>初始化处理机状态信息</li><li>初始化处理机控制信息</li></ul></li><li><p>将新进程插入就绪队列</p></li><li><p>将新进程插入进程树中，进程树用于用于描述进程家族关系。如下图1-1中可以看出，进程P1创建了进程P2、P3、P4、P5，而P2创建了P6、P7、P8。在进程的创建过程中，我们需要将每一个新进程都插入到进程树中，有了清晰的父子关系，资源继承、进程删除等操作将会十分方便</p><p><img src="images/os/processtree.png" alt="进程树"></p></li><li><p>将新进程插入到进程总链中，该总链可以快速定位和查找进程</p></li></ol><p><strong>进程创建的代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进程树根节点</span></span><br><span class="line">pnode *proot;</span><br><span class="line"><span class="comment">// 进程链表头节点</span></span><br><span class="line">pnode *plink;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建进程</span></span><br><span class="line"><span class="comment"> * para[0]: 要创建的新进程的pid</span></span><br><span class="line"><span class="comment"> * para[1]: 新进程的父进程pid</span></span><br><span class="line"><span class="comment"> * para[2]: 新进程的优先级</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createpc</span><span class="params">(<span class="keyword">int</span> *para)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * p: 操作指针</span></span><br><span class="line"><span class="comment"> * p1: 新进程的指针</span></span><br><span class="line"><span class="comment"> * pp: 新进程p1的父节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    pnode *p, *p1, *pp;</span><br><span class="line">    <span class="keyword">int</span> pflag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (p=plink; p; p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检查当前进程是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"pid %d is already exist!\n"</span>, para[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到进程父节点的进程控制块</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            pp = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Parent id %d is not exist!\n"</span>, para[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新的进程控制块</span></span><br><span class="line">    p1 = <span class="keyword">new</span> pnode;</span><br><span class="line">    p1-&gt;node = <span class="keyword">new</span> pcb;</span><br><span class="line">    p1-&gt;node-&gt;pid = para[<span class="number">0</span>];</span><br><span class="line">    p1-&gt;node-&gt;ppid = para[<span class="number">1</span>];</span><br><span class="line">    p1-&gt;node-&gt;prio = para[<span class="number">2</span>];</span><br><span class="line">    p1-&gt;sub = <span class="literal">NULL</span>;</span><br><span class="line">    p1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p1-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新进程添加到进程树中</span></span><br><span class="line">    <span class="keyword">if</span>(!pp-&gt;sub)</span><br><span class="line">        pp-&gt;sub = p1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环遍历至兄弟子进程的最后一个</span></span><br><span class="line">        <span class="keyword">for</span> (p=pp-&gt;sub; p-&gt;brother; p=p-&gt;brother);</span><br><span class="line">        p-&gt;brother = p1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新进程添加到进程链表中</span></span><br><span class="line">    <span class="keyword">for</span> (p=plink; p-&gt;next; p=p-&gt;next);</span><br><span class="line">    p-&gt;next = p1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码汇总"><a href="#代码汇总" class="headerlink" title="代码汇总"></a>代码汇总</h1><h2 id="PCB头文件"><a href="#PCB头文件" class="headerlink" title="PCB头文件"></a>PCB头文件</h2><p>我们将PCB整理为一个头文件<code>basicpcb.h</code>，并添加如下常用工具函数，也可以使用C++标准库中的函数</p><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">作用介绍</th></tr></thead><tbody><tr><td style="text-align:center"><code>geterror</code></td><td style="text-align:center">获取错误信息</td></tr><tr><td style="text-align:center"><code>initerror</code></td><td style="text-align:center">初始化错误信息</td></tr><tr><td style="text-align:center"><code>substr</code></td><td style="text-align:center">获取字串</td></tr><tr><td style="text-align:center"><code>instr</code></td><td style="text-align:center">查找字符C在Str中的位置</td></tr><tr><td style="text-align:center"><code>strtoarray</code></td><td style="text-align:center">将Str字符串按照格式转化为string数组</td></tr></tbody></table><p><strong><code>basicpcb.h</code>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进程控制块PCB头文件</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> basicpcb_h</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> basicpcb_h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *errormsg[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程控制块</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 进程ID</span></span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="comment">// 进程父ID</span></span><br><span class="line">    <span class="keyword">int</span> ppid;</span><br><span class="line">    <span class="comment">// 进程优先级</span></span><br><span class="line">    <span class="keyword">int</span> prio;</span><br><span class="line">    <span class="comment">// 进程状态</span></span><br><span class="line">    <span class="keyword">int</span> state;</span><br><span class="line">    <span class="comment">// 上次运行时间</span></span><br><span class="line">    <span class="keyword">int</span> lasttime;</span><br><span class="line">    <span class="comment">// 进程运行总时间</span></span><br><span class="line">    <span class="keyword">int</span> totaltime;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程在广义二叉树或者进程链表的节点结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 当前节点对应的进程控制块</span></span><br><span class="line">    pcb *node;</span><br><span class="line">    <span class="comment">// 进程链树中，当前节点的子节点</span></span><br><span class="line">    pnode *sub;</span><br><span class="line">    <span class="comment">// 进程树中，当前节点的兄弟节点</span></span><br><span class="line">    pnode *brother;</span><br><span class="line">    <span class="comment">// 进程链表中，当前节点的下一节点</span></span><br><span class="line">    pnode *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号量机制</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 信号量资源名称</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">// 计数值</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="comment">// 当前进程ID</span></span><br><span class="line">    <span class="keyword">int</span> curpid;</span><br><span class="line">    <span class="comment">// 等待进程链表</span></span><br><span class="line">    pnode *wlist;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取错误信息</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> geterror(eno) printf(<span class="meta-string">"%s\n"</span>, errormsg[eno]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成错误信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initerror</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    errormsg[<span class="number">0</span>] = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(errormsg[<span class="number">0</span>], <span class="string">"Error command!"</span>);</span><br><span class="line">    <span class="comment">// errormsg[0] = "Error command!";</span></span><br><span class="line">    errormsg[<span class="number">1</span>] = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">// errormsg[1] = "Error parameter!";</span></span><br><span class="line">    <span class="built_in">strcpy</span>(errormsg[<span class="number">1</span>], <span class="string">"Error parameter!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子字符串</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">substr</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s1;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">if</span> (start&lt;<span class="number">0</span> || end&gt;=len || start&gt;end)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    s1 = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(end - start + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; pos &lt;= end-start; pos++)</span><br><span class="line">    &#123;</span><br><span class="line">        s1[pos] = s[pos+start];</span><br><span class="line">    &#125;</span><br><span class="line">    s1[pos] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找字符C在Str中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">instr</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Str字符串转为string数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">strtoarray</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str: XXX,XXX,XXX</span></span><br><span class="line"><span class="comment"> * a: 用于记录每个字符的下标</span></span><br><span class="line"><span class="comment"> * count: 用于记录字符串中','出现的次数</span></span><br><span class="line"><span class="comment"> * x1: 储存','在字符串s1中出现的位置</span></span><br><span class="line"><span class="comment"> * s1: 记录截取字符串后的s</span></span><br><span class="line"><span class="comment"> * s2: 储存每个子字符串的指针</span></span><br><span class="line"><span class="comment"> * c: 储存','</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    <span class="keyword">int</span> *a, count, x1;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> c, *s1, *s2;</span><br><span class="line">    <span class="keyword">if</span> (!s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"String can't be NULL!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    s1 = s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s1); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == <span class="string">','</span>)</span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line"></span><br><span class="line">    a = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(count);</span><br><span class="line">    c = <span class="string">','</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x1 = instr(s1, c);</span><br><span class="line">        <span class="keyword">if</span> (x1 &gt;= <span class="number">0</span>)</span><br><span class="line">            s2 = substr(s1, <span class="number">0</span>, x1<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s2 = s1;</span><br><span class="line">        <span class="comment">// 将string转为int</span></span><br><span class="line">        a[i] = atoi(s2);</span><br><span class="line">        s1 = substr(s1, x1+<span class="number">1</span>, <span class="built_in">strlen</span>(s1)<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="进程创建具体实现"><a href="#进程创建具体实现" class="headerlink" title="进程创建具体实现"></a>进程创建具体实现</h2><p>我们在<code>process.cpp</code>文件中实现进程的创建，并编写了<code>main</code>函数进行测试</p><p><strong><code>process.cpp</code>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"basicpcb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程树根节点</span></span><br><span class="line">pnode *proot;</span><br><span class="line"><span class="comment">// 进程链表头节点</span></span><br><span class="line">pnode *plink;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建进程</span></span><br><span class="line"><span class="comment"> * para[0]: 要创建的新进程的pid</span></span><br><span class="line"><span class="comment"> * para[1]: 新进程的父进程pid</span></span><br><span class="line"><span class="comment"> * para[2]: 新进程的优先级</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createpc</span><span class="params">(<span class="keyword">int</span> *para)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * p: 操作指针</span></span><br><span class="line"><span class="comment"> * p1: 新进程的指针</span></span><br><span class="line"><span class="comment"> * pp: 新进程p1的父节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    pnode *p, *p1, *pp;</span><br><span class="line">    <span class="keyword">int</span> pflag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (p=plink; p; p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检查当前进程是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"pid %d is already exist!\n"</span>, para[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到进程父节点的进程控制块</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            pp = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Parent id %d is not exist!\n"</span>, para[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新的进程控制块</span></span><br><span class="line">    p1 = <span class="keyword">new</span> pnode;</span><br><span class="line">    p1-&gt;node = <span class="keyword">new</span> pcb;</span><br><span class="line">    p1-&gt;node-&gt;pid = para[<span class="number">0</span>];</span><br><span class="line">    p1-&gt;node-&gt;ppid = para[<span class="number">1</span>];</span><br><span class="line">    p1-&gt;node-&gt;prio = para[<span class="number">2</span>];</span><br><span class="line">    p1-&gt;sub = <span class="literal">NULL</span>;</span><br><span class="line">    p1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p1-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新进程添加到进程树中</span></span><br><span class="line">    <span class="keyword">if</span>(!pp-&gt;sub)</span><br><span class="line">        pp-&gt;sub = p1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环遍历至兄弟子进程的最后一个</span></span><br><span class="line">        <span class="keyword">for</span> (p=pp-&gt;sub; p-&gt;brother; p=p-&gt;brother);</span><br><span class="line">        p-&gt;brother = p1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新进程添加到进程链表中</span></span><br><span class="line">    <span class="keyword">for</span> (p=plink; p-&gt;next; p=p-&gt;next);</span><br><span class="line">    p-&gt;next = p1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示进程信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showdetail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pnode *p, *p1;</span><br><span class="line">    p = plink;</span><br><span class="line">    <span class="comment">// 将所有进程信息打印</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(pid: %d - prio: %d): "</span>, p-&gt;node-&gt;pid, p-&gt;node-&gt;prio);</span><br><span class="line">        p1 = p-&gt;sub;</span><br><span class="line">        <span class="comment">// 打印子进程信息</span></span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"   (pid: %d - prio: %d)"</span>, p1-&gt;node-&gt;pid, p1-&gt;node-&gt;prio);</span><br><span class="line">            p1 = p1-&gt;brother;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化根节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initprocess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    proot = <span class="keyword">new</span> pnode;</span><br><span class="line">    proot-&gt;node = <span class="keyword">new</span> pcb;</span><br><span class="line">    proot-&gt;node-&gt;pid = <span class="number">0</span>;</span><br><span class="line">    proot-&gt;node-&gt;ppid = <span class="number">-1</span>;</span><br><span class="line">    proot-&gt;node-&gt;prio = <span class="number">0</span>;</span><br><span class="line">    proot-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    proot-&gt;sub = <span class="literal">NULL</span>;</span><br><span class="line">    proot-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    plink = proot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令控制台</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processterminal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">short</span> cflag, pflag;</span><br><span class="line">    <span class="keyword">char</span> cmdstr[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cflag = <span class="number">0</span>;</span><br><span class="line">        pflag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cmd: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmdstr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 程序退出</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"exit"</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看进程信息</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"showdetail"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            showdetail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 帮助信息</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"help"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n=================================================\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"pid: 当前进程ID  ppid: 父进程ID  prio: 进程优先级\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"创建新进程: createpc(pid,ppid,prio)\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"查看当前进程信息: showdetail\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"获取帮助: help\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"退出: exit\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"=================================================\n\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新进程，判断createpc是否为cmdstr字串</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmdstr, <span class="string">"createpc"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> *para;</span><br><span class="line">            <span class="keyword">char</span> *s;</span><br><span class="line">            </span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取创建新进程的参数 -&gt; pid,ppid,prio</span></span><br><span class="line">            <span class="keyword">int</span> start = instr(cmdstr, <span class="string">'('</span>);</span><br><span class="line">            <span class="keyword">int</span> end = instr(cmdstr, <span class="string">')'</span>);</span><br><span class="line">            s = substr(cmdstr, start+<span class="number">1</span>, end<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">            para = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="number">3</span>);</span><br><span class="line">            para = strtoarray(s);</span><br><span class="line">            createpc(para);</span><br><span class="line"></span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入错误或参数错误</span></span><br><span class="line">        <span class="keyword">if</span> (!cflag)</span><br><span class="line">            geterror(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!pflag)</span><br><span class="line">            geterror(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    initerror();</span><br><span class="line"></span><br><span class="line">    initprocess();</span><br><span class="line"></span><br><span class="line">    processterminal();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h1><ol><li><p>编译并运行程序</p><p><code>g++ process.cpp -o process</code></p><p><img src="images/os/compile.png" alt="编译并运行"></p></li><li><p>使用<code>help</code>命令查看帮助</p><p><img src="images/os/createhelp.png" alt="help命令"></p></li><li><p>使用<code>createpc</code>命令创建进程，使用<code>showdetail</code>命令查看进程信息</p><p><img src="images/os/createpc.png" alt="创建进程"></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次实验我们模拟了一次进程的创建，在模拟创建的过程中，我们了解了进程控制块的定义，进程之间的组织方式，如何将进程添加到进程树和进程总链中。在现在的操作系统中，进程的创建还需要加载静态和计算机硬件资源，这比我们自己做的实验要复杂的多。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;操作系统系列博客的所有实验源自于课程&lt;code&gt;&amp;quot;操作系统原理与实践检验&amp;quot;&lt;/code&gt;，代码是参考老师给的&lt;code&gt;&amp;quot;软件工程专业操作系统实验指导书&amp;quot;&lt;/code&gt;文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://fisher.lazybone.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hexo文章中添加本地图片</title>
    <link href="http://fisher.lazybone.xyz/hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87.html"/>
    <id>http://fisher.lazybone.xyz/hexo文章中添加本地图片.html</id>
    <published>2019-11-06T10:05:48.000Z</published>
    <updated>2019-11-06T14:35:41.368Z</updated>
    
    <content type="html"><![CDATA[<p>在写博客的过程中，我们经常需要添加一些图片。但是Hexo框架默认将<code>images</code>文件夹放在<code>source</code>文件夹目录下，与<code>_posts</code>文件夹中的推送不在同一级目录下，因此添加本地图片。生成静态网页文件之后<code>images</code>文件夹却与推送在同一级目录下。导致图片在本地编辑时能够预览，而发布之后不能预览，为了解决这一问题，我使用了文件夹的软连接功能。</p><a id="more"></a><p>首先，进入博客根目录，在<code>_posts</code>文件夹下创建一个<code>images</code>文件夹，将图片全部放到该文件夹下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span>/_posts</span><br><span class="line">mkdir images</span><br></pre></td></tr></table></figure><p>接着在<code>source</code>文件夹下创建软连接，注意文件夹目录要使用绝对路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /Users/fisher/blog/<span class="built_in">source</span>/_posts/images /Users/fisher/blog/<span class="built_in">source</span>/_posts</span><br></pre></td></tr></table></figure><p>这样子在<code>source</code>文件夹下就可以看到一个类似于快捷方式的文件夹</p><p><img src="images/blogtek/linkfolder.png" alt="images文件夹链接"></p><p>添加图片的时候，路径直接填写本地路径即可</p><p><img src="images/blogtek/localpic.png" alt="本地路径"></p><p>部署到服务器上不需要更改路径也能显示</p><p><img src="images/blogtek/onlinepic.png" alt="在线路径"></p><p>整个<code>source</code>文件夹的结构如下</p><p><img src="images/blogtek/foldertree.png" alt="文件夹结构"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写博客的过程中，我们经常需要添加一些图片。但是Hexo框架默认将&lt;code&gt;images&lt;/code&gt;文件夹放在&lt;code&gt;source&lt;/code&gt;文件夹目录下，与&lt;code&gt;_posts&lt;/code&gt;文件夹中的推送不在同一级目录下，因此添加本地图片。生成静态网页文件之后&lt;code&gt;images&lt;/code&gt;文件夹却与推送在同一级目录下。导致图片在本地编辑时能够预览，而发布之后不能预览，为了解决这一问题，我使用了文件夹的软连接功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客相关" scheme="http://fisher.lazybone.xyz/tags/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>CS:GO服务器搭建脚本</title>
    <link href="http://fisher.lazybone.xyz/cs-go%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC.html"/>
    <id>http://fisher.lazybone.xyz/cs-go服务器搭建脚本.html</id>
    <published>2019-11-06T08:20:02.000Z</published>
    <updated>2019-11-06T08:31:26.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章首发于<a href="https://www.jianshu.com/p/b2cde3ba7908" target="_blank" rel="noopener">Fisher的简书</a></p><p>在我意识到shell编程的重要性之后，我便开始想着学习shell，但是拿什么练手呢？我想到了CSGO服务器的搭建，于是这个一键安装CSGO服务器的脚本就诞生了</p><h1 id="前期的准备"><a href="#前期的准备" class="headerlink" title="前期的准备"></a>前期的准备</h1><p><strong>首先我们需要获取steam服务器的登录令牌。没有该令牌的服务器只能在本地网络中进行连接，在社区服务器浏览器中也不会显示</strong></p><a id="more"></a><p>在之前<a href="https://www.jianshu.com/p/b2cde3ba7908" target="_blank" rel="noopener">基于Centos7.X的CS:GO私人服务器搭建</a>中的<code>“三.配置并运行CS:GO服务端”</code>里面已经有关于如何获取steam服务器登录令牌的教程，这里就不多做说明了</p><p><strong>开放云服务器的UDP 27015端口</strong></p><p>在之前的搭建教程中的<code>“三. 配置并运行CS:GO服务端”</code>已有相关的教程，这里也不多说了</p><h1 id="获取一键安装脚本"><a href="#获取一键安装脚本" class="headerlink" title="获取一键安装脚本"></a>获取一键安装脚本</h1><p><strong>使用wget下载csgo.sh文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/FisherWY/Shell/releases/download/0.2/csgo.sh</span><br></pre></td></tr></table></figure><p>如果没有安装wget，执行以下命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install wget</span><br></pre></td></tr></table></figure></p><p><strong>运行csgo.sh注意事项</strong></p><p>为csgo.sh添加可运行权限：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x csgo.sh</span><br></pre></td></tr></table></figure></p><p>运行脚本：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./csgo.sh</span><br></pre></td></tr></table></figure></p><h1 id="安装过程以及注意事项"><a href="#安装过程以及注意事项" class="headerlink" title="安装过程以及注意事项"></a>安装过程以及注意事项</h1><p><strong>脚本会自动检查是否用户是否为root，以及系统版本是否兼容。如果没有root，请切换用户</strong></p><p><img src="images/csgo/shell/pic1.png" alt="安装前的检查"></p><p><strong>输入管理steamcmd的用户名称和steamcmd文件夹名称，如不想修改直接回车就行</strong></p><p><img src="images/csgo/shell/pic3.png" alt="设置用户名和steamcmd文件夹名"></p><p><strong>输入CSGO服务器端文件夹名称，如不想修改直接回车</strong></p><p><img src="images/csgo/shell/pic4.png" alt="设置csgo文件夹名称"></p><p><strong>回车开始安装CSGO服务器，这需要一段时间。这速度取决于网速，我的是20分钟左右</strong></p><p><img src="images/csgo/shell/pic5.png" alt="更新steamcmd中"></p><p><img src="images/csgo/shell/pic6.png" alt="安装CSGO服务器中"></p><p><strong>设置CSGO服务器参数，需要设置的是：CSGO服务器名称，RCON密码，房间密码，steam登录令牌。如果不填留空，这些稍后都可以自行配置</strong></p><p><img src="images/csgo/shell/pic7.png" alt="设置服务器参数"></p><p><strong>安装MetaMod和SourceMod插件，如果需要安装插件的话输入”y”，不需要的话”n”即可</strong></p><p><img src="images/csgo/shell/pic8.png" alt="安装Mod插件"></p><p><strong>安装完成，输出安装信息，需要的可以记下来</strong></p><p><img src="images/csgo/shell/pic9.png" alt="安装信息"></p><p><strong>授权新安装的文件给新用户。由于CSGO服务器的所有文件都属于root，在切换用户后运行服务器会提示权限不足。因此我们需要把新的文件授权给新用户</strong></p><p>先切换到新用户的根目录下，我的新用户是”steam”，因此根目录是”/home/steam/“<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/steam/</span><br><span class="line">chown -R steam:steam *</span><br></pre></td></tr></table></figure></p><p><img src="images/csgo/shell/pic13.png" alt="授权给新用户"></p><p><strong>screen打开新窗口，切换到steam用户，启动服务器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen -S csgo</span><br><span class="line"><span class="built_in">cd</span> /home/steam/csgo_server</span><br><span class="line">./srcds_run -debug -game csgo -console -port 27015 -usercon -steamcmd_script /home/steam/steamcmd/update.txt -steam_dir /home/steam/ +map de_mirage</span><br></pre></td></tr></table></figure><p>在看到如下图的提示后，即可关闭窗口，在游戏中连接服务器了<br><img src="images/csgo/shell/pic12.png" alt="服务器启动"></p><h1 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h1><ol><li>关于如何更新CSGO服务器，steamcmd中已有一键脚本，直接执行即可</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/steam/steamcmd/</span><br><span class="line">./steamcmd.sh +runscript update_csgo.txt</span><br></pre></td></tr></table></figure><ol><li>关于如何使用创意工坊地图，在之前<a href="https://www.jianshu.com/p/b2cde3ba7908" target="_blank" rel="noopener">基于Centos7.X的CS:GO私人服务器搭建</a>中的<code>“五. 使用社区地图”</code>已有相关教程，这里就不多说了</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章首发于&lt;a href=&quot;https://www.jianshu.com/p/b2cde3ba7908&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fisher的简书&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在我意识到shell编程的重要性之后，我便开始想着学习shell，但是拿什么练手呢？我想到了CSGO服务器的搭建，于是这个一键安装CSGO服务器的脚本就诞生了&lt;/p&gt;&lt;h1 id=&quot;前期的准备&quot;&gt;&lt;a href=&quot;#前期的准备&quot; class=&quot;headerlink&quot; title=&quot;前期的准备&quot;&gt;&lt;/a&gt;前期的准备&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;首先我们需要获取steam服务器的登录令牌。没有该令牌的服务器只能在本地网络中进行连接，在社区服务器浏览器中也不会显示&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://fisher.lazybone.xyz/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="服务器配置" scheme="http://fisher.lazybone.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>CS:GO私人服务器搭建</title>
    <link href="http://fisher.lazybone.xyz/cs-go%E7%A7%81%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA.html"/>
    <id>http://fisher.lazybone.xyz/cs-go私人服务器搭建.html</id>
    <published>2019-11-06T07:39:00.000Z</published>
    <updated>2019-11-06T08:16:33.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章首发于<a href="https://www.jianshu.com/p/b2cde3ba7908" target="_blank" rel="noopener">Fisher的简书</a></p><p>最近比较喜欢和同学玩创意工坊地图，但是和同学不在同一个局域网。任何一个人的电脑做主机延迟和loss都非常的高，玩起来体验非常的差。正好阿里云的服务器可以以每月9.5元的学生价搞到一台云服务器，因此我便开始研究如何搭建私人的CS:GO服务器。在参考了<a href="https://wilfoo.com/?p=92https://wilfoo.com/?p=92" target="_blank" rel="noopener">Wilf的博客</a>之后，我成功地搭建了自己的游戏服务器，在此十分感谢Wilf！</p><a id="more"></a><p><strong>下面正式开始服务器搭建</strong></p><h1 id="创建新用户，安装steamcmd，安装CS-GO服务端"><a href="#创建新用户，安装steamcmd，安装CS-GO服务端" class="headerlink" title="创建新用户，安装steamcmd，安装CS:GO服务端"></a>创建新用户，安装steamcmd，安装CS:GO服务端</h1><p>使用ssh以root用户身份登录到服务器，创建名为<strong>steam</strong>的用户，并切换到该用户和该用户的根目录下（用户名可以自行选择，但在后续的操作中，路径需要进行替换）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m steam    <span class="comment"># 添加名为steam的用户</span></span><br><span class="line">su steam    <span class="comment"># 切换到steam用户</span></span><br><span class="line"><span class="built_in">cd</span> /home/steam/    <span class="comment"># 切换到steam用户的根目录下</span></span><br></pre></td></tr></table></figure><p>创建名为steamcmd的文件夹，下载steamcmd并解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir steamcmd    <span class="comment"># 创建名为steamcmd的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> steamcmd/    <span class="comment"># 切换到文件夹目录下</span></span><br><span class="line">wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz    <span class="comment"># 下载steamcmd</span></span><br><span class="line">tar zxvf steamcmd_linux.tar.gz    <span class="comment"># 解压steamcmd</span></span><br><span class="line">rm steamcmd_linux.tar.gz    <span class="comment"># 删除下载的安装包，也可以保留</span></span><br></pre></td></tr></table></figure><p>安装运行steamcmd所需的环境，运行steamcmd并安装CS:GO服务端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install glibc.i686    <span class="comment"># 安装steamcmd运行所需的库</span></span><br><span class="line">sudo yum install libstdc++.i686    <span class="comment"># 有的主机已经安装其他发行版本的依赖库，不用重复安装</span></span><br><span class="line">./steamcmd.sh</span><br></pre></td></tr></table></figure><p><strong>在操作无误的情况下，看到下面的命令行之后，steamcmd就安装完成了</strong><br><img src="images/csgo/server/steamcmd.png" alt="steamcmd成功安装"><br><strong>接下来便是在steamcmd中安装CS:GO</strong></p><p>以匿名用户身份登录steamcmd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login anonymous</span><br></pre></td></tr></table></figure><p>创建CS:GO服务器文件夹，该文件夹在steamcmd文件夹目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">force_install_dir ./csgo_server</span><br></pre></td></tr></table></figure><p>安装csgo服务端（15分钟左右）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_update 740 validate</span><br></pre></td></tr></table></figure><p><strong>在看到如下图片中最后的行的”Success!”后，表明CS:GO服务端安装成功（此处使用了更新成功的图片，但同样是”Success!”字样）</strong><br><img src="images/csgo/server/install.png" alt="安装（更新）成功"></p><p>安装完成后，退出steamcmd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h1 id="编写CS-GO更新脚本（可选）"><a href="#编写CS-GO更新脚本（可选）" class="headerlink" title="编写CS:GO更新脚本（可选）"></a>编写CS:GO更新脚本（可选）</h1><p>更新脚本主要用于一键更新游戏服务器，从而避免每次都要手动输入更新命令的麻烦</p><p>编写steamcmd的runscript脚本</p><p><em>在steamcmd目录下（退出steamcmd.sh后的当前目录），创建新的<code>update.txt</code>文件</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi update.txt</span><br></pre></td></tr></table></figure><p>进入编辑模式，写入以下语句，然后保存退出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">login anonymous</span><br><span class="line">force_install_dir ./csgo_server</span><br><span class="line">app_update 740</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>编写steamcmd运行脚本</p><p><em>在steamcmd目录下，使用vim创建新的<code>csgo_server_update.sh</code>文件</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi csgo_server_update.sh</span><br></pre></td></tr></table></figure><p>进入编辑模式，写入以下语句后保存退出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">./steamcmd.sh +runscript update.txt</span><br></pre></td></tr></table></figure><p>测试脚本</p><p><em>在steamcmd目录下运行脚本csgo_server_update.sh</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./csgo_server_update.sh</span><br></pre></td></tr></table></figure></p><p><em>若运行结果如下所示，则更新脚本编写完成，以后可以直接使用该命令一键更新CS:GO服务器</em><br><img src="images/csgo/server/update.png" alt="CS:GO更新脚本"></p><p>出现了权限不足的情况，提升权限再次运行即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 775 csgo_server_update.sh</span><br></pre></td></tr></table></figure><h1 id="配置并运行CS-GO服务端"><a href="#配置并运行CS-GO服务端" class="headerlink" title="配置并运行CS:GO服务端"></a>配置并运行CS:GO服务端</h1><p>前往<a href="https://steamcommunity.com/dev/managegameservers" target="_blank" rel="noopener">Steam游戏服务器帐户管理</a>注册steam服务器登录令牌。没有该令牌服务器只能在本地网络中进行连接，在社区服务器浏览器中也不会显示。（网站可能无法连接，推荐使用Steamcommunity 302工具修复连接问题）</p><p><strong>在App ID中填入CS:GO的ID：730。备忘录中填入：CSGO服务端令牌（选填）</strong><br><img src="images/csgo/server/sv_authkey.png" alt="填写App ID"><br><strong>点击创建之后便获得了登录令牌，不要将该令牌泄露出去，该令牌用于服务器在CS:GO社区服务器中验证</strong></p><p>下载服务器配置文件server.cfg</p><p><em>切换目录到CS:GO的cfg文件夹下，下载server.cfg文件，编辑server.cfg文件</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> csgo_server/csgo/cfg/</span><br><span class="line">wget http://www.csgodev.com/downloads/server.cfg</span><br><span class="line">vi server.cfg</span><br></pre></td></tr></table></figure></p><p><em>进入编辑模式，在server.cfg文件中添加登录令牌，修改部分参数（这部分一定要改，不然很影响游戏体验！）</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 新增以下参数：</span><br><span class="line">// steam account，修改为自己刚刚申请的登陆令牌</span><br><span class="line">sv_setsteamaccount <span class="string">"4FXXXXXXXXXXXXXXXXXXXXXXXXX"</span></span><br><span class="line"></span><br><span class="line">// 找到并修改以下参数：</span><br><span class="line">// 服务器名称，安全方面</span><br><span class="line">hostname <span class="string">"Fisher's server"</span>    // 服务器在社区服务器浏览器上显示的名称，自行修改为喜欢的名字</span><br><span class="line">rcon_password <span class="string">"12345678"</span>    // CS:GO远程控制台密码，修改为自己定义的密码</span><br><span class="line">sv_password <span class="string">"87654321"</span>    // 服务器连接密码，在连接服务器时输入，不要密码可以留空</span><br><span class="line">// 游戏参数方面</span><br><span class="line">sv_maxrate <span class="string">"128000"</span>    // 服务器最大带宽使用量，默认值非常小，因此会造成choke值异常，此处建议改为128000</span><br><span class="line">sv_minrate <span class="string">"80000"</span>    // 服务器最小带宽使用量，与上面同理，此处建议改为80000</span><br><span class="line">sv_accelerate <span class="string">"5.5"</span>    // 人物移动速度，默认值为10，快到恶心，此处建议修改为5.5</span><br></pre></td></tr></table></figure></p><p><em>最关键的参数在下图已经用红笔圈出来了</em><br><img src="images/csgo/server/server_cfg.png" alt="服务器配置"><br><strong>修改完以上参数之后，服务器便可以启动了，关于server.cfg中的其他参数说明，可以在server.cfg文件的注释中查看，也可以前往<a href="http://csgodev.com/csgodev-server-cfg-for-csgo/" target="_blank" rel="noopener">CSGODev</a>查看</strong></p><p>开放UDP 27015端口</p><p><strong>前往阿里云服务器防火墙控制面板，添加防火墙规则</strong><br><img src="images/csgo/server/port.png" alt="开放端口"></p><p>安装screen，启动CS:GO服务器</p><p><em>安装screen，以便CS:GO服务进程在后台运行</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo install screen</span><br></pre></td></tr></table></figure></p><p><em>返回csgo_server目录，使用screen创建新的会话</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/steam/steamcmd/csgo_server/</span><br><span class="line">screen -S csgo</span><br></pre></td></tr></table></figure></p><p><strong>注意：当screen会话未结束时，在下次ssh登陆时可以使用命令”screen -r csgo”来恢复会话</strong><br><em>此时屏幕会清屏，说明你成功进入到”csgo”这个会话当中，这时开始启动服务器</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./srcds_run -debug -game csgo -console -port 27015 -steamcmd_script /home/steam/steamcmd/update.txt -steam_dir /home/steam/ +map de_dust2</span><br></pre></td></tr></table></figure></p><p><strong>若系统提示没有srcds_run这个文件，则是你当前的文件夹目录不正确</strong></p><blockquote><p><strong>参数解释：</strong><br>-debug <strong>开启调试模式</strong><br>-game <strong>指明游戏，此处是csgo</strong><br>-console <strong>打开游戏控制台</strong><br>-port <strong>游戏服务器端口，此处是27015</strong><br>-steamcmd_script <strong>运行steamcmd的脚本文件地址</strong><br>-steam_dir <strong>Steam的安装地址</strong><br>+map <strong>服务器加载的地图（此处只能用官方地图，创意工坊地图请看后面）</strong></p></blockquote><p><strong>当看到如下图所示的界面之后，说明服务器成功地运行，可以在游戏中连接了</strong><br><img src="images/csgo/server/server_start.png" alt="服务器启动成功"><br><strong>记下红圈中的服务器IP地址，稍后连接使用</strong></p><h1 id="在游戏中连接服务器"><a href="#在游戏中连接服务器" class="headerlink" title="在游戏中连接服务器"></a>在游戏中连接服务器</h1><p>由于国服的社区服务器浏览器和世界服的不一样，世界服现在也免费了，因此目前我们使用世界服进行连接。（关于如何切换到世界服，请自行百度）</p><p>打开社区服务器浏览器，点击“收藏夹选项卡”，输入服务器IP地址，点击“在此地址上查找游戏”，然后选择找到的服务器，点击“将选定游戏服务器添加至收藏夹”</p><p><img src="images/csgo/server/search.png" alt="服务器搜索与添加"></p><p>连接服务器，双击收藏夹中刚刚添加的服务器，输入密码即可，注意输入法</p><p><img src="images/csgo/server/join.png" alt="加入服务器"></p><p>Enjoy！</p><p><em>PS：实测4人在64tick情况下，loss和choke基本为0%，延迟稳定在25ms左右</em><br><img src="images/csgo/server/enjoy.png" alt="连接延迟"></p><h1 id="使用社区地图"><a href="#使用社区地图" class="headerlink" title="使用社区地图"></a>使用社区地图</h1><p>注册Steam网页API</p><p><em>前往<a href="https://steamcommunity.com/dev/apikey" target="_blank" rel="noopener">Steam网页API注册</a>页面注册API，获得Authkey（注意不要泄露出去）</em><br><img src="images/csgo/server/authkey.png" alt="获得Authkey"></p><p>获取创意工坊地图ID</p><p><em>在steam的创意工坊中打开自己想要的地图的页面，复制浏览器地址上的ID。比如说，aim_map_c的地图ID是465367694</em><br><img src="images/csgo/server/map_id.png" alt="获取地图ID"></p><p>启动服务器</p><p><em>在csgo_server文件夹中输入命令</em><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/srcds_run -debug -game csgo -console -port 27015 -steamcmd_script /</span>home<span class="regexp">/steam/</span>steamcmd<span class="regexp">/update.txt -steam_dir /</span>home<span class="regexp">/steam/</span> +host_workshop_map <span class="number">465367694</span> -authkey <span class="number">3</span>XXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure></p><blockquote><p>相同的参数在之前有解释，这里只解释新的参数：<br>+host_workshop_map 465367694 <strong>切换地图为来自创意工坊的地图，后面的数字填入刚刚获取的地图ID</strong><br>-authkey 3XXXXXXXXXX <strong>Steam网页API的Authkey，填入刚刚获取的API Authkey</strong></p></blockquote><p><em>若看到以下Log，则表示服务器切换到创意工坊的地图成功</em><br><img src="images/csgo/server/workshop_map.png" alt="服务器成功切换到创意工坊地图"><br><em>按照上面的步骤再次连接服务器，就会发现服务器地图切换为创意工坊的地图了，Enjoy！</em></p><p>更换地图</p><p><em>如果不想通过重启服务器的方法来更换地图，可以在服务器控制台中输入以下命令：</em></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">changelevel XXXX    <span class="comment">// XXXX可以是创意工坊地图ID，也可以是官方地图名字</span></span><br></pre></td></tr></table></figure><p><img src="images/csgo/server/change_map.png" alt="服务器后台直接更换地图"></p><p>更多</p><p><em>更多关于创意工坊地图的命令，可以参考官方给出的文档：<a href="https://developer.valvesoftware.com/wiki/CSGO_Workshop_For_Server_Operators" target="_blank" rel="noopener">CSGO_Workshop_For_Server_Operators</a></em></p><h1 id="添加Mod和插件"><a href="#添加Mod和插件" class="headerlink" title="添加Mod和插件"></a>添加Mod和插件</h1><p><em>因为我只和同学玩玩普通的创意工坊地图，不需要打Mod，因此这里我并没有做更多的研究。在此引用Wilf博客中的教程，有兴趣的人可以去研究一下</em></p><blockquote><p>常用插件为sourcemod和metamod，装了这俩之后才能装满十，kz，僵尸等等插件。<br>其它有用的插件比如warmod等等可以在x社区找到，安装方法一般是放在cfg以及addon文件夹内，使用方法在插件原文里说明的也比较详细，这里给出网址不赘述了。<br><a href="https://www.sourcemod.net/" target="_blank" rel="noopener">https://www.sourcemod.net</a><br><a href="https://www.metamodsource.net/" target="_blank" rel="noopener">https://www.metamodsource.net</a><br><a href="https://bbs.93x.net/" target="_blank" rel="noopener">https://bbs.93x.net</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></blockquote><p>至此，CS:GO私人服务器的搭建就完成了，可以与同学愉快地玩耍了。要想让服务器在后台继续运行，直接断开ssh连接即可。在下次ssh连接登录后，想要恢复之前的screen会话，输入以下命令即可：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">screen -r csgo</span></span><br></pre></td></tr></table></figure><p>教程中用到网址汇总</p><table><thead><tr><th style="text-align:center">网址</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://wilfoo.com/?p=92https://wilfoo.com/?p=92" target="_blank" rel="noopener">https://wilfoo.com/?p=92https://wilfoo.com/?p=92</a></td><td style="text-align:center">Wilf的博客</td></tr><tr><td style="text-align:center"><a href="https://steamcommunity.com/dev/managegameservers" target="_blank" rel="noopener">https://steamcommunity.com/dev/managegameservers</a></td><td style="text-align:center">Steam 游戏服务器帐户管理</td></tr><tr><td style="text-align:center"><a href="http://csgodev.com/csgodev-server-cfg-for-csgo/" target="_blank" rel="noopener">http://csgodev.com/csgodev-server-cfg-for-csgo/</a></td><td style="text-align:center">CS:GO配置文件来源</td></tr><tr><td style="text-align:center"><a href="https://steamcommunity.com/dev/apikey" target="_blank" rel="noopener">https://steamcommunity.com/dev/apikey</a></td><td style="text-align:center">Steam网页API注册</td></tr><tr><td style="text-align:center"><a href="https://developer.valvesoftware.com/wiki/CSGO_Workshop_For_Server_Operators" target="_blank" rel="noopener">https://developer.valvesoftware.com/wiki/CSGO_Workshop_For_Server_Operators</a></td><td style="text-align:center">创意工坊地图操作手册</td></tr><tr><td style="text-align:center"><a href="https://www.sourcemod.net/" target="_blank" rel="noopener">https://www.sourcemod.net</a></td><td style="text-align:center">Mod插件</td></tr><tr><td style="text-align:center"><a href="https://www.metamodsource.net/" target="_blank" rel="noopener">https://www.metamodsource.net</a></td><td style="text-align:center">Mod插件</td></tr><tr><td style="text-align:center"><a href="https://bbs.93x.net/" target="_blank" rel="noopener">https://bbs.93x.net</a></td><td style="text-align:center">Mod插件</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章首发于&lt;a href=&quot;https://www.jianshu.com/p/b2cde3ba7908&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fisher的简书&lt;/a&gt;&lt;/p&gt;&lt;p&gt;最近比较喜欢和同学玩创意工坊地图，但是和同学不在同一个局域网。任何一个人的电脑做主机延迟和loss都非常的高，玩起来体验非常的差。正好阿里云的服务器可以以每月9.5元的学生价搞到一台云服务器，因此我便开始研究如何搭建私人的CS:GO服务器。在参考了&lt;a href=&quot;https://wilfoo.com/?p=92https://wilfoo.com/?p=92&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wilf的博客&lt;/a&gt;之后，我成功地搭建了自己的游戏服务器，在此十分感谢Wilf！&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://fisher.lazybone.xyz/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="服务器配置" scheme="http://fisher.lazybone.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>VMware装OpenWrt</title>
    <link href="http://fisher.lazybone.xyz/vmware%E8%A3%85openwrt.html"/>
    <id>http://fisher.lazybone.xyz/vmware装openwrt.html</id>
    <published>2019-11-04T12:27:24.000Z</published>
    <updated>2019-11-04T14:31:41.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>在没有设备的情况下，VMware虚拟机就是检验编译成果和学习的最好工具，这篇博客记录了我是如何根据<a href="https://openwrt.org/docs/guide-user/virtualization/vmware" target="_blank" rel="noopener">官方文档</a>配置虚拟机的</p><h2 id="自行编译"><a href="#自行编译" class="headerlink" title="自行编译"></a>自行编译</h2><p>如果自己编译的时候在<code>Target Images</code>中勾选了<code>Build VMware images files</code>后，那么在编译输出的文件夹中就能够直接找到<code>vmdk</code>格式的文件，可以直接跳过前期准备</p><a id="more"></a><h2 id="使用img镜像转换"><a href="#使用img镜像转换" class="headerlink" title="使用img镜像转换"></a>使用img镜像转换</h2><p>首先安装依赖，我使用的是Ubuntu 19.04</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-img</span><br></pre></td></tr></table></figure><p>然后从OpenWrt官网上下载镜像文件并解压，这里下载的是<code>openwrt-18.06.4-x86-64-combined-ext4.img.gz</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.openwrt.org/releases/18.06.4/targets/x86/64/openwrt-18.06.4-x86-64-combined-ext4.img.gz</span><br><span class="line">gunzip openwrt-18.06.4-x86-64-combined-ext4.img.gz</span><br></pre></td></tr></table></figure><p>使用<code>qemu-img</code>将img固件转换为vmdk格式的虚拟机硬盘文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f raw -O vmdk openwrt-18.06.4-x86-64-combined-ext4.img openwrt-18.06.4-x86-64-combined-ext4.vmdk</span><br></pre></td></tr></table></figure><h1 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><p>接下来就是创建一个空白的虚拟机，将vmdk文件添加到该空白虚拟机中</p><ol><li><p>文件-&gt;新建虚拟机，选择自定义</p><p><img src="images/router/Openwrt_VM1.png" alt="第一步"></p></li><li><p>虚拟机硬件兼容性直接默认就好</p><p><img src="images/router/Openwrt_VM2.png" alt="第二步"></p></li><li><p>选择稍后安装操作系统</p><p><img src="images/router/Openwrt_VM3.png" alt="第三步"></p></li><li><p>OpenWrt18使用的是Linux4.x的内核，因此操作系统类型选择<code>其他 Linux 4.x</code></p><p><img src="images/router/Openwrt_VM4.png" alt="第四步"></p></li><li><p>虚拟机的名字，自己起一个喜欢的</p><p><img src="images/router/Openwrt_VM5.png" alt="第五步"></p></li><li><p>分配处理器，1个处理器1个内核就够了</p><p><img src="images/router/Openwrt_VM6.png" alt="第六步"></p></li><li><p>分配内存，256MB就够了</p><p><img src="images/router/Openwrt_VM7.png" alt="第七步"></p></li><li><p>虚拟机的网络连接类型，根据情况选择，我使用的是桥接网络</p><p><img src="images/router/Openwrt_VM8.png" alt="第八步"></p></li><li><p>I/O控制器类型选择<code>LSI Logic</code></p><p><img src="images/router/Openwrt_VM9.png" alt="第九步"></p></li><li><p>虚拟磁盘类型选择<code>SCSI</code></p><p><img src="images/router/Openwrt_VM10.png" alt="第十步"></p></li><li><p>选择磁盘的时候，点击<code>使用现有虚拟磁盘</code>，然后选择刚刚转换的vmdk文件。如果提示说可以转换为格式较新的虚拟磁盘，选择保持当前磁盘格式</p><p><img src="images/router/Openwrt_VM11.png" alt="第十一步1"></p><p><img src="images/router/Openwrt_VM11_1.png" alt="第十一步2"></p></li><li><p>打开虚拟机所在位置，找到<code>xxx.vmx</code>文件，使用文本编辑器打开，在最后一句加上<code>ethernet0.virtualDev = &quot;e1000&quot;</code>，保存文件</p><p>这条语句将虚拟机的虚拟网卡类型设置为Intel e1000，Openwrt能够将其识别出来，如果想使用其他虚拟网卡类型，可以在编译配置的时候在<code>Kernel modules -&gt; Network Devices</code>中勾选其他网卡驱动</p><p><img src="images/router/Openwrt_VM12.png" alt="第十二步"></p></li></ol><h1 id="启动虚拟机，配置网络"><a href="#启动虚拟机，配置网络" class="headerlink" title="启动虚拟机，配置网络"></a>启动虚拟机，配置网络</h1><p>启动虚拟机，屏幕上是不会显示命令行的，看到屏幕的日志不再滚动之后按回车就可以进入命令行了</p><p><img src="images/router/Openwrt_Start.png" alt="开机界面"></p><p>因为Openwrt默认的lan配置是只限于虚拟机本地网络的，因此还不能使用浏览器打开LuCi管理界面。需要修改一下lan网络配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/config/network</span><br></pre></td></tr></table></figure><p>如果网络中的路由器有DHCP服务器，则将<code>interface &#39;lan&#39;</code>改成如下所示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config interface <span class="string">'lan'</span></span><br><span class="line">    option <span class="built_in">type</span> <span class="string">'bridge'</span></span><br><span class="line">    option ifname <span class="string">'eth0'</span></span><br><span class="line">    option proto <span class="string">'dhcp'</span></span><br></pre></td></tr></table></figure><p>如果网络中的路由器没有DHCP服务器，则自行指定：IP地址、子网掩码、默认网关、DNS服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config interface <span class="string">'lan'</span></span><br><span class="line">    option <span class="built_in">type</span> <span class="string">'bridge'</span></span><br><span class="line">    option ifname <span class="string">'eth0'</span></span><br><span class="line">    option proto <span class="string">'static'</span></span><br><span class="line">    option ipaddr <span class="string">'192.168.1.11'</span><span class="comment">#自行指定</span></span><br><span class="line">    option netmask <span class="string">'255.255.255.0'</span> <span class="comment">#自行指定</span></span><br><span class="line">    option ip6assign <span class="string">'60'</span></span><br><span class="line">    option gateway <span class="string">'192.168.1.1'</span><span class="comment">#自行指定</span></span><br><span class="line">    option dns <span class="string">'192.168.1.1'</span><span class="comment">#自行指定</span></span><br></pre></td></tr></table></figure><p>重启网络服务，查看是否获得IP地址，有IP地址就表示配置成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br><span class="line">ifconfig br-lan</span><br></pre></td></tr></table></figure><p><img src="images/router/Openwrt_Net.png" alt="网络配置"></p><h1 id="登录LuCi"><a href="#登录LuCi" class="headerlink" title="登录LuCi"></a>登录LuCi</h1><p>在网络配置好之后，就可以打开浏览器，使用LuCi对路由器进行管理配置了。第一次登录的时候，Openwrt会要求设置root密码</p><p><img src="images/router/Openwrt_LuCi.png" alt="LuCi"></p><p>之后就可以愉快地玩耍了😁</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h1&gt;&lt;p&gt;在没有设备的情况下，VMware虚拟机就是检验编译成果和学习的最好工具，这篇博客记录了我是如何根据&lt;a href=&quot;https://openwrt.org/docs/guide-user/virtualization/vmware&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;配置虚拟机的&lt;/p&gt;&lt;h2 id=&quot;自行编译&quot;&gt;&lt;a href=&quot;#自行编译&quot; class=&quot;headerlink&quot; title=&quot;自行编译&quot;&gt;&lt;/a&gt;自行编译&lt;/h2&gt;&lt;p&gt;如果自己编译的时候在&lt;code&gt;Target Images&lt;/code&gt;中勾选了&lt;code&gt;Build VMware images files&lt;/code&gt;后，那么在编译输出的文件夹中就能够直接找到&lt;code&gt;vmdk&lt;/code&gt;格式的文件，可以直接跳过前期准备&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://fisher.lazybone.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://fisher.lazybone.xyz/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt编译</title>
    <link href="http://fisher.lazybone.xyz/openwrt%E7%BC%96%E8%AF%91.html"/>
    <id>http://fisher.lazybone.xyz/openwrt编译.html</id>
    <published>2019-11-03T14:12:18.000Z</published>
    <updated>2019-11-04T14:19:35.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>“你们为什么不自己去尝试编译一个OpenWrt研究一下呢？”</p><p>在操作系统课上，刘刚不止一次讲了这句话了。其实我之前给路由器刷过OpenWrt固件，但是编译还真没试过。恰好我对此也有兴趣，于是说干就干，自己编译一个OpenWrt固件！</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>系统环境：Ubuntu 19.04 64-bit</p><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install subversion g++ zlib1g-dev build-essential git python python3</span><br><span class="line">sudo apt install libncurses5-dev gawk gettext unzip file libssl-dev wget</span><br><span class="line">sudo apt install libelf-dev ecj fastjar java-propose-classpath</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="获取OpenWrt源码"><a href="#获取OpenWrt源码" class="headerlink" title="获取OpenWrt源码"></a>获取OpenWrt源码</h1><p>OpenWrt官方也有一个Git仓库，但是国内的网络使用比较慢，因此我们使用GitHub上来自官方的镜像仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openwrt/openwrt.git</span><br></pre></td></tr></table></figure><p>之后需要更新源码的时候，只需要使用Git的命令即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p><img src="images/router/Openwrt_Git.png" alt="更新源码"></p><h1 id="更新依赖包"><a href="#更新依赖包" class="headerlink" title="更新依赖包"></a>更新依赖包</h1><p>在每次编译之前我们需要将依赖包更新一下，以保证编译到固件中的软件包是最新版的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> openwrt</span><br><span class="line"></span><br><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure><p><img src="images/router/Openwrt_FeedsUpdate.png" alt="更新依赖包"></p><p><img src="images/router/Openwrt_FeedsInstall.png" alt="安装依赖包"></p><h1 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h1><p>在正式编译之前，我们需要修改编译的配置文件，以指定编译的目标平台、架构、需要的系统软件包、固件的格式。在OpenWrt的编译配置中，我们使用图形化的编译配置<code>make menuconfig</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>此时终端会出现一个如下图的界面</p><p><img src="images/router/Openwrt_Menuconfig.png" alt="编译配置"></p><p>在这个界面就可以配置出自己想要的固件，我的配置如下：</p><ul><li>Target System =&gt; x86    (目标系统架构)</li><li>Subtarget =&gt; x86_64    (目标CPU类型)</li><li>Target Profile =&gt; Generic x86/64    (目标设备)</li></ul><p>剩下的配置就是<strong>编译出的固件格式</strong>，<strong>系统环境依赖包</strong>，<strong>LuCi依赖包</strong>等等。可以根据自己的需要灵活选择。在选择完成之后保存配置文件，就可以开始编译了</p><h1 id="正式编译"><a href="#正式编译" class="headerlink" title="正式编译"></a>正式编译</h1><p>第一次编译的时候，Openwrt并不推荐使用多线程编译，因为编译过程中需要下载比较多的软件包。因此第一次编译我只添加了输出编译日志的参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make V=99</span><br></pre></td></tr></table></figure><p>第一次编译完成之后，在以后的编译中就可以使用多线程编译了，具体线程数需要看CPU的核心数。因为使用的进程数量是<code>-j</code>参数中的数字+1，而我给虚拟机分配的CPU核心数有4个，因此我的参数是<code>-j3</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j3 V=99</span><br></pre></td></tr></table></figure><p>在网络通畅的情况下，第一次编译需要的时间比较长，我用了一个下午😂。后面加入多线程编译后只需要20分钟就编译完了</p><p><img src="images/router/Openwrt_Make1.png" alt="编译1"></p><p><img src="images/router/Openwrt_Make2.png" alt="编译2"></p><p>编译完成后的固件在文件夹中的<code>bin/target</code>中，编译好的依赖包在<code>bin/packages</code>中，以后可以做一个镜像站代替官方的opkg依赖源</p><p><img src="images/router/Openwrt_Makeup.png" alt="编译完成"></p><p>需要重新编译的时候，先进行<code>make clean</code>清理之前编译好的固件，再执行<code>make</code>重新编译</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;“你们为什么不自己去尝试编译一个OpenWrt研究一下呢？”&lt;/p&gt;&lt;p&gt;在操作系统课上，刘刚不止一次讲了这句话了。其实我之前给路由器刷过OpenWrt固件，但是编译还真没试过。恰好我对此也有兴趣，于是说干就干，自己编译一个OpenWrt固件！&lt;/p&gt;&lt;h1 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h1&gt;&lt;p&gt;系统环境：Ubuntu 19.04 64-bit&lt;/p&gt;&lt;p&gt;安装依赖&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install subversion g++ zlib1g-dev build-essential git python python3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install libncurses5-dev gawk gettext unzip file libssl-dev wget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install libelf-dev ecj fastjar java-propose-classpath&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://fisher.lazybone.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://fisher.lazybone.xyz/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>小程序获取QQ音乐播放链接插件</title>
    <link href="http://fisher.lazybone.xyz/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%8E%B7%E5%8F%96qq%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E9%93%BE%E6%8E%A5%E6%8F%92%E4%BB%B6.html"/>
    <id>http://fisher.lazybone.xyz/小程序获取qq音乐播放链接插件.html</id>
    <published>2019-11-03T08:27:15.000Z</published>
    <updated>2019-11-04T04:45:54.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近参加了一个微信小程序开发大赛，其中用到了音乐播放功能。于是在小程序官方文档和插件库中逛了一圈，但是官方没有提供对QQ音乐的搜索和获取播放链接等支持，插件库中的插件寥寥无几，并不好用。无奈之下只好自己写一个关于QQ音乐的插件，来完成相应的搜索，获取播放链接等功能。</p><p>在开始介绍插件功能之前，特别感谢<a href="https://www.jianshu.com/p/67e4bd47d981" target="_blank" rel="noopener">简书tisa</a>提供了QQ音乐相应的api。这个插件就是基于这些api进行的封装。</p><a id="more"></a><blockquote><p>插件项目地址：<a href="https://github.com/FisherWY/QQMusicPlugin" target="_blank" rel="noopener">https://github.com/FisherWY/QQMusicPlugin</a></p></blockquote><p><strong>下面正式开始介绍插件使用方法</strong></p><h1 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h1><p>前往<a href="https://github.com/FisherWY/QQMusicPlugin/releases" target="_blank" rel="noopener">下载页面</a>，下载最新的v0.2版本，将下载的文件解压放在小程序utils文件夹中，解压后的文件目录结构如下图所示：</p><p><img src="images/qqmusicplugin/File_Tree.png" alt="文件目录结构"></p><h1 id="添加合法Request域名"><a href="#添加合法Request域名" class="headerlink" title="添加合法Request域名"></a>添加合法Request域名</h1><p>前往微信公众平台-&gt;开发-&gt;开发设置-&gt;服务器域名。添加以下request合法域名，该域名用于音乐的搜索等</p><blockquote><p><a href="https://c.y.qq.com" target="_blank" rel="noopener">https://c.y.qq.com</a></p></blockquote><p><img src="images/qqmusicplugin/Add_Address.png" alt="添加合法域名"></p><h1 id="页面中引入插件"><a href="#页面中引入插件" class="headerlink" title="页面中引入插件"></a>页面中引入插件</h1><p>在小程序页面js文件中引用<code>qqMusicTools.js</code>，注意相对路径，这里演示的页面路径为<code>/pages/index/</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> musicTool = <span class="built_in">require</span>(<span class="string">"../../utils/QQMusicPlugin/qqMusicTools.js"</span>)</span><br></pre></td></tr></table></figure><p><img src="images/qqmusicplugin/Require.png" alt="引入插件"></p><h1 id="搜索音乐"><a href="#搜索音乐" class="headerlink" title="搜索音乐"></a>搜索音乐</h1><p>搜索音乐接口searchMusic（使用PromiseJS语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.searchMusic(<span class="number">1</span>, <span class="number">10</span>, <span class="string">"墙纸"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">searchRes</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(searchRes)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接口参数说明：</p><ul><li><p>page：搜索页码</p></li><li><p>number：每页搜索记录数量</p></li><li><p>keyword：搜索关键字</p></li></ul><p>搜索接果如下图：</p><p><img src="images/qqmusicplugin/Search_Music.png" alt="搜索音乐"></p><h1 id="播放音乐"><a href="#播放音乐" class="headerlink" title="播放音乐"></a>播放音乐</h1><p>获取播放音乐链接接口playMusic接受1个参数：<code>filename</code>。表示要播放的音乐的文件名，文件名来自searchMusic结果中的<code>songmid</code>（使用PeomiseJS语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.playMusic(<span class="string">"0021rBlZ1gQiLy"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">playRes</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(playRes)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接口参数说明：</p><ul><li>filename：要播放的音乐的文件名，文件名来自searchMusic结果中的<code>songmid</code></li></ul><p>返回结果如下图：</p><p><img src="images/qqmusicplugin/Search_Result.png" alt="获取播放链接"></p><h1 id="获取专辑图片"><a href="#获取专辑图片" class="headerlink" title="获取专辑图片"></a>获取专辑图片</h1><p>获取音乐专辑图片接口getAlbumImage（使用Promise语法）（在v0.1版本中，搜索音乐接口已经集成了该接口，专辑图片字段名为<code>albumImg</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.getAlbumImage(<span class="number">6271293</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>albumId：该参数来自searchMusic结果中的<code>albumId</code></li></ul><p>返回结果如下图：</p><p><img src="images/qqmusicplugin/Album_Image.png" alt="获取专辑图片"></p><h1 id="获取热歌榜"><a href="#获取热歌榜" class="headerlink" title="获取热歌榜"></a>获取热歌榜</h1><p>获取热门音乐榜Top100歌单接口getTopMusic不需要任何参数，直接调用即可获得返回结果（使用Promise语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.getTopMusic().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>返回结果如下图：</p><p><img src="images/qqmusicplugin/Top.png" alt="获取热歌榜"></p><h1 id="随机推荐歌单"><a href="#随机推荐歌单" class="headerlink" title="随机推荐歌单"></a>随机推荐歌单</h1><p>随机推荐歌单接口radomRecommend不需要任何参数，直接调用即可获得返回结果（使用Promise语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.randomRecommend().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>返回结果如下图：</p><p><img src="images/qqmusicplugin/Random.png" alt="随机推荐歌单"></p><h1 id="播放音乐-1"><a href="#播放音乐-1" class="headerlink" title="播放音乐"></a>播放音乐</h1><p>播放音乐，这里使用BackgroundAudioManager演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取全局唯一的背景音乐管理器</span></span><br><span class="line"><span class="keyword">const</span> bgAudioManager = wx.getBackgroundAudioManager()</span><br><span class="line"><span class="comment">// 音乐标题</span></span><br><span class="line">bgAudioManager.title = <span class="string">'Music'</span></span><br><span class="line"><span class="comment">// 音乐歌手名</span></span><br><span class="line">bgAudioManager.singer = <span class="string">'Singer'</span></span><br><span class="line"><span class="comment">// 专辑封面图片</span></span><br><span class="line">bgAudioManager.coverImgUrl = <span class="string">'imgUrl'</span></span><br><span class="line"><span class="comment">// 音乐播放链接，设置后自动开始播放</span></span><br><span class="line">bgAudioManager.src = playRes</span><br></pre></td></tr></table></figure><h1 id="整体使用流程"><a href="#整体使用流程" class="headerlink" title="整体使用流程"></a>整体使用流程</h1><p>代码整合到一块，整个使用流程如下（需要注意异步问题）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bgAudioManager = wx.getBackgroundAudioManager();</span><br><span class="line"><span class="comment">// 搜索音乐</span></span><br><span class="line">musicTool.searchMusic(<span class="number">1</span>, <span class="number">10</span>, <span class="string">"绿色"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">searchRes</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(searchRes)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取播放链接</span></span><br><span class="line">musicTool.playMusic(<span class="string">"0021rBlZ1gQiLy"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">playRes</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(playRes)</span><br><span class="line">  bgAudioManager.title = <span class="string">'Music'</span></span><br><span class="line">  bgAudioManager.src = playRes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取专辑封面</span></span><br><span class="line">musicTool.getAlbumImage(<span class="number">6271293</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取top100音乐</span></span><br><span class="line">musicTool.getTopMusic().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 随机推荐音乐</span></span><br><span class="line">musicTool.randomRecommend().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h1><ul><li><p>当要播放的音乐属于收费音乐时无法播放 ，具体表现为获取token返回值为空</p></li><li><p>请求过程中需要注意js中的异步问题 </p></li><li><p>微信小程序的BackgroundAudioManager存在部分链接无法播放的问题，因此建议使用InnerAudioContext，无法播放的详细原因参见<a href="https://www.jianshu.com/p/9553cdbc750d" target="_blank" rel="noopener">JabinGP的简书</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近参加了一个微信小程序开发大赛，其中用到了音乐播放功能。于是在小程序官方文档和插件库中逛了一圈，但是官方没有提供对QQ音乐的搜索和获取播放链接等支持，插件库中的插件寥寥无几，并不好用。无奈之下只好自己写一个关于QQ音乐的插件，来完成相应的搜索，获取播放链接等功能。&lt;/p&gt;&lt;p&gt;在开始介绍插件功能之前，特别感谢&lt;a href=&quot;https://www.jianshu.com/p/67e4bd47d981&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书tisa&lt;/a&gt;提供了QQ音乐相应的api。这个插件就是基于这些api进行的封装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="http://fisher.lazybone.xyz/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="JavaScript" scheme="http://fisher.lazybone.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx搭建下载服务器</title>
    <link href="http://fisher.lazybone.xyz/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BA%E4%B8%8B%E8%BD%BD%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
    <id>http://fisher.lazybone.xyz/使用nginx搭建下载服务器.html</id>
    <published>2019-11-01T12:19:30.000Z</published>
    <updated>2019-11-04T14:28:24.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Nginx搭建下载服务器"><a href="#使用Nginx搭建下载服务器" class="headerlink" title="使用Nginx搭建下载服务器"></a>使用Nginx搭建下载服务器</h1><p>下载服务器主要用于存放自己日常使用的安装包和文件</p><h2 id="1-创建文件存放根目录"><a href="#1-创建文件存放根目录" class="headerlink" title="1. 创建文件存放根目录"></a>1. 创建文件存放根目录</h2><p>使用<code>ssh</code>登录服务器，创建文件夹。在这里我使用的是自己的用户和自己用户的根目录，方便文件的管理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir downloads</span><br></pre></td></tr></table></figure><h2 id="2-修改Nginx配置文件"><a href="#2-修改Nginx配置文件" class="headerlink" title="2. 修改Nginx配置文件"></a>2. 修改Nginx配置文件</h2><p>修改Nginx配置文件，将文件夹添加为下载根目录</p><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>在Http Server添加一个<code>location</code>代码块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /downloads/ &#123;</span><br><span class="line">    <span class="built_in">alias</span> /home/fisher/downloads/;</span><br><span class="line">    autoindex on;</span><br><span class="line">    <span class="comment"># 只显示文件粗略大小，以k、M等单位计算</span></span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    <span class="comment"># 使用服务器本地时间</span></span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-重载Nginx"><a href="#3-重载Nginx" class="headerlink" title="3. 重载Nginx"></a>3. 重载Nginx</h2><p>重新加载Nginx配置文件，使配置生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><p>这时候用浏览器访问<code>http://hostname/downloads/</code>，出现以下页面，配置成功！</p><p><img src="images/nginx/downloads.png" alt="页面根目录"></p><h2 id="4-存在的问题"><a href="#4-存在的问题" class="headerlink" title="4. 存在的问题"></a>4. 存在的问题</h2><p>在使用默认的配置下，使用<code>curl</code>或<code>wget</code>下载到1m之后就会丢失连接，使用迅雷下载途中会中断多次，在查找并使用了网上的解决方案之后仍然不能解决问题。个人认为是默认缓冲为1m的原因，具体的解决方法待我研究研究。在此先挖一个坑。</p><h3 id="问题的解决（2019-11-04）"><a href="#问题的解决（2019-11-04）" class="headerlink" title="问题的解决（2019-11-04）"></a>问题的解决（2019-11-04）</h3><p>在研究了<code>sendfile</code>参数、<code>max_chunk_size</code>参数、<code>buffer_size</code>等参数无用之后。今天早上我的Nginx甚至不能正常工作了，无奈之下我只好把Nginx卸载重装。神奇的是重装完之后一切都恢复正常了，不需要加什么特别的参数，使用默认的配置文件就能解决存在的问题了。看来重装能解决99%的问题😂？</p><h2 id="5-root和alias的区别"><a href="#5-root和alias的区别" class="headerlink" title="5. root和alias的区别"></a>5. root和alias的区别</h2><p>最开始配置<code>location</code>代码块的中的根目录时候，我使用的是<code>root</code>，重载Nginx之后发现404。接着我换成了<code>alias</code>之后就可以了。仔细查了一下文档，这两个参数的区别在于：<code>两者解析URL的方式不同</code></p><p>首先<code>location</code>代码块如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location <span class="regexp">/folder/</span> &#123;</span><br><span class="line">    (root或alias): <span class="regexp">/home/</span>fisher<span class="regexp">/downloads/</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>alias</code>：使用<code>alias</code>中的路径替换掉URL的参数路径，例如：www.domain.com/folder/会返回服务器上的<code>/home/fisher/downloads/</code>中的文件，使用该方式最后面必须以<code>/</code>结束，否则会找不到文件</li><li><code>root</code>：将URL参数路径中的路径追加到<code>root</code>后面，例如：www.domain.com/folder/会返回服务器上的<code>/home/fisher/downloads/folder/</code>，因此出现了404的问题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Nginx搭建下载服务器&quot;&gt;&lt;a href=&quot;#使用Nginx搭建下载服务器&quot; class=&quot;headerlink&quot; title=&quot;使用Nginx搭建下载服务器&quot;&gt;&lt;/a&gt;使用Nginx搭建下载服务器&lt;/h1&gt;&lt;p&gt;下载服务器主要用于存放自己日常使用的安装包和文件&lt;/p&gt;&lt;h2 id=&quot;1-创建文件存放根目录&quot;&gt;&lt;a href=&quot;#1-创建文件存放根目录&quot; class=&quot;headerlink&quot; title=&quot;1. 创建文件存放根目录&quot;&gt;&lt;/a&gt;1. 创建文件存放根目录&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;ssh&lt;/code&gt;登录服务器，创建文件夹。在这里我使用的是自己的用户和自己用户的根目录，方便文件的管理&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir downloads&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;2-修改Nginx配置文件&quot;&gt;&lt;a href=&quot;#2-修改Nginx配置文件&quot; class=&quot;headerlink&quot; title=&quot;2. 修改Nginx配置文件&quot;&gt;&lt;/a&gt;2. 修改Nginx配置文件&lt;/h2&gt;&lt;p&gt;修改Nginx配置文件，将文件夹添加为下载根目录&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://fisher.lazybone.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="服务器配置" scheme="http://fisher.lazybone.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Nginx配置" scheme="http://fisher.lazybone.xyz/tags/nginx%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>从Github迁移Hexo博客</title>
    <link href="http://fisher.lazybone.xyz/%E4%BB%8Egithub%E8%BF%81%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://fisher.lazybone.xyz/从github迁移hexo博客.html</id>
    <published>2019-10-31T14:29:01.000Z</published>
    <updated>2019-10-31T16:05:51.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从GitHub迁移Hexo博客"><a href="#从GitHub迁移Hexo博客" class="headerlink" title="从GitHub迁移Hexo博客"></a>从GitHub迁移Hexo博客</h2><p>博客项目重启之后，鉴于GitHub的访问速度，我便想着将博客迁移到服务器上。经过一番研究之后，我成功地实现了博客的迁移，并且Github和阿里云服务器能同步更新博客。</p><h3 id="1-所需环境一览"><a href="#1-所需环境一览" class="headerlink" title="1. 所需环境一览"></a>1. 所需环境一览</h3><ul><li><p>本地环境：</p><ul><li>由于之前在GitHub上搭建过博客，因此本地留有Hexo的根目录，我的Hexo根目录文件夹名称为<strong>blog</strong>。</li><li>系统：macOS Mojave</li><li>环境：Git-v2.17，Node.js-v8.9.3，hexo，ssh</li><li>任务：创建RSA公钥，本地生成静态网页文件，用Git同时推送到Github和阿里云服务器上</li></ul></li><li><p>阿里云服务器环境：</p><ul><li>系统：Centos7</li><li>环境：Git-v1.8，Node.js-v6.17.2，Nginx（推荐更新为最新版，我使用该版本没什么问题）</li><li>任务：创建Git仓库用于储存静态网页文件，使用Nginx作为网页服务器</li></ul></li><li><p>Github环境：</p><ul><li>环境：保存本地环境中的RSA公钥</li><li>任务：创建Git仓库用于储存静态网页文件，使用Github Pages设置网页主页</li></ul></li></ul><a id="more"></a><h3 id="2-云服务器的配置"><a href="#2-云服务器的配置" class="headerlink" title="2. 云服务器的配置"></a>2. 云服务器的配置</h3><p>各个环境所需的依赖请自行安装，在此就不贴出安装步骤了</p><h4 id="2-1-创建新用户，配置Git"><a href="#2-1-创建新用户，配置Git" class="headerlink" title="2.1 创建新用户，配置Git"></a>2.1 创建新用户，配置Git</h4><p>创建一个新用户用于网站的配置（推荐），也可以使用现有用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd fisher<span class="comment"># 添加名为fisher的新用户</span></span><br><span class="line">passwd fisher<span class="comment"># 修改fisher的密码</span></span><br><span class="line">chmod 740 /etc/sudoers<span class="comment"># 将fisher添加到sudo名单中</span></span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>找到如下行，在下面添加一行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line"><span class="comment"># 添加以下行</span></span><br><span class="line">fisherALL=(ALL)ALL</span><br></pre></td></tr></table></figure><p>保存并推出，将文件权限改回来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><h4 id="2-2-添加RSA公钥"><a href="#2-2-添加RSA公钥" class="headerlink" title="2.2 添加RSA公钥"></a>2.2 添加RSA公钥</h4><p>在本地电脑上打开终端，使用Git Bash创建密钥。如果要使用已有的密钥，这一步可以跳过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa<span class="comment"># 一路回车即可</span></span><br></pre></td></tr></table></figure><p><img src="images/blogtek/keygen.png" alt=""></p><p><strong>注意：该密钥不可以泄漏给其他人，一旦泄漏服务器很危险。这里生成的key仅用做演示，因此没有打码</strong></p><p>切换至<strong>“fisher”</strong>用户，创建<strong>“.ssh”</strong>文件夹以及<strong>“authorized_keys”</strong>文件并将刚刚生成的<strong>“key.pub”</strong>中的内容复制粘贴到里面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su fisher</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>修改<strong>“authorized_keys”</strong>的权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">chmod 600 .ssh/authorized_keys</span><br><span class="line">chmod 700 .ssh</span><br></pre></td></tr></table></figure><h4 id="2-3-测试到服务器的连接"><a href="#2-3-测试到服务器的连接" class="headerlink" title="2.3 测试到服务器的连接"></a>2.3 测试到服务器的连接</h4><p>使用ssh连接到服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh fisher@ADDRESS<span class="comment"># ADDRESS是你服务器的IP地址</span></span><br></pre></td></tr></table></figure><p>如果不需要输入密码就能连上服务器，则说明你的RSA公钥配置成功</p><h3 id="3-Github仓库的配置"><a href="#3-Github仓库的配置" class="headerlink" title="3. Github仓库的配置"></a>3. Github仓库的配置</h3><p>由于之前我在搭建Github Pages的时候没有使用RSA公钥，我的部署全部是用用户名和密码的。因此本次迁移，我顺便把Github的博客仓库也配置上RSA公钥</p><h4 id="3-1-添加RSA公钥"><a href="#3-1-添加RSA公钥" class="headerlink" title="3.1 添加RSA公钥"></a>3.1 添加RSA公钥</h4><p>打开位于Github上面的博客仓库，点击<strong>“Settings”</strong>，点击<strong>“Deploy Keys”</strong>，点击<strong>“Add deploy key”</strong></p><p><img src="images/blogtek/addkey.png" alt=""></p><p>然后将<strong>“key.pub”</strong>中的内容粘贴进去，勾选选项，点击确认并输入密码</p><p><img src="images/blogtek/addkey1.png" alt=""></p><p>到此，Github上的RSA公钥就配置完成了</p><h3 id="4-云服务器的Nginx配置"><a href="#4-云服务器的Nginx配置" class="headerlink" title="4. 云服务器的Nginx配置"></a>4. 云服务器的Nginx配置</h3><h4 id="4-1-创建网站根目录，配置Nginx"><a href="#4-1-创建网站根目录，配置Nginx" class="headerlink" title="4.1 创建网站根目录，配置Nginx"></a>4.1 创建网站根目录，配置Nginx</h4><p>以fisher用户登录服务器，在用户根目录下创建网站根目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /blog</span><br></pre></td></tr></table></figure><p>在Nginx的配置文件中添加网站目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>如果使用HTTP协议，则在80端口中的server添加网站目录。如果使用HTTPS协议，则在443端口中添加网站目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  fiher.lazybone.xyz;    <span class="comment"># 修改为自己的域名</span></span><br><span class="line">    root         /home/fisher/blog;    <span class="comment"># 修改为网站的根目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新载入Nginx，使配置生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><h4 id="4-2-建立Git仓库"><a href="#4-2-建立Git仓库" class="headerlink" title="4.2 建立Git仓库"></a>4.2 建立Git仓库</h4><p>创建一个Git裸库，只用于保存Repository信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git init --bare blogit.git</span><br></pre></td></tr></table></figure><p>使用Git-Hooks同步网站根目录，这里使用的是Git中的<strong>“post-receive”</strong>，当有Git收发的时候会调用该脚本，自动将最新内容同步到网站根目录中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blogit.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>将以下语句写入文件中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/home/fisher/blog --git-dir=/home/fisher/blogit.git checkout -f</span><br></pre></td></tr></table></figure><p>保存并赋予执行权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/fisher/blogit.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h3 id="5-本地配置"><a href="#5-本地配置" class="headerlink" title="5. 本地配置"></a>5. 本地配置</h3><h4 id="5-1-配置”-config-yml”"><a href="#5-1-配置”-config-yml”" class="headerlink" title="5.1 配置”_config.yml”"></a>5.1 配置”_config.yml”</h4><p>打开位于Hexo博客根目录下的<strong>“_config.yml”</strong>文件，找到<strong>“deploy”</strong>并修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">-   <span class="built_in">type</span>: git</span><br><span class="line">    repo: fisher@ADDRESS:/home/fisher/blogit.git     <span class="comment"># ADDRESS是服务器地址</span></span><br><span class="line">    branch: master      <span class="comment"># 分支</span></span><br><span class="line">-   <span class="built_in">type</span>: git</span><br><span class="line">    repo: https://github.com/fisherwy/fisherwy.github.io.git<span class="comment"># 换成自己Github上的仓库地址</span></span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><h4 id="5-2-部署"><a href="#5-2-部署" class="headerlink" title="5.2 部署"></a>5.2 部署</h4><p>至此，整个博客的迁移工作只剩下最后一步，就是重新部署一次了，以后按照以前的部署步骤来就可以了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>迁移的教程最初来自此处：<a href="https://blog.csdn.net/StaunchKai/article/details/82878928" target="_blank" rel="noopener">StaunchKai的博客</a>。非常感谢StaunchKai提供的教程！</p><p>整个迁移工作下来，重点其实只有3个：</p><ul><li>在云服务器上配置RSA公钥</li><li>建立网站根目录，配置Nginx的网页根目录</li><li>建立博客仓库，与网站根目录挂钩，同步更新</li></ul><p>掌握了这3个重点的操作之后，其他的操作其实很简单</p><p>于是乎在云服务器上，我又重新开始记录我的日常点滴</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;从GitHub迁移Hexo博客&quot;&gt;&lt;a href=&quot;#从GitHub迁移Hexo博客&quot; class=&quot;headerlink&quot; title=&quot;从GitHub迁移Hexo博客&quot;&gt;&lt;/a&gt;从GitHub迁移Hexo博客&lt;/h2&gt;&lt;p&gt;博客项目重启之后，鉴于GitHub的访问速度，我便想着将博客迁移到服务器上。经过一番研究之后，我成功地实现了博客的迁移，并且Github和阿里云服务器能同步更新博客。&lt;/p&gt;&lt;h3 id=&quot;1-所需环境一览&quot;&gt;&lt;a href=&quot;#1-所需环境一览&quot; class=&quot;headerlink&quot; title=&quot;1. 所需环境一览&quot;&gt;&lt;/a&gt;1. 所需环境一览&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本地环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于之前在GitHub上搭建过博客，因此本地留有Hexo的根目录，我的Hexo根目录文件夹名称为&lt;strong&gt;blog&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;系统：macOS Mojave&lt;/li&gt;
&lt;li&gt;环境：Git-v2.17，Node.js-v8.9.3，hexo，ssh&lt;/li&gt;
&lt;li&gt;任务：创建RSA公钥，本地生成静态网页文件，用Git同时推送到Github和阿里云服务器上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阿里云服务器环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统：Centos7&lt;/li&gt;
&lt;li&gt;环境：Git-v1.8，Node.js-v6.17.2，Nginx（推荐更新为最新版，我使用该版本没什么问题）&lt;/li&gt;
&lt;li&gt;任务：创建Git仓库用于储存静态网页文件，使用Nginx作为网页服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Github环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境：保存本地环境中的RSA公钥&lt;/li&gt;
&lt;li&gt;任务：创建Git仓库用于储存静态网页文件，使用Github Pages设置网页主页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="博客相关" scheme="http://fisher.lazybone.xyz/tags/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Aria2配合FRP使用</title>
    <link href="http://fisher.lazybone.xyz/Aria2%E9%85%8D%E5%90%88FRP%E4%BD%BF%E7%94%A8.html"/>
    <id>http://fisher.lazybone.xyz/Aria2配合FRP使用.html</id>
    <published>2018-10-25T10:47:20.000Z</published>
    <updated>2019-11-03T07:43:09.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Aria2配合FRP内网穿透使用"><a href="#Aria2配合FRP内网穿透使用" class="headerlink" title="Aria2配合FRP内网穿透使用"></a>Aria2配合FRP内网穿透使用</h1><p>在上一篇文章中，我们使用一台云服务器，一个域名，一台路由器实现了内网穿透，并配置了路由器管理页面和SSH的内网穿透，在这篇文章中，我们用FRP配合路由器的Aria2实现远程下载功能。</p><h2 id="第一步，对路由器的Aria进行配置。"><a href="#第一步，对路由器的Aria进行配置。" class="headerlink" title="第一步，对路由器的Aria进行配置。"></a>第一步，对路由器的Aria进行配置。</h2><p>浏览器登录管理页面并启动Aria2服务，点击aria2.conf详细配置，将其中的rpc-secret改为你想设置的密码，dir设置为你想要储存下载的位置，最后应用本页面的设置，如下图所示:</p><a id="more"></a><p><img src="images/router/Aria_Start.png" alt=""></p><h2 id="第二步，添加Aria2到防火墙的白名单中。"><a href="#第二步，添加Aria2到防火墙的白名单中。" class="headerlink" title="第二步，添加Aria2到防火墙的白名单中。"></a>第二步，添加Aria2到防火墙的白名单中。</h2><p>这对于H大padavan固件来说十分简单，只需要以下3步：</p><p><img src="images/router/Aria_FirewallSetting.png" alt=""></p><h2 id="第三步，对FRP客户端的配置文件进行编辑。"><a href="#第三步，对FRP客户端的配置文件进行编辑。" class="headerlink" title="第三步，对FRP客户端的配置文件进行编辑。"></a>第三步，对FRP客户端的配置文件进行编辑。</h2><p>在昨天的配置文件中追加如下配置即可：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[aria]</span><br><span class="line">type = http</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 6800</span><br><span class="line">subdomain = aria</span><br></pre></td></tr></table></figure><p>添加后应用配置，如下图所示：</p><p><img src="images/router/Aria_FRPSetting.png" alt=""></p><p>查看路由器的log，若出现下图所示的日志，则表示配置成功。</p><p><img src="images/router/Aria_Success.png" alt=""></p><h2 id="第四步，Aria2-Web-控制台配置。"><a href="#第四步，Aria2-Web-控制台配置。" class="headerlink" title="第四步，Aria2 Web 控制台配置。"></a>第四步，Aria2 Web 控制台配置。</h2><p>我这里使用的是这个控制台：<a href="http://aria2c.com" target="_blank" rel="noopener">Aria2c</a>。打开之后点击右上角设置，在JSON-RPC Path中填写如下配置：<code>http://token:1234567@aria.yourdomain.com:8842/jsonrpc</code>，点击保存，若网页没有错误提示，则配置成功。</p><h2 id="第五步，测试下载。"><a href="#第五步，测试下载。" class="headerlink" title="第五步，测试下载。"></a>第五步，测试下载。</h2><p>找到你要下载的东西，右键复制链接，如下图所示：</p><p><img src="images/router/Aria_Downloadlink.png" alt=""></p><p>返回Web控制台，点击添加按钮，将链接粘贴进去。如果需要重命名文件，则在文件名一栏填入想要的文件名，留空则是原名。如果需要改变下载位置，则在保存位置中进行填写，留空则下载到第一步配置的dir中。点击添加，一个下载任务就创建成功了，右键可以对任务进行开始/暂停/删除操作。</p><p><img src="images/router/Aria_Download.png" alt=""></p><h2 id="到这里Aria2配合FRP使用的配置就完成了。"><a href="#到这里Aria2配合FRP使用的配置就完成了。" class="headerlink" title="到这里Aria2配合FRP使用的配置就完成了。"></a>到这里Aria2配合FRP使用的配置就完成了。</h2><p>如果觉得复制下载地址再粘贴的方法麻烦，或者需要不限速下载百度网盘的文件，可以在浏览器中添加Aria2下载插件。关于如何添加插件并下载百度网盘文件的教程，网址在这里：<a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="noopener">https://github.com/acgotaku/BaiduExporter</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Aria2配合FRP内网穿透使用&quot;&gt;&lt;a href=&quot;#Aria2配合FRP内网穿透使用&quot; class=&quot;headerlink&quot; title=&quot;Aria2配合FRP内网穿透使用&quot;&gt;&lt;/a&gt;Aria2配合FRP内网穿透使用&lt;/h1&gt;&lt;p&gt;在上一篇文章中，我们使用一台云服务器，一个域名，一台路由器实现了内网穿透，并配置了路由器管理页面和SSH的内网穿透，在这篇文章中，我们用FRP配合路由器的Aria2实现远程下载功能。&lt;/p&gt;&lt;h2 id=&quot;第一步，对路由器的Aria进行配置。&quot;&gt;&lt;a href=&quot;#第一步，对路由器的Aria进行配置。&quot; class=&quot;headerlink&quot; title=&quot;第一步，对路由器的Aria进行配置。&quot;&gt;&lt;/a&gt;第一步，对路由器的Aria进行配置。&lt;/h2&gt;&lt;p&gt;浏览器登录管理页面并启动Aria2服务，点击aria2.conf详细配置，将其中的rpc-secret改为你想设置的密码，dir设置为你想要储存下载的位置，最后应用本页面的设置，如下图所示:&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://fisher.lazybone.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://fisher.lazybone.xyz/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>FRP内网穿透配置</title>
    <link href="http://fisher.lazybone.xyz/FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html"/>
    <id>http://fisher.lazybone.xyz/FRP内网穿透.html</id>
    <published>2018-10-24T07:18:31.000Z</published>
    <updated>2019-11-01T12:22:58.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FRP内网穿透配置"><a href="#FRP内网穿透配置" class="headerlink" title="FRP内网穿透配置"></a>FRP内网穿透配置</h1><h2 id="设备环境"><a href="#设备环境" class="headerlink" title="设备环境"></a>设备环境</h2><ul><li>硬件：极路由3（HC5861，MT7620a）</li><li>固件：H大Padavan的老毛子固件</li><li>服务器：Aliyun学生服务器</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近学校换了新的网络，在每个宿舍装了个锐捷的路由器，顺便把旧的网口给关闭了。极3在接了新的网口后网络体验并不好，想着极3的保修日期已所剩无多，便申请了开发者模式刷了H大的padavan固件玩玩。</p><a id="more"></a><p><img src="images/router/RouterMain.png" alt=""></p><p>&emsp;&emsp;很多新功能有木有！！于是我就接了个外接硬盘，配置了Aria2，FTP服务和Samba服务。便愉快地玩耍了2天之后，虽然这些功能在宿舍很好用，但是离开了局域网之后就用不了了。于是我研究了一下内网穿透，发现FRP内网穿透是一种不错的方法，接下来，FRP内网穿透搞起！</p><p>&emsp;&emsp;做FRP内网穿透需要以下原材料：<strong>一台能上网的电脑，一台有FRP功能的路由器(这里使用的是刷了H大padavan的极路由3)，一个有公网ip的服务器，一个已备案的域名。</strong></p><h2 id="第一步，对域名进行设置"><a href="#第一步，对域名进行设置" class="headerlink" title="第一步，对域名进行设置"></a>第一步，对域名进行设置</h2><p>打开自己域名的管理界面，这里使用的是Dnspod：</p><p><img src="images/router/FRPdomain.png" alt=""></p><p>添加如下记录(剩下的参数全部默认即可)：</p><table><thead><tr><th style="text-align:center">主机记录</th><th style="text-align:center">记录类型</th><th style="text-align:center">记录值</th></tr></thead><tbody><tr><td style="text-align:center">www</td><td style="text-align:center">A</td><td style="text-align:center">你的IP地址</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">A</td><td style="text-align:center">你的IP地址</td></tr></tbody></table><h2 id="第二步，SSH连接服务器"><a href="#第二步，SSH连接服务器" class="headerlink" title="第二步，SSH连接服务器"></a>第二步，SSH连接服务器</h2><p>使用<strong><code>wget</code></strong>命令下载FRP的包，FRP的Release版本下载地址在这里<a href="https://github.com/fatedier/frp/releases，选择对应的版本，右键拷贝链接，粘贴到终端回车开始下载。" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases，选择对应的版本，右键拷贝链接，粘贴到终端回车开始下载。</a></p><p><img src="images/router/DownloadFRP.png" alt="">                      </p><h2 id="第三步，解压安装FRP"><a href="#第三步，解压安装FRP" class="headerlink" title="第三步，解压安装FRP"></a>第三步，解压安装FRP</h2><p>使用<strong><code>tar -zxv 文件名A</code></strong>解压文件包，然后使用<strong><code>mv 文件名A /usr/bin/frp</code></strong>将其移动到指定目录并且重命名为文件夹frp。</p><h2 id="第四步，添加FRP为开机自启服务。"><a href="#第四步，添加FRP为开机自启服务。" class="headerlink" title="第四步，添加FRP为开机自启服务。"></a>第四步，添加FRP为开机自启服务。</h2><p><strong><code>cd /etc/systemd/system</code></strong>切换目录，<strong><code>vim frps.service</code></strong>新建一个文件并添加以下内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"><span class="attribute">Description</span>=frps service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="attribute">Type</span>=simple</span><br><span class="line"><span class="attribute">ExecStart</span>=/usr/bin/frp/frps -c /usr/bin/frp/frps.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"><span class="attribute">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>添加完成后esc退出编辑模式，按shift+冒号输入wq并回车保存并退出vim。输入<strong><code>systemctl start frps</code></strong>启动frp服务，关于frp常用的系统服务项命令如下：</p><table><thead><tr><th>systemctl start frps</th><th>启动FRP服务</th></tr></thead><tbody><tr><td>systemctl restart frps</td><td>重启FRP服务</td></tr><tr><td><strong>systemctl stop frps</strong></td><td><strong>停止FRP服务</strong></td></tr><tr><td>systemctl status frps</td><td>查看FRP日志</td></tr></tbody></table><h2 id="第五步，配置FRPS文件"><a href="#第五步，配置FRPS文件" class="headerlink" title="第五步，配置FRPS文件"></a>第五步，配置FRPS文件</h2><p><strong><code>cd /usr/bin/frp</code></strong>切换到FRP根目录下，<strong><code>vim frps.ini</code></strong>编辑配置文件，具体的配置项请查阅<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">README</a>，我添加的配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">8840</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">8841</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8842</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">8843</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">8850</span></span><br><span class="line"><span class="attr">dashboard_user</span> = test</span><br><span class="line"><span class="attr">dashboard_pwd</span> = <span class="number">88888888</span></span><br><span class="line"><span class="attr">subdomain_host</span> = yourdomain.com</span><br></pre></td></tr></table></figure><p>我的配置项说明：</p><table><thead><tr><th>token</th><th>FRP客户端与FRP服务器端通信的密码</th></tr></thead><tbody><tr><td>bind_port</td><td>FRP服务器端的TCP端口</td></tr><tr><td><strong>bind_udp_port</strong></td><td><strong>FRP服务器端的UDP端口</strong></td></tr><tr><td>vhost_http_port</td><td>访问http服务的端口</td></tr><tr><td><strong>vhost_https_port</strong></td><td><strong>访问https服务的端口</strong></td></tr><tr><td>dashboard_port</td><td>访问FRP的dashboard端口</td></tr><tr><td><strong>dashboard_user</strong></td><td><strong>访问dashboard时的用户名</strong></td></tr><tr><td>dashboard_pwd</td><td>访问dashboard时的密码</td></tr><tr><td><strong>subdomain_host</strong></td><td><strong>二级路由时的主域名</strong></td></tr></tbody></table><h2 id="第六步，配置FRPC客户端"><a href="#第六步，配置FRPC客户端" class="headerlink" title="第六步，配置FRPC客户端"></a>第六步，配置FRPC客户端</h2><p>打开路由器的FRP配置页面。按照下图步骤启动FRP客户端：</p><p><img src="images/router/FRPCsetting.png" alt=""></p><p>修改客户端配置中的参数，服务端的参数无需修改，我的参数如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = 你的IP地址</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">8840</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="section">[router]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">subdomain</span> = router</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">8848</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br></pre></td></tr></table></figure><p>第一个项[common]是连接到FRP服务器的配置，按照自己在服务器端的配置来填写。</p><p>第二个项[router]是http协议的内网穿透，80端口是我的路由器管理界面端口，subdomian是二级路由地址，如果按照我的配置进行配置，配置完成后访问router.yourdomain.com:8842即可访问路由器的管理界面。</p><p>第三个项[ssh]是tcp协议的内网穿透，22端口是路由器的ssh端口，配置好后在终端输入<strong><code>ssh admin@www.yourdomain.com:8848</code></strong>即可ssh登录路由器。</p><p>应用该页面的设置，打开管理界面的log查看连接状态，若出现下图消息，则FRP内网穿透配置成功。</p><p><img src="images/router/FRPlog.png" alt=""></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>到这里FRP内网穿透的基本配置就完成了，现在在其他网络环境中也可以对路由进行管理了，下一篇博客中将会为你带来Aria2的内网穿透+Aria2WebUI的配合使用，达到远程下载的目的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FRP内网穿透配置&quot;&gt;&lt;a href=&quot;#FRP内网穿透配置&quot; class=&quot;headerlink&quot; title=&quot;FRP内网穿透配置&quot;&gt;&lt;/a&gt;FRP内网穿透配置&lt;/h1&gt;&lt;h2 id=&quot;设备环境&quot;&gt;&lt;a href=&quot;#设备环境&quot; class=&quot;headerlink&quot; title=&quot;设备环境&quot;&gt;&lt;/a&gt;设备环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;硬件：极路由3（HC5861，MT7620a）&lt;/li&gt;
&lt;li&gt;固件：H大Padavan的老毛子固件&lt;/li&gt;
&lt;li&gt;服务器：Aliyun学生服务器&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近学校换了新的网络，在每个宿舍装了个锐捷的路由器，顺便把旧的网口给关闭了。极3在接了新的网口后网络体验并不好，想着极3的保修日期已所剩无多，便申请了开发者模式刷了H大的padavan固件玩玩。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://fisher.lazybone.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://fisher.lazybone.xyz/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习第六章T5</title>
    <link href="http://fisher.lazybone.xyz/c-language-c6-054.html"/>
    <id>http://fisher.lazybone.xyz/c-language-c6-054.html</id>
    <published>2018-03-11T07:20:52.000Z</published>
    <updated>2019-10-31T13:36:42.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：编写判断字符串是否为回文的函数"><a href="#题目：编写判断字符串是否为回文的函数" class="headerlink" title="题目：编写判断字符串是否为回文的函数"></a>题目：编写判断字符串是否为回文的函数</h2><blockquote><p>例如: abccba是为回文的字符串。</p></blockquote><h3 id="主要代码："><a href="#主要代码：" class="headerlink" title="主要代码："></a>主要代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span> )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">100</span>];</span><br><span class="line">    len = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] = a[len - i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(a,b) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input string a:"</span>);</span><br><span class="line">    gets(a);</span><br><span class="line">    <span class="keyword">if</span> (judge(a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"String a is Palindrome\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"String a is not Palindrome\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h2><p><img src="images/c/c6p5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：编写判断字符串是否为回文的函数&quot;&gt;&lt;a href=&quot;#题目：编写判断字符串是否为回文的函数&quot; class=&quot;headerlink&quot; title=&quot;题目：编写判断字符串是否为回文的函数&quot;&gt;&lt;/a&gt;题目：编写判断字符串是否为回文的函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;例如: abccba是为回文的字符串。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3 id=&quot;主要代码：&quot;&gt;&lt;a href=&quot;#主要代码：&quot; class=&quot;headerlink&quot; title=&quot;主要代码：&quot;&gt;&lt;/a&gt;主要代码：&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;judge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;judge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a[])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b[&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    len = &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b[i] = a[len - i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(a,b) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;input string a:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gets(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (judge(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;String a is Palindrome\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;String a is not Palindrome\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C语言学习笔记" scheme="http://fisher.lazybone.xyz/tags/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习第六章T4</title>
    <link href="http://fisher.lazybone.xyz/c-language-c6-053.html"/>
    <id>http://fisher.lazybone.xyz/c-language-c6-053.html</id>
    <published>2018-03-05T11:52:25.000Z</published>
    <updated>2019-10-31T13:37:03.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：编写一个函数（参数用指针）将一个3×3矩阵转置。"><a href="#题目：编写一个函数（参数用指针）将一个3×3矩阵转置。" class="headerlink" title="题目：编写一个函数（参数用指针）将一个3×3矩阵转置。"></a>题目：编写一个函数（参数用指针）将一个3×3矩阵转置。</h2><blockquote><p>例如：<br> 1 2 3  ———–&gt;  7 4 1<br> 4 5 6  转置后为  8 5 2<br> 7 8 9  ———–&gt;  9 6 3</p></blockquote><h3 id="主要代码："><a href="#主要代码：" class="headerlink" title="主要代码："></a>主要代码：</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment"># define n 3</span></span><br><span class="line">void fun(int (<span class="number">*a</span>)[n], int (<span class="number">*b</span>)[n]);</span><br><span class="line"></span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">    int a[n][n],b[n][n];</span><br><span class="line">    fun(a,b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun(int (<span class="number">*a</span>)[3], int (<span class="number">*b</span>)[3])</span><br><span class="line">&#123;</span><br><span class="line">    int i,j;</span><br><span class="line">    printf(<span class="string">"input 9 numbers:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="attribute">i</span>=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="attribute">j</span>=0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(<span class="string">"%d"</span>,(a[i]+j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"start:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="attribute">i</span>=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="attribute">j</span>=0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(<span class="string">"%4d"</span>,*(a[i]+j));</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="attribute">i</span>=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="attribute">j</span>=0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(b[i]+j) = *(a[n-1-j]+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"after:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="attribute">i</span>=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="attribute">j</span>=0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(<span class="string">"%4d"</span>,*(b[i]+j));</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h2><p><img src="images/c/c6p4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：编写一个函数（参数用指针）将一个3×3矩阵转置。&quot;&gt;&lt;a href=&quot;#题目：编写一个函数（参数用指针）将一个3×3矩阵转置。&quot; class=&quot;headerlink&quot; title=&quot;题目：编写一个函数（参数用指针）将一个3×3矩阵转置。&quot;&gt;&lt;/a&gt;题目：编写一个函数（参数用指针）将一个3×3矩阵转置。&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;例如：&lt;br&gt; 1 2 3  ———–&amp;gt;  7 4 1&lt;br&gt; 4 5 6  转置后为  8 5 2&lt;br&gt; 7 8 9  ———–&amp;gt;  9 6 3&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3 id=&quot;主要代码：&quot;&gt;&lt;a href=&quot;#主要代码：&quot; class=&quot;headerlink&quot; title=&quot;主要代码：&quot;&gt;&lt;/a&gt;主要代码：&lt;/h3&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# define n 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void fun(int (&lt;span class=&quot;number&quot;&gt;*a&lt;/span&gt;)[n], int (&lt;span class=&quot;number&quot;&gt;*b&lt;/span&gt;)[n]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int a[n][n],b[n][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun(a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void fun(int (&lt;span class=&quot;number&quot;&gt;*a&lt;/span&gt;)[3], int (&lt;span class=&quot;number&quot;&gt;*b&lt;/span&gt;)[3])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printf(&lt;span class=&quot;string&quot;&gt;&quot;input 9 numbers:\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attribute&quot;&gt;i&lt;/span&gt;=0;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attribute&quot;&gt;j&lt;/span&gt;=0;j&amp;lt;n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scanf(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,(a[i]+j));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printf(&lt;span class=&quot;string&quot;&gt;&quot;start:\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attribute&quot;&gt;i&lt;/span&gt;=0;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attribute&quot;&gt;j&lt;/span&gt;=0;j&amp;lt;n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            printf(&lt;span class=&quot;string&quot;&gt;&quot;%4d&quot;&lt;/span&gt;,*(a[i]+j));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        printf(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attribute&quot;&gt;i&lt;/span&gt;=0;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attribute&quot;&gt;j&lt;/span&gt;=0;j&amp;lt;n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *(b[i]+j) = *(a[n-1-j]+i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printf(&lt;span class=&quot;string&quot;&gt;&quot;after:\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attribute&quot;&gt;i&lt;/span&gt;=0;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attribute&quot;&gt;j&lt;/span&gt;=0;j&amp;lt;n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            printf(&lt;span class=&quot;string&quot;&gt;&quot;%4d&quot;&lt;/span&gt;,*(b[i]+j));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        printf(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C语言学习笔记" scheme="http://fisher.lazybone.xyz/tags/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习第六章T3</title>
    <link href="http://fisher.lazybone.xyz/c-language-c6-052.html"/>
    <id>http://fisher.lazybone.xyz/c-language-c6-052.html</id>
    <published>2018-03-04T12:33:20.000Z</published>
    <updated>2019-10-31T13:37:16.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：编写一个求字符串长度的函数（参数用指针）。"><a href="#题目：编写一个求字符串长度的函数（参数用指针）。" class="headerlink" title="题目：编写一个求字符串长度的函数（参数用指针）。"></a>题目：编写一个求字符串长度的函数（参数用指针）。</h2><blockquote><p>在主函数中输入字符串，并输出其长度。</p></blockquote><h3 id="主要代码："><a href="#主要代码：" class="headerlink" title="主要代码："></a>主要代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">len</span> <span class="params">(<span class="keyword">int</span> * , <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,*p;</span><br><span class="line">    <span class="keyword">char</span> a,*q;</span><br><span class="line">    p = &amp;sum;</span><br><span class="line">    q = &amp;a;</span><br><span class="line">    <span class="keyword">while</span> (*q=getchar() != <span class="string">'\n'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len(p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"lenth:%d\n"</span>,*p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">len</span> <span class="params">(<span class="keyword">int</span> *p, <span class="keyword">char</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *p = <span class="keyword">sizeof</span>(*q) + *p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h2><p><img src="images/c/c6p3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：编写一个求字符串长度的函数（参数用指针）。&quot;&gt;&lt;a href=&quot;#题目：编写一个求字符串长度的函数（参数用指针）。&quot; class=&quot;headerlink&quot; title=&quot;题目：编写一个求字符串长度的函数（参数用指针）。&quot;&gt;&lt;/a&gt;题目：编写一个求字符串长度的函数（参数用指针）。&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在主函数中输入字符串，并输出其长度。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3 id=&quot;主要代码：&quot;&gt;&lt;a href=&quot;#主要代码：&quot; class=&quot;headerlink&quot; title=&quot;主要代码：&quot;&gt;&lt;/a&gt;主要代码：&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; * , &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,*p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a,*q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = &amp;amp;sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    q = &amp;amp;a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (*q=getchar() != &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        len(p,q);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;lenth:%d\n&quot;&lt;/span&gt;,*p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *q)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *p = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(*q) + *p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C语言学习笔记" scheme="http://fisher.lazybone.xyz/tags/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习第六章T2</title>
    <link href="http://fisher.lazybone.xyz/c-language-c6-051.html"/>
    <id>http://fisher.lazybone.xyz/c-language-c6-051.html</id>
    <published>2018-03-02T13:25:32.000Z</published>
    <updated>2019-10-31T13:37:55.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：输入10个整数，用其中最小的数与第一个数对换，用其中最大的数与最后一个对换。"><a href="#题目：输入10个整数，用其中最小的数与第一个数对换，用其中最大的数与最后一个对换。" class="headerlink" title="题目：输入10个整数，用其中最小的数与第一个数对换，用其中最大的数与最后一个对换。"></a>题目：输入10个整数，用其中最小的数与第一个数对换，用其中最大的数与最后一个对换。</h2><blockquote><p>需要写出指定的三个函数完成，所有函数的参数均用指针。</p></blockquote><h3 id="主要代码："><a href="#主要代码：" class="headerlink" title="主要代码："></a>主要代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmax</span> <span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmin</span> <span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],i,*p=a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input 10 number:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,p+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"start:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%4d"</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    cmax (p);</span><br><span class="line">    cmin (p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nafter sort:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%4d"</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmax</span> <span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max=*p,t,j,k;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(p+j)&gt;max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = *(p+j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t = *(p+<span class="number">9</span>);</span><br><span class="line">    *(p+<span class="number">9</span>) = max;</span><br><span class="line">    *(p+k) = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmin</span> <span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min=*p,t,j,k;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(p+j)&lt;min)</span><br><span class="line">        &#123;</span><br><span class="line">            min = *(p+j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t = *p;</span><br><span class="line">    *p = min;</span><br><span class="line">    *(p+k) = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h2><p><img src="images/c/c6p2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：输入10个整数，用其中最小的数与第一个数对换，用其中最大的数与最后一个对换。&quot;&gt;&lt;a href=&quot;#题目：输入10个整数，用其中最小的数与第一个数对换，用其中最大的数与最后一个对换。&quot; class=&quot;headerlink&quot; title=&quot;题目：输入10个整数，用其中最小的数与第一个数对换，用其中最大的数与最后一个对换。&quot;&gt;&lt;/a&gt;题目：输入10个整数，用其中最小的数与第一个数对换，用其中最大的数与最后一个对换。&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;需要写出指定的三个函数完成，所有函数的参数均用指针。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3 id=&quot;主要代码：&quot;&gt;&lt;a href=&quot;#主要代码：&quot; class=&quot;headerlink&quot; title=&quot;主要代码：&quot;&gt;&lt;/a&gt;主要代码：&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cmax&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cmin&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;],i,*p=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;input 10 number:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,p+i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;start:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%4d&quot;&lt;/span&gt;,*(p+i));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cmax (p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cmin (p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\nafter sort:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%4d&quot;&lt;/span&gt;,*(p+i));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cmax&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; max=*p,t,j,k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*(p+j)&amp;gt;max)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            max = *(p+j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = *(p+&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *(p+&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;) = max;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *(p+k) = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cmin&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; min=*p,t,j,k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*(p+j)&amp;lt;min)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            min = *(p+j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = *p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *p = min;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *(p+k) = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C语言学习笔记" scheme="http://fisher.lazybone.xyz/tags/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习第六章T1</title>
    <link href="http://fisher.lazybone.xyz/c-language-c6-045.html"/>
    <id>http://fisher.lazybone.xyz/c-language-c6-045.html</id>
    <published>2018-02-28T07:46:28.000Z</published>
    <updated>2019-10-31T13:38:25.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：编写程序求取一元二次方程的根。"><a href="#题目：编写程序求取一元二次方程的根。" class="headerlink" title="题目：编写程序求取一元二次方程的根。"></a>题目：编写程序求取一元二次方程的根。</h2><h3 id="主要代码："><a href="#主要代码：" class="headerlink" title="主要代码："></a>主要代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">function1</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">function2</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">double</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">jdelta</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a,b,c,delta;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"一元二次方程计算器:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input a:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input b:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input c:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;c);</span><br><span class="line">    <span class="keyword">if</span> ( judge(a) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        delta = jdelta(a,b,c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dleta=%f\n"</span>,delta);</span><br><span class="line">        <span class="keyword">if</span> (delta&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"方程有两个不等实根："</span>);</span><br><span class="line">            function1(a,b,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (delta==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"方程有两个相等实根："</span>);</span><br><span class="line">            function1(a,b,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"方程有两个复数根："</span>);</span><br><span class="line">            function2(a,b,c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">function1</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x1,x2,delta;</span><br><span class="line">    delta = b*b - <span class="number">4</span>*a*c;</span><br><span class="line">    x1 = (-b + <span class="built_in">sqrt</span>(delta))/(<span class="number">2</span>*a);</span><br><span class="line">    x2 = (-b - <span class="built_in">sqrt</span>(delta))/(<span class="number">2</span>*a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x1=%.2lf,"</span>,x1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x2=%.2lf\n"</span>,x2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">function2</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x1,x2,delta;</span><br><span class="line">    delta = -(b*b - <span class="number">4</span>*a*c);</span><br><span class="line">    x1 = -(b/(<span class="number">2</span>*a))+<span class="built_in">sqrt</span>(delta)/(<span class="number">2</span>*a);</span><br><span class="line">    x2 = -(b/(<span class="number">2</span>*a))-<span class="built_in">sqrt</span>(delta)/(<span class="number">2</span>*a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x1=%.2lfi,"</span>,x1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x2=%.2lfi\n"</span>,x2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span> <span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">jdelta</span> <span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> delta;</span><br><span class="line">    delta = b*b - <span class="number">4</span>*a*c;</span><br><span class="line">    <span class="keyword">return</span> delta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h2><p><img src="images/c/c6p1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：编写程序求取一元二次方程的根。&quot;&gt;&lt;a href=&quot;#题目：编写程序求取一元二次方程的根。&quot; class=&quot;headerlink&quot; title=&quot;题目：编写程序求取一元二次方程的根。&quot;&gt;&lt;/a&gt;题目：编写程序求取一元二次方程的根。&lt;/h2&gt;&lt;h3 id=&quot;主要代码：&quot;&gt;&lt;a href=&quot;#主要代码：&quot; class=&quot;headerlink&quot; title=&quot;主要代码：&quot;&gt;&lt;/a&gt;主要代码：&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; b,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; b,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;judge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;jdelta&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; b,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a,b,c,delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;一元二次方程计算器:\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;input a:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%lf&quot;&lt;/span&gt;,&amp;amp;a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;input b:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%lf&quot;&lt;/span&gt;,&amp;amp;b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;input c:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%lf&quot;&lt;/span&gt;,&amp;amp;c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( judge(a) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;error!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        delta = jdelta(a,b,c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;dleta=%f\n&quot;&lt;/span&gt;,delta);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (delta&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;方程有两个不等实根：&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            function1(a,b,c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (delta==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;方程有两个相等实根：&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            function1(a,b,c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;方程有两个复数根：&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            function2(a,b,c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; b,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; x1,x2,delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delta = b*b - &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;*a*c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x1 = (-b + &lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(delta))/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x2 = (-b - &lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(delta))/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;x1=%.2lf,&quot;&lt;/span&gt;,x1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;x2=%.2lf\n&quot;&lt;/span&gt;,x2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; b,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; x1,x2,delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delta = -(b*b - &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;*a*c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x1 = -(b/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*a))+&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(delta)/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x2 = -(b/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*a))-&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(delta)/(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;x1=%.2lfi,&quot;&lt;/span&gt;,x1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;x2=%.2lfi\n&quot;&lt;/span&gt;,x2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;judge&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (a==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;jdelta&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; b,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delta = b*b - &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;*a*c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C语言学习笔记" scheme="http://fisher.lazybone.xyz/tags/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
