<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fisher&#39;s Blog</title>
  
  <subtitle>大都会に僕はもう一人で  投げ捨てられた空きカンのようだ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fisher.lazybone.xyz/"/>
  <updated>2019-12-09T14:26:53.856Z</updated>
  <id>http://fisher.lazybone.xyz/</id>
  
  <author>
    <name>Fisher</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统习题一</title>
    <link href="http://fisher.lazybone.xyz/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%A0%E9%A2%98%E4%B8%80.html"/>
    <id>http://fisher.lazybone.xyz/操作系统习题一.html</id>
    <published>2019-12-09T13:43:39.000Z</published>
    <updated>2019-12-09T14:26:53.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>一、设计现代OS的主要目标是什么？<br>  现代OS的主要目标有4个：方便性、有效性、可扩充性、开放性<br>  方便性：系统将用户采用高级语言编写的程序翻译成机器码，或直接通过OS所提供的各种命令操纵计算机系统，方便了用户，使计算机变得易学易用<br>  有效性：提高了系统资源的利用率，提高系统的吞吐量，缩短程序运行周期<br>  可扩充性：能够方便地添加新功能和模块，以及对原有的功能和模块进行修改<br>  开放性：能够遵循国际标准开发硬件和软件，都能彼此兼容，方便地实现互联</p><a id="more"></a><p>二、为什么说操作系统实现了对计算机资源的抽象？<br>  操作系统在裸机上覆盖了一层设备管理软件，隐藏了物理接口的实现细节。用户无需关心或了解某些功能具体是如何实现的，但也能够很好地利用计算机的资源，操作系统在这里就是实现了对计算机资源的抽象</p><p>三、OS有哪几大特征，其最基本的特征是什么？<br>  OS有并发、共享、虚拟、异步，这4大特征<br>  并发：指两个或多个事件在同一时间间隔内发生，在微观上就是多个程序交替执行<br>  共享：系统中的资源可供内存中多个并发执行的进程共同使用<br>  虚拟：通过某种技术将一个物理实体变为若干个逻辑上的对应物<br>  异步：异步使得处理器不需要等待进程IO，继续执行下一个程序，在程序IO中断完成后通过回调函数继续执行</p><p>四、是什么原因使操作系统具有异步性特征？<br>  为了提高CPU资源的利用率，在程序IO阻塞的过程中，如果没有异步执行的概念，CPU将会一直等待进程IO完成，这浪费了大量的CPU资源</p><p>五、处理机管理有哪些主要功能？其主要任务是什么？<br>  进程控制：为作业创建进程、撤销已结束的进程，控制进程在运行过程中的转换<br>  进程同步：保证多个进程运行时的协调，确保系统资源的合理分配<br>  进程通信：实现相互合作的进程之间的信息互换<br>  调度：包括作业调度和进程调度。作业调度的基本任务是从后背队列中按照一定的算法选择出若干个作业，为他们分配运行时所需的资源。进程调度的任务是从进程的就绪队列中按照一定的算法选出一个进程，将处理机分配给该进程</p><p>六、内存管理有哪些主要功能？其主要任务是什么？<br>  内存分配：为每道程序动态或静态地分配内存空间，提高储存器的利用率<br>  内存保护：确保每道程序仅在自己的内存空间内运行，互不干扰。不允许用户程序访问操作系统的程序和数据，也不允许用户程序转移到非共享的其他用户程序中去执行<br>  地址映射：将地址空间中的逻辑地址转换为内存空间中与之对应的物理地址<br>  内存扩充：借助虚拟储存技术，从逻辑上扩大内存，其中包括了请求掉入功能和置换功能</p><p>七、设备管理有哪些主要功能？其主要任务是什么？<br>  缓冲管理：在IO设备和CPU之间引入缓冲，缓解了CPU和IO设备速度不匹配的矛盾<br>  设备分配：根据用户的请求、系统现有资源情况以及按照某种预设分配策略，为之分配所需的设备<br>  设备处理：实现CPU和设备控制器之间的通信，又称为驱动程序</p><p>八、文件管理有哪些主要功能？其主要任务是什么？<br>  文件储存空间的管理：对文件以及文件的储存空间进行统一的管理<br>  目录管理：为每个文件建立一个目录项，提高检索文件的速度<br>  文件的读/写保护：防止系统中的文件被非法盗取和破坏，对读/写中的文件提供保护</p><p>九、什么是微内核OS？<br>  微内核OS是将系统服务的实现与系统的基本操作规则区分开来，让服务之间互相独立，减少了系统的耦合度，系统也可以根据功能的需要添加或更换模块使系统功能更具有弹性</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><p>一、为什么程序并发执行会产生间断性特征？<br>  程序在并发执行时，由于他们共享系统资源，以及为完成同一项任务而相互合作，致使在这些并发执行的程序之间形成了相互制约的关系。这种相互制约的关系导致并发程序具有“执行——暂停——执行”这种间断性规律</p><p>二、程序并发执行时为什么会失去封闭性和可再现性？<br>  系统中的资源被多个程序共享使用时，其中任一程序改变资源的状态时，其他程序也会受到影响，因此而失去了封闭性。程序失去封闭性后，并发执行的过程中会发生许多意想不到的状态值修改，也就是失去了可再现性</p><p>三、PCB提供了进程管理和进程调度所需要的哪些信息？<br>  进程管理：通用寄存器、指令计数器、程序状态字、用户栈指针<br>  进程调度：进程状态、进程优先级、事件、其他信息</p><p>四、进程控制块的组织方式有哪几种？<br>  线性方式、链接方式、索引方式</p><p>五、何谓操作系统的内核？内核的主要功能是什么？<br>  操作系统内核是一些与硬件紧密相关的模块（中断处理程序）、各种常用设备的驱动程序以及运行频率较高的模块（时钟管理、进程调度和许多公用模块），它们都常驻内存，主要提供以下功能：<br>  支撑功能：中断处理、时钟管理、原语操作<br>  资源管理功能：进程管理、储存器管理、设备管理</p><p>六、试说明进程在三个基本状态之间转换的典型原因。<br>  就绪 -&gt; 执行：进程获得分配的CPU时间片，开始执行<br>  执行 -&gt; 阻塞：执行中的进程发生IO中断，因而无法继续执行，此时进程又执行状态变为阻塞状态<br>  阻塞 -&gt; 就绪：进程IO完成，但还未分配到CPU时间片，因此转为就绪状态</p><p>七、试从调度性、并发性、拥有资源及系统开销方面对进程和线程进行比较。<br>  调度性：进程的调度包括了上下文的切换，开销较大。而线程的调度仅需保存和设置少量寄存器内容，切换的代价小于进程。在同一进程中的线程切换不会引起上下文的切换，但不同进程中的线程切换会引起上下文的切换<br>  并发性：同一进程不能并发，而同一进程中的不同线程可以并发。不同进程之间可以并发，不同进程的不同线程可以并发<br>  拥有资源：进程可以拥有资源，而线程本身不拥有系统资源，仅有保证独立运行的资源。线程的资源可以共享该进程拥有的资源<br>  系统开销：线程的创建、切换和撤销的花销都比进程要小得多</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><p>一、高级调度与低级调度的主要任务是什么？为什么要引入中级调度？<br>  高级调度：调度对象是作业，根据某种算法，决定将外存上处于后备队列中的哪几个作业调入内存，为他们创建进程、分配必要的资源，并将他们放入就绪队列<br>  低级调度：调度对象是进程，根据某种算法，决定就绪队列中的哪个进程应获得处理机，并由分派程序将处理机分配给被选中的进程<br>  引入中级调度的目的：提高内存的利用率和系统的吞吐量。将暂时不能运行的进程调至外存等待，当具备运行条件时重新调入内存</p><p>二、处理机调度算法的共同目标是什么？批处理系统的调度目标又是什么？</p><p>  处理机调度算法的共同目标：</p><ul><li>提高系统资源利用率</li><li>提高公平性，使进程都获得合理CPU时间</li><li>保持系统资源使用的平衡</li><li><p>制订的策略强制执行</p><p>批处理系统的调度目标：</p></li><li>缩短平均周转时间</li><li>提高系统的吞吐量</li><li>提高处理机利用率</li></ul><p>三、在作业调度中应如何确定接纳多少个作业和接纳哪些作业？<br>  接纳作业的数量根据系统规模、运行速度、作业大小、以及能否获得较好的系统性能等情况作出适当的抉择<br>  接纳哪些作业根据不同的调度算法来判断，最简单的是先来先服务调度算法，较常用的是短作业优先调度算法和基于作业优先级的调度算法</p><p>四、试说明低级调度的主要功能。<br>  根据某种算法，决定就绪队列中的哪个进程应获得处理机，并由分派程序将处理机分配给被选中的进程</p><p>五、在选择调度方式和调度算法时，应遵循的准则是什么？<br>  应尽量保证公平，每个进程分得的CPU时间片应尽量平衡。保持系统资源使用的平衡性</p><p>六、试比较FCFS和SJF两种进程调度算法。<br>  先来先服务（FCFS）算法：每次从就绪队列中选择一个最先进入该队列的进程，为之分配处理机，使之投入运行，该进程一直运行到完成或发生某时间而阻塞后，进程调度程序才将处理机分配给其他进程<br>  短作业优先（SJF）算法：按照作业的长短来计算优先级，作业越短，优先级越高<br>  与FCFS比，SJF需要预知作业的运行时间，而且对长作业非常不利，两种算法都不能实现人机交互，SJF没有考虑作业的紧迫程度，不能保证紧迫性作业能够得到及时的处理</p><p>七、在时间片轮转法中，应如何确定时间片的大小？<br>  一个较为可取的时间片大小是略大于一次典型的交互所需要的时间，时间片过长会导致算法退化为FCFS，过短会增加系统执行进程调度的开销</p><p>八、为什么说多级反馈队列调度算法能较好地满足各个方面用户的需要？<br>  多级反馈队列调度算法不必事先知道各种进程所需的执行时间，不同类型的进程放在不同优先级的就绪队列中，每个队列采用FCFS算法，这种算法能够较好地满足各种类型进程的需要，因此能够很好地满足各个方面用户的需要</p><p>九、什么是最低松弛度优先调度算法？举例说明之。<br>  根据任务的紧急程度确定任务的优先级，紧急程度越高，该任务的优先级就越高<br>  例如：若一个任务A在200ms时必须完成，它本身运行所需的时间是100ms，因此调度程序必须在100ms之前调度执行，该任务的紧急程度为100ms。而另一个任务B在400ms时必须完成，它本身运行所需的时间是150ms，则松弛程度为250ms。根据算法可知，最低松弛度的任务是A，接下来应该执行A任务</p><p>十、何谓“优先级倒置”现象，可采取什么方法来解决？<br>  优先级倒置：低优先级的任务占有了高优先级任务的资源，导致高优先级任务阻塞，可采取优先级继承的方法解决</p><p>十一、试分别说明可重用资源和可消耗资源的性质。<br>  可重用资源：可供用户重复使用多次的资源，每一个可重用的资源只能分配给一个进程使用。进程在使用可重用资源时，必须参照：请求资源、使用资源、解放资源的顺序使用。系统中的可重用资源数量相对是固定的<br>  可消耗资源：又称临时性资源，是在进程运行期间不断变化的。进程在运行期间可以不断创造可消耗性资源的单元，在进程结束后可消耗资源也跟着消失</p><p>十二、试举例说明竞争不可抢占资源引起的死锁。<br>  假设A进程运行需要1号和2号资源，目前1号资源已经申请成功，由A进程占用。而B进程的运行也需要1号和2号资源，且B进程已经申请占用了2号资源。两个进程都在等待对方释放资源，从而引起了进程的死锁</p><p>十三、为了破坏“请求和保持”条件而提出了两种协议，试比较这两种协议。<br>  第一种协议：进程在运行之前必须一次性申请在整个运行过程中所需的全部资源。其优点是简单、易行且安全，但资源被严重浪费，并且进程会经常发生饥饿现象<br>  第二种协议：是第一种协议的改进，它允许一个进程只获得运行初期所需的资源后，便开始运行，运行过程中再逐步释放已分配给自己的、且已用毕的全部资源，然后再请求新的所需资源。第二种协议不仅能使进程更快地完成任务，提高设备的利用率，还可以减少进程发生饥饿的概率</p><p>十四、何谓死锁？产生死锁的原因和必要条件是什么？<br>  如果一组进程中的每一个进程都在等待仅由该组进程中的其他进程才能引发的事件，那么该组进程是死锁的<br>  产生死锁的原因有：竞争不可抢占性资源引起死锁，竞争可消耗资源引起死锁<br>  产生死锁的必要条件：互斥条件-&gt;进程对所分配到的资源进行排他性使用；请求和保持条件-&gt;进程已经保持了至少一个资源，但又提出了新的资源请求；不可抢占条件-&gt;进程已获得的资源在未使用完之前不能被抢占；循环等待条件-&gt;在发生死锁时，必然存在一个进程——资源的循环链</p><p>十五、在解决死锁问题的几个方法中，哪种方法最易于实现？哪种方法使资源利用率最高？<br>  解决死锁问题有预防和解除2种思路。预防死锁有：破坏“请求和保持”条件，破坏“循环等待”条件，保持系统处于安全状态，银行家算法等方法。解除死锁有：终止进程，抢占资源等方法<br>  这几种方法中，破坏死锁产生的条件最容易实现，银行家算法和保持系统处于安全状态的资源利用率最高</p><p>十六、请详细说明可通过哪些途径预防死锁。<br>  破坏“请求和保持”条件：进程逐步申请、释放资源<br>  破坏“循环等待”条件：进程占有的资源可以被抢占<br>  保持系统处于安全状态：在分配资源之前计算资源分配的安全性<br>  银行家算法：在分配资源之前计算剩余资源的可用情况</p><p>十七、在银行家算法的例子中，如果P0发出的请求向量由Request(0,2,0)改为Request(0,1,0)，问系统可否将资源分配给它？<br>  假设资源分配给了P0，则剩余情况如下：Avalibale(2, 2, 0)。可以找到一个安全序列：{P1, P3, P2, P0, P4}，因此系统能将资源分配给他</p><p>十八、在银行家算法中，若出现下述资源分配情况，试问：</p><table><thead><tr><th>Process</th><th>Allocation</th><th>Need</th><th>Available</th></tr></thead><tbody><tr><td>P0</td><td>0 0 3 2</td><td>0 0 1 2</td><td>1 6 2 2</td></tr><tr><td>P1</td><td>1 0 0 0</td><td>1 7 5 0</td><td></td></tr><tr><td>P2</td><td>1 3 5 4</td><td>2 3 5 6</td><td></td></tr><tr><td>P3</td><td>0 3 3 2</td><td>0 6 5 2</td><td></td></tr><tr><td>P4</td><td>0 0 1 4</td><td>0 6 5 6</td></tr></tbody></table><p>（1）该状态是否安全？<br>​ 可以找到一个安全序列：{P0, P3, P1, P2, P4}，因此该状态是安全的<br>（2）若进程P2提出请求Request(1,2,2,2)后，系统能否将资源分配给它？<br>​ 因为Need(2,3,5,6)&lt;Request(1,2,2,2)且Request(1,2,2,2)&lt;Avaliable(1,6,2,2)。暂且认为可以分配之后，可用资源为Avaliable(0,4,0,0)，无法找到一个安全序列，因此系统不能将资源分配给它</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h1&gt;&lt;p&gt;一、设计现代OS的主要目标是什么？&lt;br&gt;  现代OS的主要目标有4个：方便性、有效性、可扩充性、开放性&lt;br&gt;  方便性：系统将用户采用高级语言编写的程序翻译成机器码，或直接通过OS所提供的各种命令操纵计算机系统，方便了用户，使计算机变得易学易用&lt;br&gt;  有效性：提高了系统资源的利用率，提高系统的吞吐量，缩短程序运行周期&lt;br&gt;  可扩充性：能够方便地添加新功能和模块，以及对原有的功能和模块进行修改&lt;br&gt;  开放性：能够遵循国际标准开发硬件和软件，都能彼此兼容，方便地实现互联&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://fisher.lazybone.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="学习总结" scheme="http://fisher.lazybone.xyz/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验四：带优先级的时间片轮换的进程调度算法的实现</title>
    <link href="http://fisher.lazybone.xyz/%E5%B8%A6%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E6%8D%A2%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95.html"/>
    <id>http://fisher.lazybone.xyz/带优先级的时间片轮换的进程调度算法.html</id>
    <published>2019-12-04T11:21:55.000Z</published>
    <updated>2019-12-05T11:53:16.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>操作系统系列博客的所有实验源自于课程<code>&quot;操作系统原理与实践检验&quot;</code>，代码是参考老师给的<code>&quot;软件工程专业操作系统实验指导书&quot;</code>文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法</p><a id="more"></a><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ol><li>掌握进程状态转换过程</li><li>掌握时间片轮转的进程调度算法</li><li>掌握带优先级的进程调度算法</li></ol><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><ol><li>自定义PCB的数据结构</li><li>使用带优先级的时间片轮转调度算法进行进程调度，每运行一个时间片，进程优先级减半</li><li>需要完成的命令集：<ul><li><code>create</code>：随机创建进程，进程的优先级与所需要的时间片随机决定</li><li><code>round</code>：执行一次时间片轮转操作，其方法为运行高优先级队列的第一个，再降低其优先级，插入到相应的队列中</li><li><code>ps</code>：查看当前进程状态</li><li><code>sleep</code>：将一个就绪的进程挂起</li><li><code>awake</code>：唤醒一个被挂起的进程</li><li><code>kill</code>：杀死一个进程</li><li><code>help</code>：系统帮助</li><li><code>quit</code>：退出系统</li></ul></li></ol><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><p>本次实验结合了进程的状态转换、优先级调度、时间片轮转调度，这三个方面的内容。根据进程状态转换图，设置<code>sleep</code>命令，将一个进程挂起；<code>awake</code>命令唤醒一个被挂起的进程（从阻塞状态到就绪状态）</p><ul><li><p>优先级</p><p>优先级体现了进程的重要程度或紧迫程度，在大多数现代操作系统中，都采用了优先级调度策略。优先级从小到大（如0-127）逐渐降低，0的优先级最高，127的优先级最低。在本次实验中，进程的优先级分为3个等级（0-2），数值越大，优先级越高</p></li><li><p>基于时间片调度</p><p>将所有的就绪进程按照先来先服务的原则，排成一个队列，每次调度时，将CPU分配给队首进程，并令其执行一个时间片。当时间片用完时，由一个计时器发出时钟中断请求，调度程序把此进程终止，然后把该进程放到队尾</p><p>在本次实验中，时间片以大约1000ms为单位（实际上要小得多），使用双重for循环实现。在调度过程中，需要通过时间函数检测进程的执行时间，当该进程执行时间&gt;=时间片大小时进行调度</p></li><li><p>高优先级调度</p><p>优先级高的进程先得到CPU，等该进程执行完毕后，另外的进程才能执行</p></li><li><p>基于时间片的高优先级调度</p><p>在调度算法中，只有处于就绪状态的进程才能被调度，调度算法结合了优先级调度和时间片轮转调度算法，约定：从最高优先级队列取第一个就绪状态的进程进行调度，时间片到后降低其优先级（降低一半），然后插入到底优先级队列的尾部，每次调度后，显示进程的状态</p></li></ul><h1 id="代码汇总"><a href="#代码汇总" class="headerlink" title="代码汇总"></a>代码汇总</h1><p>由于实验的代码比较长，这里采用分块的方法来进行代码汇总</p><h2 id="定义系统常量，数据结构，初始化函数"><a href="#定义系统常量，数据结构，初始化函数" class="headerlink" title="定义系统常量，数据结构，初始化函数"></a>定义系统常量，数据结构，初始化函数</h2><p>需要的系统常量有：系统最大进程数、最高优先级、时间片大小、命令列表</p><p>定义的数据结构：进程控制块PCB、<code>priority_array</code>优先级数组+链表，数组用于记录不同的优先级链表中的第一个进程，其余同优先级进程使用链表进行储存、<code>id_list</code>，记录进程的创建状况</p><p><code>init</code>函数：初始化优先级链表，将其置为NULL。初始化命令列表，一共有8条命令</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义进程数</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> PROCESS_NUMBER 10</span></span><br><span class="line"><span class="comment">// 定义最高优先级（0-2）</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAX_PRIORITY 3</span></span><br><span class="line"><span class="comment">// 定义时间片</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QUANTUM 2</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">// 进程ID</span></span><br><span class="line">    <span class="keyword">int</span> status;<span class="comment">// 进程状态：0-就绪，1-运行，2-阻塞</span></span><br><span class="line">    <span class="keyword">int</span> prio;<span class="comment">// 进程优先级</span></span><br><span class="line">    <span class="keyword">int</span> life;<span class="comment">// 剩余生命周期</span></span><br><span class="line">    pcb *next;<span class="comment">// 优先级链表指针</span></span><br><span class="line">&#125; *priority_array[MAX_PRIORITY];<span class="comment">// 优先级数组+链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> id_list[PROCESS_NUMBER];<span class="comment">// 进程ID列表，记录进程创建状态</span></span><br><span class="line"><span class="keyword">int</span> life = <span class="number">0</span>;<span class="comment">// 系统剩余总生命周期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> command[<span class="number">8</span>][<span class="number">10</span>];<span class="comment">// 命令列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统初始化</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_PRIORITY; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        priority_array[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(command[<span class="number">0</span>], <span class="string">"quit"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(command[<span class="number">1</span>], <span class="string">"help"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(command[<span class="number">2</span>], <span class="string">"ps"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(command[<span class="number">3</span>], <span class="string">"create"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(command[<span class="number">4</span>], <span class="string">"kill"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(command[<span class="number">5</span>], <span class="string">"runtime"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(command[<span class="number">6</span>], <span class="string">"sleep"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(command[<span class="number">7</span>], <span class="string">"awake"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出当前系统状态信息"><a href="#输出当前系统状态信息" class="headerlink" title="输出当前系统状态信息"></a>输出当前系统状态信息</h2><p><code>ps</code>函数：使用优先级数组+链表的数据结构，可以很容易按照优先级进行遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出系统当前进程状态</span></span><br><span class="line"><span class="comment"> * p: 遍历指针</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ps</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n=================================================\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Total system life: %d\n"</span>, life);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_PRIORITY; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Priority level: %d\n"</span>, i);</span><br><span class="line">        p = priority_array[i];</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"id: %d, status: %d, priority: %d, life: %d\n"</span>, p-&gt;id, p-&gt;status, p-&gt;prio, p-&gt;life);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"=================================================\n\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建新进程"><a href="#创建新进程" class="headerlink" title="创建新进程"></a>创建新进程</h2><p><code>create</code>函数：按照顺序分配一个进程ID，随机分配进程优先级和进程生命周期，然后插入到相应的优先级链表中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机创建一个新进程</span></span><br><span class="line"><span class="comment"> * i：进程ID</span></span><br><span class="line"><span class="comment"> * prio：进程优先级</span></span><br><span class="line"><span class="comment"> * plife：进程生命周期</span></span><br><span class="line"><span class="comment"> * p：指向同等优先级链表表头，遍历中发生变化</span></span><br><span class="line"><span class="comment"> * p_previous：指向p的上一个节点，用于尾插法</span></span><br><span class="line"><span class="comment"> * s：指向新创建的进程</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, prio = <span class="number">0</span>, plife = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span> *<span class="title">p</span> = <span class="title">NULL</span>, *<span class="title">p_previous</span> = <span class="title">NULL</span>, *<span class="title">s</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="comment">// 检查是否到达进程数量上限，同时分配进程ID</span></span><br><span class="line">    <span class="keyword">while</span> (id_list[i] != <span class="number">0</span> &amp;&amp; i &lt;= PROCESS_NUMBER - <span class="number">1</span>)</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> (PROCESS_NUMBER == i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"System max process error!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建新进程的参数，增加总生命周期</span></span><br><span class="line">    id_list[i] = <span class="number">1</span>;</span><br><span class="line">    prio = rand()%MAX_PRIORITY;</span><br><span class="line">    plife = rand()%<span class="number">20</span> + <span class="number">1</span>;</span><br><span class="line">    life += plife;</span><br><span class="line">    <span class="comment">// 创建新进程</span></span><br><span class="line">    s = <span class="keyword">new</span> pcb;</span><br><span class="line">    s-&gt;id = i;</span><br><span class="line">    s-&gt;status = <span class="number">0</span>;</span><br><span class="line">    s-&gt;prio = prio;</span><br><span class="line">    s-&gt;life = plife;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 插入到进程优先级链表中</span></span><br><span class="line">    p = priority_array[prio];</span><br><span class="line">    <span class="comment">// 如果表头为NULL，新进程为表头</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        priority_array[prio] = s;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">// 表头不为空，使用尾插法插入到链表尾部</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p_previous = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p_previous-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入完成，输出当前进程状态</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Successfully create process(id: %d), current system status: \n"</span>, i);</span><br><span class="line">    ps();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阻塞-唤醒线程"><a href="#阻塞-唤醒线程" class="headerlink" title="阻塞/唤醒线程"></a>阻塞/唤醒线程</h2><p><code>sleep/awake</code>函数：这两个函数的操作基本一样，都是找到进程后修改进程的状态码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阻塞某个进程</span></span><br><span class="line"><span class="comment"> * i：进程x的优先级索引</span></span><br><span class="line"><span class="comment"> * find：进程x找到的标记</span></span><br><span class="line"><span class="comment"> * p：指向进程x</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, find = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span> *<span class="title">p</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="comment">// 搜索ID为x的进程</span></span><br><span class="line">    <span class="keyword">while</span> (!find &amp;&amp; i!=MAX_PRIORITY)</span><br><span class="line">    &#123;</span><br><span class="line">        p = priority_array[i];</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;id == x)</span><br><span class="line">            &#123;</span><br><span class="line">                find = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!find)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未找到进程x，操作终止</span></span><br><span class="line">    <span class="keyword">if</span> (!find)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Sleep: Invaild process number!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将进程x的状态设为阻塞</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;status == <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The process(id: %d) has been blocked, cannot sleep again!\n"</span>, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        p-&gt;status = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 操作结束后系统进程状态</span></span><br><span class="line">    ps();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 唤醒某个进程</span></span><br><span class="line"><span class="comment"> * i：进程x的优先级索引</span></span><br><span class="line"><span class="comment"> * find：进程x找到的标记</span></span><br><span class="line"><span class="comment"> * p：指向进程x</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">awake</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, find = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span> *<span class="title">p</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="comment">// 搜索ID为x的进程</span></span><br><span class="line">    <span class="keyword">while</span> (!find &amp;&amp; i!=MAX_PRIORITY)</span><br><span class="line">    &#123;</span><br><span class="line">        p = priority_array[i];</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;id == x)</span><br><span class="line">            &#123;</span><br><span class="line">                find = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!find)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未找到进程x，操作终止</span></span><br><span class="line">    <span class="keyword">if</span> (!find)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Awake: Invaild process number!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将进程x的状态设为就绪</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;status != <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The process(id: %d) has been awaked, cannot awaked again!\n"</span>, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        p-&gt;status = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 操作结束后系统进程状态</span></span><br><span class="line">    ps();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h2><p><code>kill</code>函数：首先找到进程的位置，将其从优先级链表上摘下来后删除，同时<code>id_list</code>相应位置置为0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 杀死某个进程</span></span><br><span class="line"><span class="comment"> * i：进程x的优先级索引</span></span><br><span class="line"><span class="comment"> * find：进程x找到的标记</span></span><br><span class="line"><span class="comment"> * p：指向进程x</span></span><br><span class="line"><span class="comment"> * p_previous：指向进程x在优先级链表上的前一个节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kill</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, find = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span> *<span class="title">p</span> = <span class="title">NULL</span>, *<span class="title">p_previous</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="comment">// 搜索ID为x的进程</span></span><br><span class="line">    <span class="keyword">while</span> (!find &amp;&amp; i!=MAX_PRIORITY)</span><br><span class="line">    &#123;</span><br><span class="line">        p = priority_array[i];</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;id == x)</span><br><span class="line">            &#123;</span><br><span class="line">                find = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p_previous = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!find)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未找到进程x，操作终止</span></span><br><span class="line">    <span class="keyword">if</span> (!find)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Kill: Invaild process number!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 杀死进程，同时摘链</span></span><br><span class="line">    <span class="keyword">if</span> (p == priority_array[i])<span class="comment">// 进程节点在链表头部</span></span><br><span class="line">    &#123;</span><br><span class="line">        priority_array[i] = priority_array[i]-&gt;next;</span><br><span class="line">        id_list[x] = <span class="number">0</span>;</span><br><span class="line">        life -= p-&gt;life;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">// 进程节点不在链表头部</span></span><br><span class="line">    &#123;</span><br><span class="line">        p_previous-&gt;next = p-&gt;next;</span><br><span class="line">        id_list[x] = <span class="number">0</span>;</span><br><span class="line">        life -= p-&gt;life;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 操作结束后系统进程状态</span></span><br><span class="line">    ps();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间片运行"><a href="#时间片运行" class="headerlink" title="时间片运行"></a>时间片运行</h2><p><code>runtime</code>函数：模拟运行一个周期，然后降低该进程的优先级，如果该进程未运行完成，则将该进程节点移动到新的优先级链表上，如果已经运行完成，则执行<code>kill</code>函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行一个时间片周期</span></span><br><span class="line"><span class="comment"> * i：优先级链表索引</span></span><br><span class="line"><span class="comment"> * prio：新的优先级</span></span><br><span class="line"><span class="comment"> * t：新的优先级链表索引</span></span><br><span class="line"><span class="comment"> * pp：指向新优先级链表要插入的节点</span></span><br><span class="line"><span class="comment"> * qq：指向新优先级链表要插入的节点的上一个节点</span></span><br><span class="line"><span class="comment"> * r_previous：要运行的进程的上一个节点</span></span><br><span class="line"><span class="comment"> * r：要运行的进程</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runtime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = MAX_PRIORITY - <span class="number">1</span>, prio = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span> *<span class="title">pp</span> = <span class="title">NULL</span>, *<span class="title">qq</span> = <span class="title">NULL</span>, *<span class="title">r_previous</span> = <span class="title">NULL</span>, *<span class="title">r</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="comment">// 寻找优先级最高的，状态为就绪的进程，指针r指向它</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; priority_array[i] == <span class="literal">NULL</span>)</span><br><span class="line">            i--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No process in the system, create/awake a process and try again!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        r_previous = priority_array[i];</span><br><span class="line">        r = priority_array[i];</span><br><span class="line">        <span class="keyword">while</span> (r != <span class="literal">NULL</span> &amp;&amp; r-&gt;status != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r_previous = r;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125; <span class="keyword">while</span> (r == <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 运行一个时间片周期</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Process(id: %d) gain the CPU time and will execute %d quantum\n"</span>, r-&gt;id, QUANTUM);</span><br><span class="line">    r-&gt;status = <span class="number">1</span>;<span class="comment">// 将进程状态置为运行中</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Process %d is running......\n"</span>, r-&gt;id);</span><br><span class="line">    <span class="comment">// 制造运行时间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">600000</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1000</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Time out, change to ready status, reduce priority\n"</span>);</span><br><span class="line">    r-&gt;status = <span class="number">0</span>;</span><br><span class="line">    r-&gt;prio /= <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 更新系统生命周期和进程生命周期</span></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;life - QUANTUM &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r-&gt;life -= QUANTUM;</span><br><span class="line">        life -= QUANTUM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        life -= r-&gt;life;</span><br><span class="line">        r-&gt;life = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查进程生命周期是否结束</span></span><br><span class="line">    <span class="keyword">if</span> (r-&gt;life == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Process %d completed, now release it!\n"</span>, r-&gt;id);</span><br><span class="line">        kill(r-&gt;id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (r_previous == r)</span><br><span class="line">            priority_array[i+<span class="number">1</span>] = r-&gt;next;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r_previous-&gt;next = r-&gt;next;</span><br><span class="line">        <span class="comment">// 添加到新优先级链表的尾部</span></span><br><span class="line">        t = r-&gt;prio;</span><br><span class="line">        pp = priority_array[t];</span><br><span class="line">        <span class="keyword">while</span> (pp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            qq = pp;</span><br><span class="line">            pp = pp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (qq == <span class="literal">NULL</span>)</span><br><span class="line">            priority_array[t] = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            qq-&gt;next = r;</span><br><span class="line">        r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一个生命周期结束，显示系统进程状态</span></span><br><span class="line">    ps();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行控制台和系统主入口"><a href="#命令行控制台和系统主入口" class="headerlink" title="命令行控制台和系统主入口"></a>命令行控制台和系统主入口</h2><p>命令控制台和系统主入口都很好理解，这里就不多说了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 命令行控制台</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">terminal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> cmdstr[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">int</span> cmd = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cmd: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmdstr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(command[i], cmdstr))</span><br><span class="line">            &#123;</span><br><span class="line">                cmd = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (cmd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n=================================================\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"id: 当前进程ID  status: 进程状态:0-就绪,1-运行,2-阻塞  prio: 进程优先级  life: 进程生命\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"随机创建一个新进程: create\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"杀死一个进程: kill\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"使一个进程进入阻塞状态: sleep\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"唤醒一个进程: awake\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"查看当前进程信息: ps\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"运行一个时间片周期: runtime\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"获取帮助: help\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"退出: quit\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"=================================================\n\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                ps();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                create();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Which process you want to kill: "</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line">                kill(id);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                runtime();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Which process you want to sleep: "</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line">                sleep(id);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Which process you want to awake: "</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line">                awake(id);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Error command!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    terminal();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h1><ol><li><p>编译并运行程序，早上编译的时候按多了一下Tab键，导致cpp源文件直接被覆盖重写成了二进制文件，重写代码花了1个小时，有时候Tab键真的能坑死人😂</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ dispatcher.cpp -o dispatcher</span><br><span class="line">./dispatcher</span><br></pre></td></tr></table></figure><p><img src="images/os/compile1.png" alt="编译运行"></p></li><li><p>使用<code>help</code>命令查看帮助信息</p><p><img src="images/os/help.png" alt="帮助信息"></p></li><li><p>创建多个进程，进程超过系统上限后就无法创建了，然后查看系统进程状态</p><p><img src="images/os/createpc1.png" alt="创建进程"></p></li><li><p>阻塞/唤醒一些进程，使系统进程有不同的状态。尝试重复阻塞/唤醒某些进程，看看系统能否检查出错误操作</p><p>图中可以看到，我将<code>3,0,2,1,4</code>号进程阻塞，7号进程是阻塞后又唤醒的进程</p><p><img src="images/os/sleepawake.png" alt="阻塞/唤醒进程"></p></li><li><p>杀死进程，检查进程是否从优先级链表中移除</p><p>图里可以看到，我将ID为1的进程杀死之后，系统状态中已不存在ID为1的进程</p><p><img src="images/os/kill.png" alt="杀死进程"></p></li><li><p>运行一个时间片</p><p>可以看到0，2，4号进程因为阻塞状态而不运行，系统选择了8号进程运行，时间片走完之后，8号进程的优先级减半，并且插入到优先级为0的等待队列中</p><p><img src="images/os/runtime.png" alt="运行"></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次实验我们模拟了操作系统中的进程调度，我们使用的调度算法是最高优先级的调度算法，即从等待队列中取出优先级最高的进程运行。该算法的好处是保证了高优先级的进程获得更多的时间片，缺点在于如果不断有新的高优先级进程加入等待队列，低优先级的进程获得时间片的概率很低。该算法的时间复杂度为O(n)，只需要运行一次扫描就能选取出优先级最高的进程，空间复杂度也同样为O(n)，只需要指针进行标记，不需要额外的空间就能进行进程的调度。在现代操作系统中，系统通常选取多种不同的算法来进行进程的调度，尽量保证每个进程获得CPU时间片的概率是相同的</p><h1 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h1><ol><li><p>读懂程序，画出算法所用的数据结构简图</p><p>该算法的数据结构很简单，一个类型为PCB指针的数组，下标代表优先级，在本次实验的定义中，下标越大优先级越高，数组中的元素是该优先级链表中的第一个PCB。在算法执行过程中，只需要取优先级最高，并且为就绪状态的PCB即可，这需要一个<code>for</code>循环：用于优先级数组遍历，和一个<code>while</code>循环：用于链表的遍历，即可选出对应的PCB</p><p><img src="images/os/datastruct.png" alt="数据结构"></p></li><li><p>修改<code>runtime</code>函数，使得算法能够模拟运行中的进程被外界中断或因设备请求而不能运行，自动转入阻塞状态并进行调度</p><p>答：在执行过程中的两个<code>for</code>循环处加上对该进程的<code>sleep</code>操作和<code>runtime</code>递归调用即可，如果该进程的优先级不需要减半，再加上<code>return</code>终止此次调度即可</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;操作系统系列博客的所有实验源自于课程&lt;code&gt;&amp;quot;操作系统原理与实践检验&amp;quot;&lt;/code&gt;，代码是参考老师给的&lt;code&gt;&amp;quot;软件工程专业操作系统实验指导书&amp;quot;&lt;/code&gt;文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://fisher.lazybone.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>VMware运行bin引导文件</title>
    <link href="http://fisher.lazybone.xyz/vmware%E8%BF%90%E8%A1%8Cbin%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6.html"/>
    <id>http://fisher.lazybone.xyz/vmware运行bin引导文件.html</id>
    <published>2019-12-01T07:26:24.000Z</published>
    <updated>2019-12-01T14:52:00.672Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看《自己动手写操作系统》这本书，其中第一章有一段简单的引导代码。书中的指导是将源代码文件<code>.asm</code>编译为二进制文件<code>.bin</code>后写入到软盘中，然后启动运行；又或者是使用<code>FloppyWriter</code>将二进制文件<code>.bin</code>写为镜像文件<code>.img</code>，再放到<code>Virtual PC</code>中运行。由于年代久远，现在的电脑已经没有软盘位，遗留下来的软盘也早被我小时候当玩具玩坏了，而且macOS已经不支持<code>Virtual PC</code>了，<code>FloppyWriter</code>也仅仅是在Windows平台下能够运行。由此看来，书上的运行方法已经全部行不通了</p><a id="more"></a><p>但是<code>.img</code>镜像文件能在<code>VMware Fusion</code>中运行，因此我就想着有没有工具能够将<code>.bin</code>文件转换为<code>.img</code>文件，上网查了一下还真有，工具的名称叫<code>dd</code>，听起来很奇怪，但是这工具却很强大，能够将文件写入到镜像文件中。废话不多说，那就开始试试吧</p><h1 id="编译源文件"><a href="#编译源文件" class="headerlink" title="编译源文件"></a>编译源文件</h1><p>书中第一章最简单的<code>Hello world</code>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">org 07c00h ; 告诉编译器程序加载到07c00h处</span><br><span class="line">    mov ax, cs</span><br><span class="line">    mov ds, ax</span><br><span class="line">    mov es, ax</span><br><span class="line">    call DispStr ; 调用显示字符串函数  </span><br><span class="line">    jmp $; 无限循环</span><br><span class="line"></span><br><span class="line">DispStr:</span><br><span class="line">    mov ax, BootMessge</span><br><span class="line">    mov bp, ax</span><br><span class="line">    mov cx, 16</span><br><span class="line">    mov ax, 01301h</span><br><span class="line">    mov bx, 000ch</span><br><span class="line">    mov dl, 0</span><br><span class="line">    int 10h</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">BootMessge: db &quot;hello, OS world!&quot;</span><br><span class="line">times 510 - ($ - $$) db 0; 剩余字节用0填充，一共512字节</span><br><span class="line">dw 0aa55h; 以这个地址结束，计算机认为是一个引导扇区</span><br></pre></td></tr></table></figure><p>编译一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm boot.asm -o boot.bin</span><br></pre></td></tr></table></figure><p>这样子我们就得到了二进制格式的引导文件，接下来就是制作镜像了</p><h1 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h1><p>使用<code>dd</code>制作为镜像，<code>dd</code>本身有很多种参数，我们只需要定义输入和输出即可，其他参数默认就行了</p><blockquote><p>网上的教程思路是先将bin文件写入为img文件，每次写入操作的缓冲大小为512byte，写入到第一块扇区中。然后另外创建一块空的大小为1.44MB（标准软盘容量）的空镜像文件，每次执行写入缓冲的大小也是512byte，总共2880块扇区。最后将空镜像的第2到2880块扇区追加写入到刚刚写入的镜像文件中，这样子就做成了一张标准的软盘。但经过我的测试之后发现，不需要这么标准的操作，只需要把bin文件写成img文件就能在VMware中运行了</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=boot.bin of=boot.img</span><br></pre></td></tr></table></figure><p><img src="images/os/bintoimg.png" alt="写入镜像"></p><p>这样子我们就得到了一个镜像文件，接下来就可以放到虚拟机中运行测试了</p><h1 id="启动虚拟机，查看成果"><a href="#启动虚拟机，查看成果" class="headerlink" title="启动虚拟机，查看成果"></a>启动虚拟机，查看成果</h1><p>虚拟机的创建就不多说了，自定义的虚拟机不需要很高的配置，甚至硬盘都能去掉。我的虚拟机整体配置如下：</p><ul><li>客户机操作系统：其他</li><li>新硬盘：无（先创建后移除）</li><li>内存：32MB</li><li>网络连接：无（创建后移除网卡）</li><li>设备摘要：软盘（创建后移除CD/DVD和声卡，添加软盘）</li></ul><p>需要注意一点的就是，我们需要为虚拟机添加软盘设备，然后软盘的镜像选择我们刚刚制作的镜像</p><p><img src="images/os/vmconfig.png" alt="虚拟机配置"></p><p>启动虚拟机，看到以下界面，大功告成！</p><p><img src="images/os/boot.png" alt="启动界面"></p><p><strong>注意：在VMware中，书上所说的将<code>org</code>的跳转地址修改为<code>0100h</code>即进入Debug模式，这个方法在VMware中似乎不起作用，因此在后面参考书本源码时，我们需要将<code>org</code>跳转地址固定为<code>07c00h</code></strong></p><h1 id="一键转换脚本"><a href="#一键转换脚本" class="headerlink" title="一键转换脚本"></a>一键转换脚本</h1><p>每次从<code>asm</code>文件转换到<code>img</code>文件都会产生一个<code>bin</code>文件，并且输入的命令都颇为麻烦，因此我写了一个小小的脚本<code>AsmToImg.sh</code>，该脚本能帮我们将中间的过程省去，直接输出一个<code>img</code>文件</p><p>该脚本的仓库地址在<a href="https://github.com/FisherWY/Shell/blob/master/asmtoimg/AsmToImg.sh" target="_blank" rel="noopener">这里</a></p><p>用法：<code>./AsmToImg.sh [-h] source.asm</code></p><p>脚本会将<code>img</code>文件输出到与<code>source.asm</code>同一级目录中，并且自动将<code>bin</code>文件删除</p><p><img src="images/os/asmtoimg.png" alt="脚本演示"></p><h1 id="附：书本源码资源"><a href="#附：书本源码资源" class="headerlink" title="附：书本源码资源"></a>附：书本源码资源</h1><p>书中的源码其实是不全的，我看到第三章，尝试编译的时候才发现，作者把源码和FloppyWriter都放在随书光盘中了</p><p>书的年代久远，光盘早就弄丢了，找这本书的资源花了我好长时间，我把资源就放在我的服务器上吧，下载地址点<a href="http://fisher.lazybone.xyz/downloads/document/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/">这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看《自己动手写操作系统》这本书，其中第一章有一段简单的引导代码。书中的指导是将源代码文件&lt;code&gt;.asm&lt;/code&gt;编译为二进制文件&lt;code&gt;.bin&lt;/code&gt;后写入到软盘中，然后启动运行；又或者是使用&lt;code&gt;FloppyWriter&lt;/code&gt;将二进制文件&lt;code&gt;.bin&lt;/code&gt;写为镜像文件&lt;code&gt;.img&lt;/code&gt;，再放到&lt;code&gt;Virtual PC&lt;/code&gt;中运行。由于年代久远，现在的电脑已经没有软盘位，遗留下来的软盘也早被我小时候当玩具玩坏了，而且macOS已经不支持&lt;code&gt;Virtual PC&lt;/code&gt;了，&lt;code&gt;FloppyWriter&lt;/code&gt;也仅仅是在Windows平台下能够运行。由此看来，书上的运行方法已经全部行不通了&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://fisher.lazybone.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>MacOS改有线网IP地址</title>
    <link href="http://fisher.lazybone.xyz/macos%E6%94%B9%E6%9C%89%E7%BA%BF%E7%BD%91ip%E5%9C%B0%E5%9D%80.html"/>
    <id>http://fisher.lazybone.xyz/macos改有线网ip地址.html</id>
    <published>2019-11-28T08:22:16.000Z</published>
    <updated>2019-11-28T08:33:03.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>机房的无线网络一如既往的差，自带的电脑想要上网还得找根网线，连接电脑然后手动指定一下IP地址就好了。但是macOS下有时会遇到让人无语的问题：”无效的服务器地址BasicIPv6ValidationError”。这问题的意思就是手动指定的时候，IPV6地址合法性验证错误，我也没想着指定IPV6地址，留空都不行，关闭也不行😓</p><a id="more"></a><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>这时候没办法了，只能用终端直接改IP地址就好了</p><p>首先查看有线网络服务的名称</p><p><code>networksetup -listallnetworkservices</code></p><p>一般名称都为：<code>Ethernet</code></p><p>然后修改IP地址，第一个参数是网络服务的名称，第二个参数是IP地址，第三个参数是子网掩码，第四个参数是路由器地址</p><p><code>networksetup -setmanual &quot;Ethernet&quot; ${IP_Addr} ${Net_Mask} ${Router_Addr}</code></p><p>之后可以用<code>networksetup -getinfo &quot;Ethernet&quot;</code>查看修改是否成功</p><p>最后再在网络设置页面添加DNS服务器地址就OK了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;机房的无线网络一如既往的差，自带的电脑想要上网还得找根网线，连接电脑然后手动指定一下IP地址就好了。但是macOS下有时会遇到让人无语的问题：”无效的服务器地址BasicIPv6ValidationError”。这问题的意思就是手动指定的时候，IPV6地址合法性验证错误，我也没想着指定IPV6地址，留空都不行，关闭也不行😓&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://fisher.lazybone.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>中级软件实作总结</title>
    <link href="http://fisher.lazybone.xyz/%E4%B8%AD%E7%BA%A7%E8%BD%AF%E4%BB%B6%E5%AE%9E%E4%BD%9C%E6%80%BB%E7%BB%93.html"/>
    <id>http://fisher.lazybone.xyz/中级软件实作总结.html</id>
    <published>2019-11-26T08:34:01.000Z</published>
    <updated>2019-11-26T12:59:56.478Z</updated>
    
    <content type="html"><![CDATA[<p>为期一周的中级软件实作结束了。这一周以来，我们跟着老师的步伐，前端使用Bootstrap，后端使用Express框架完成了一个购物商城注册、首页的页面和功能。整个项目的下载地址在<a href="http://fisher.lazybone.xyz/downloads/document/%E4%B8%AD%E7%BA%A7%E8%BD%AF%E4%BB%B6%E5%AE%9E%E4%BD%9C.zip">这里</a>（因为项目只做DEMO，因此就不放上GitHub了），以下是我关于这一周笔记的总结</p><h1 id="后端笔记总结"><a href="#后端笔记总结" class="headerlink" title="后端笔记总结"></a>后端笔记总结</h1><h2 id="我的观点"><a href="#我的观点" class="headerlink" title="我的观点"></a>我的观点</h2><p>这次的中级软件实作和以往不一样，我们首次使用了Node.JS作为后端开发语言，相比于老一代的后端开发语言<code>Java/PHP/.NET</code>，新生代的后端开发语言<code>Node.JS/GO/Python</code>语法更加简单，配置十分简易，上手难度低</p><a id="more"></a><p>我认为，新生代的后端语言能够用于中小型项目的开发，随着第三方库的发展，越来越多的人能够上手开发属于自己的小项目</p><p>对于大型的项目，我认为目前还是老一代后端开发语言比较适合，经历了这么长时间的技术沉淀，老一代后端开发语言已经形成了许多应用于不同场景的技术框架，稳定性可靠性相对较高，但对于新手来说，了解学习这些框架需要一定的时间</p><h2 id="关于Node-JS"><a href="#关于Node-JS" class="headerlink" title="关于Node.JS"></a>关于Node.JS</h2><p><code>Node.JS</code>不是前端框架，是后端技术，遵循<code>CommonJS</code>规范。可用于在特定场合下取代PHP、Java等技术，实现文件IO、网络访问、数据库操作等</p><p><strong><code>Node.JS</code>特点：</strong></p><ol><li>语法基于JavaScript，但是功能是后台技术，可以实现IO、Network、DB等操作</li><li>单线程模型，避免了多线程并发的问题</li><li>异步的回调函数，避免了线程阻塞的问题</li><li>适合于IO密集型应用，不合适于CPU密集型应用</li></ol><p><strong>创建<code>Node.JS</code>项目的基本步骤：</strong></p><ol><li>在项目根目录下使用<code>npm create</code>创建项目描述文件<code>package.json</code>和<code>package-lock.json</code></li><li>使用<code>npm install &lt;package&gt;</code>下载项目所需要的第三方包</li><li>代码的编写。如果是Web项目，需要创建Web服务器，监听端口，提供响应消息</li></ol><p><strong>一问一答：</strong></p><ul><li><p>为什么数据库中的日期要用<code>bigint</code>储存？</p><p>答：因为不同国家地区使用的日期制式和时区不一样，单纯地使用”Date”或”DateTime”会导致日期格式固定单一，不利于国际化</p></li></ul><p><strong>HTTP协议中，请求消息的格式：</strong></p><ul><li><p>GET请求：</p><p>请求参数放在<code>req.query</code>中，浏览器地址栏可见</p><p>GET <code>/url?para1=1&amp;para2=2</code> HTTP/1.1</p><p>Content-Type: xxx</p></li><li><p>POST请求：</p><p>请求参数放在<code>req.body</code>中，浏览器地址栏不可见</p><p>POST <code>/url</code> HTTP/1.1</p><p>Content-Type: xxx</p><p>para1=1&amp;para2=2</p></li></ul><p><strong>ES6中的部分新特性：</strong></p><ul><li>反引号字符串，字符串可以换行</li><li>使用<code>${}</code>替换变量</li></ul><h1 id="前端笔记总结"><a href="#前端笔记总结" class="headerlink" title="前端笔记总结"></a>前端笔记总结</h1><h2 id="我的观点-1"><a href="#我的观点-1" class="headerlink" title="我的观点"></a>我的观点</h2><p>上个学期的期末大作业中，我第一次用到了Bootstrap。当时的我也了解到了栅格系统，但是并不会使用Bootstrap CSS。我还是傻乎乎地自己手写CSS文件，一开始还能保证页面是响应式的，一切的样式都使用%，但随着页面越来越复杂，以及没有清除默认样式导致的各种奇怪的问题，后面的代码就写烂了。到现在回看当初写的代码，根本就不想去修改哪怕是一行代码，再联想一下企业开发中，历史遗留下来的HTML页面，那简直就是陨石坑。因此我认为，即使HTML是标记性语言，我们也应该用工程化的思想和方法，去制定一些编写的规范，搭建开发的框架。这样不仅能降低开发维护的难度和成本，还能延长项目的生命周期</p><h2 id="关于Bootstrap"><a href="#关于Bootstrap" class="headerlink" title="关于Bootstrap"></a>关于Bootstrap</h2><p><strong>前端可用的技术栈：</strong></p><ul><li>HTML/CSS/JS</li><li>Bootstrap/jQuery/AJAX</li><li>Vue.js/Vue-Router/MintUI/Axios</li><li>Angular.js/Router/lonic/HttpClient</li><li>React/React-Native/Fetch</li></ul><p><strong>响应式网页：</strong></p><ul><li>也称为自适应式网页，一个页面可以根据不同浏览器设备而呈现不同的布局和外观</li><li>所有的尺寸都使用相对值（%,em），而不是绝对值（px）</li><li>布局容器宽度使用百分比，内部都使用百分比，浮动或者是弹性的</li><li>图片宽度都使用<code>max-width:100%</code>，防止图片失真</li><li>使用<code>CSS3 Media Query（媒体查询技术）</code>，针对不同尺寸的设备使用不同尺寸的图片，以及不同的样式</li></ul><p><strong>网页尺寸的定义：</strong></p><ul><li>PC：&gt;=992px</li><li>Pad：768~992px</li><li>Phone：&lt;768px</li></ul><p><strong>对于大型页面的CSS，我们使用以下方法降低开发维护难度：</strong></p><ul><li>样式重置（CSS Reset）：Normalize.css，一个重置页面默认样式的CSS文件</li><li>样式脚手架，例如Bootstrap</li><li>栅格布局系统</li><li>常用组件的复用：轮播、下拉、弹框</li><li>当前页面专有的头部、主体、尾部</li></ul><p><strong>关于Bootstrap框架：</strong></p><ul><li><p>Bootstrap是一个由Twitter维护的CSS框架，可用于编写响应式网页</p></li><li><p>Bootstrap把屏幕分为4类：</p><p>lg：Large，size&gt;=1200px，适用于PC</p><p>md：Medium，992px&lt;=size&lt;1200px，适用于高分辨率平板电脑</p><p>sm：Small，768px&lt;=size&lt;992px，适用于平板电脑</p><p>xs：Extra Small，size&lt;768px，适用于手机屏幕</p></li><li><p>Bootstrap栅格系统的示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container/container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xx-x"</span>&gt;</span></span><br><span class="line">            内容或者".row" ".col-xx-x"</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><p>前后端都有一个共同的问题，那就是跨域请求的问题</p><ul><li><p>什么是跨域访问？</p><p>假设现在有2个资源：</p><ul><li>资源1: <a href="http://localhost:5500/index.html" target="_blank" rel="noopener">http://localhost:5500/index.html</a></li><li>资源2: <a href="http://localhost:8888/user/register" target="_blank" rel="noopener">http://localhost:8888/user/register</a></li></ul><p>浏览器中，如果访问的两个资源的<code>协议</code>、<code>主机名</code>或<code>端口号</code>三者之中只要有1项不同，就是跨域访问。注意：<code>localhost</code>和<code>127.0.0.1</code>是不同的域名，也属于跨域访问</p></li><li><p>默认情况下，有些内容默认允许跨域，如：<code>&lt;img&gt;、&lt;script&gt;、&lt;link&gt;、&lt;a&gt;</code></p></li><li><p>默认情况下，浏览器默认禁止XHR跨域访问</p></li><li><p>如何解决浏览器对XHR的跨域请求限制？（每种方法详细<a href="https://juejin.im/post/5c23993de51d457b8c1f4ee1" target="_blank" rel="noopener">解析</a>）</p><ul><li>JSONP</li><li>CORS</li><li>PostMessage</li><li>WebSocket</li><li>Node中间件代理</li><li>Nginx反向代理</li><li>window.name + iframe</li><li>location.hash + iframe</li><li>document.domain + iframe</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为期一周的中级软件实作结束了。这一周以来，我们跟着老师的步伐，前端使用Bootstrap，后端使用Express框架完成了一个购物商城注册、首页的页面和功能。整个项目的下载地址在&lt;a href=&quot;http://fisher.lazybone.xyz/downloads/document/%E4%B8%AD%E7%BA%A7%E8%BD%AF%E4%BB%B6%E5%AE%9E%E4%BD%9C.zip&quot;&gt;这里&lt;/a&gt;（因为项目只做DEMO，因此就不放上GitHub了），以下是我关于这一周笔记的总结&lt;/p&gt;&lt;h1 id=&quot;后端笔记总结&quot;&gt;&lt;a href=&quot;#后端笔记总结&quot; class=&quot;headerlink&quot; title=&quot;后端笔记总结&quot;&gt;&lt;/a&gt;后端笔记总结&lt;/h1&gt;&lt;h2 id=&quot;我的观点&quot;&gt;&lt;a href=&quot;#我的观点&quot; class=&quot;headerlink&quot; title=&quot;我的观点&quot;&gt;&lt;/a&gt;我的观点&lt;/h2&gt;&lt;p&gt;这次的中级软件实作和以往不一样，我们首次使用了Node.JS作为后端开发语言，相比于老一代的后端开发语言&lt;code&gt;Java/PHP/.NET&lt;/code&gt;，新生代的后端开发语言&lt;code&gt;Node.JS/GO/Python&lt;/code&gt;语法更加简单，配置十分简易，上手难度低&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习总结" scheme="http://fisher.lazybone.xyz/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="JavaScript" scheme="http://fisher.lazybone.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hackintosh安装过程记录</title>
    <link href="http://fisher.lazybone.xyz/hackintosh%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95.html"/>
    <id>http://fisher.lazybone.xyz/hackintosh安装过程记录.html</id>
    <published>2019-11-22T07:09:30.000Z</published>
    <updated>2019-11-24T13:30:30.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇的EFI文件准备工作完成之后，我们就可以正式开始装系统了。这篇博客用于记录我的安装过程以及安装过程中遇到的问题和解决方法</p><h1 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h1><p>首先我们需要准备一个8GB的U盘、macOS的镜像文件。我的镜像是从<code>黑果小兵</code>处下载的，他提供的镜像中自带了Clover，因此制作启动盘之后我们需要将自带的Clover替换掉</p><a id="more"></a><h2 id="写入镜像"><a href="#写入镜像" class="headerlink" title="写入镜像"></a>写入镜像</h2><p>我们使用<code>baleanEtcher</code>制作启动盘，这个软件界面界面简洁，操作也简单，分为3步：选择镜像，选择设备，写入镜像</p><p><img src="images/hackintosh/etcher.jpg" alt="Etcher"></p><h2 id="替换EFI"><a href="#替换EFI" class="headerlink" title="替换EFI"></a>替换EFI</h2><p>镜像写入完成之后，我们使用<code>Clover Configurator</code>挂载U盘的EFI分区，然后将其中的EFI文件替换。这样启动盘就制作完成了</p><p>挂载EFI分区：</p><p><img src="images/hackintosh/efi.png" alt="挂载EFI分区"></p><p>替换EFI文件夹，注意文件夹名字一定要一样：</p><p><img src="images/hackintosh/replaceefi.png" alt="替换EFI"></p><h1 id="Bios配置"><a href="#Bios配置" class="headerlink" title="Bios配置"></a>Bios配置</h1><p>Bios的配置参数我参考了网上的<code>华硕主板黑苹果设置</code>，如果你的主板没有某一项参数，忽略即可。具体配置如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Boot -- Fast Boot -&gt; Disabled</span><br><span class="line">Advanced -- PCH Sorage Configuration -- SATA Mode Selection -&gt; AHCI</span><br><span class="line">Boot -- CSM(Compatibility Support Module) -&gt; Disabled</span><br><span class="line">Ai Tweaker -- Ai Overclock Tuner -&gt; XMP</span><br><span class="line">Advanced -- CPU configuration -- Intel Virtualization Technology -&gt; Disabled</span><br><span class="line">Advanced --<span class="built_in"> System </span>Agent (SA) Configuration -- VT-D -&gt; Disabled</span><br><span class="line">Advanced --<span class="built_in"> System </span>Agent (SA) Configuration -- Above 4G Decoding -&gt; Disabled</span><br><span class="line">Advanced -- PCH configruation - IOAPIC 24-119 Entries -&gt; Enabled</span><br><span class="line">Advanced -- PCH-FW Configuration -- TPM Device Selection -&gt; Discrete TPM</span><br><span class="line">Advanced -- APM Configuration -- ErP Ready -&gt; Disabled</span><br><span class="line">Advanced --<span class="built_in"> Network </span>Stack Configuration --<span class="built_in"> Network </span>Stack -&gt; Disabled</span><br><span class="line">Advanced -- Advanced PCH Configuration --<span class="built_in"> system </span>time <span class="keyword">and</span> alarm source -&gt; Legacy RTC</span><br><span class="line">Boot -- Secure Boot -- OS<span class="built_in"> Type </span>-- Other OS</span><br></pre></td></tr></table></figure><h1 id="安装macOS"><a href="#安装macOS" class="headerlink" title="安装macOS"></a>安装macOS</h1><p>接下来就是macOS的安装了，开机按F8选择启动盘为U盘，就可以看到如下界面：</p><p><img src="images/hackintosh/cloverboot.jpeg" alt="Clover界面"></p><p>选择<code>Boot macOS Install from Install macOS High Sierra</code>，跑了一段代码之后就会进入安装系统的界面：</p><p><img src="images/hackintosh/macosinstall.jpeg" alt="安装界面"></p><p>先打开磁盘工具，将新硬盘格式化为<code>APFS</code>文件系统（这里我用U盘作为示例，自行选择要格式化的硬盘）：</p><p><img src="images/hackintosh/reformatdisk.jpeg" alt="格式化硬盘"></p><p>然后返回安装界面，点击安装。如果这时候报错<code>应用程序副本已损坏，不能用来安装macOS</code>：</p><p><img src="images/hackintosh/installerror.jpeg" alt="报错信息"></p><p>这是因为证书已经过期，我们需要把系统时间调早一些。首先我们需要断开网络连接，然后左上角找到<code>实用工具</code>，打开<code>终端</code>，然后输入<code>date 0101010119</code>，终端会输出修改后的系统时间。这时候关闭终端，可以继续系统的安装了</p><p><img src="images/hackintosh/date.jpeg" alt="调时间"></p><h1 id="安装WebDriver，修改CPU显示型号"><a href="#安装WebDriver，修改CPU显示型号" class="headerlink" title="安装WebDriver，修改CPU显示型号"></a>安装WebDriver，修改CPU显示型号</h1><p>系统安装好后，我们需要安装显卡驱动。显卡驱动的安装也是很简单，需要注意的一点就是系统的版本要和驱动的版本对应，否则可能会出现无法驱动导致的开机黑屏问题。在<a href="https://www.tonymacx86.com/nvidia-drivers/" target="_blank" rel="noopener">tonymacx86</a>上有对应的列表，找到对应版本的驱动下载安装就好了</p><p>我安装的是<code>macOS 10.13.6(17G65)</code>，对应的Web Driver版本是<code>387.10.10.10.40.105</code></p><p><img src="images/hackintosh/driver.png" alt="对应驱动"></p><p>最后一个小地方就是关于本机中，处理器的型号显示为<code>Unknown</code>。这里我参考了<a href="https://www.sqlsec.com/2018/09/cpu.html" target="_blank" rel="noopener">国光的博客</a>，将其修改为自己定义的字符串</p><p><img src="images/hackintosh/about.png" alt="修改CPU型号"></p><p>大功告成！以后负担重的任务就交给Hackintosh，老Macbook Pro就拿来写写博客，享受退休生活！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在上一篇的EFI文件准备工作完成之后，我们就可以正式开始装系统了。这篇博客用于记录我的安装过程以及安装过程中遇到的问题和解决方法&lt;/p&gt;&lt;h1 id=&quot;制作启动盘&quot;&gt;&lt;a href=&quot;#制作启动盘&quot; class=&quot;headerlink&quot; title=&quot;制作启动盘&quot;&gt;&lt;/a&gt;制作启动盘&lt;/h1&gt;&lt;p&gt;首先我们需要准备一个8GB的U盘、macOS的镜像文件。我的镜像是从&lt;code&gt;黑果小兵&lt;/code&gt;处下载的，他提供的镜像中自带了Clover，因此制作启动盘之后我们需要将自带的Clover替换掉&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hackintosh" scheme="http://fisher.lazybone.xyz/tags/hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>Clover EFI配置过程</title>
    <link href="http://fisher.lazybone.xyz/clover-efi%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B.html"/>
    <id>http://fisher.lazybone.xyz/clover-efi配置过程.html</id>
    <published>2019-11-21T11:46:34.000Z</published>
    <updated>2019-11-22T07:11:20.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在今年3月份的时候，我用一块机械硬盘装了一次黑苹果。当时装系统的时候走了不少的弯路：卡加号，卡显卡驱动加载，进系统黑屏……历经千辛万苦，终于装成功了，但是机械硬盘的体验着实不咋地。于是双十一的时候先是买了一块<code>PM981a</code>，拿到手后还没装上电脑呢，一查发现<code>PM981</code>系列装黑苹果会卡死，因为主控的问题。好家伙，退货花了12块，等退款又花了几天，这几天之内我专心研究了一下<code>Clover EFI</code>，黑苹果相关的主板、驱动配置，自己弄了一套适合自己机型的<code>Clover EFI</code>配置。前天新固态到了之后就开始装机，第一次启动的时候提示机型设置的太新了，不兼容<code>10.13.6</code>，然后我换了一套17年的iMac机型，剩下的安装一气呵成</p><a id="more"></a><p>这篇博客是用来记录我的<code>Clover EFI</code>配置的过程</p><h1 id="硬件信息"><a href="#硬件信息" class="headerlink" title="硬件信息"></a>硬件信息</h1><p>不同的硬件需要的驱动不一样，可以自己上网查查硬件需要什么驱动，一般查<code>型号+Hackintosh</code>就能找到相关的资料</p><p>我的硬件配置如下：</p><table><thead><tr><th style="text-align:center">硬件类型</th><th style="text-align:center">型号</th></tr></thead><tbody><tr><td style="text-align:center">主板</td><td style="text-align:center">Asus Rog Strix B360-i Mini ITX</td></tr><tr><td style="text-align:center">处理器</td><td style="text-align:center">Intel Core i5-8500</td></tr><tr><td style="text-align:center">内存</td><td style="text-align:center">Crucial By Micron DDR4 2666MHz 8GB + Corsair LPX DDR4 3000MHz 8GB(运行在2666MHz)</td></tr><tr><td style="text-align:center">显卡</td><td style="text-align:center">Nvidia GeForce GTX 1060 3GB</td></tr><tr><td style="text-align:center">硬盘</td><td style="text-align:center">Asgard AN2 NVMe 250GB</td></tr></tbody></table><p>型号接近的或者同一个系列的应该可以通用，但有一些需要特别的配置，比如华硕主板需要勾选<code>Fix Shutdown</code>，不同声卡注入ID不同……</p><h1 id="EFI配置"><a href="#EFI配置" class="headerlink" title="EFI配置"></a>EFI配置</h1><p>EFI用于引导系统的启动，在Hackintosh中，Clover EFI还负责向macOS中注入我们添加的驱动</p><h2 id="下载Clover"><a href="#下载Clover" class="headerlink" title="下载Clover"></a>下载Clover</h2><p>前往GitHub中的<a href="https://github.com/CloverHackyColor/CloverBootloader/releases" target="_blank" rel="noopener">Clover Bootloader Release</a>中下载最新版的Clover，解压之后我们会看到如下的文件目录：</p><p><img src="images/hackintosh/clover.png" alt="Clover目录结构"></p><p>我们只将其中的<code>EFI</code>文件夹解压出来，接下来我们要添加适合自己的驱动</p><h2 id="添加驱动"><a href="#添加驱动" class="headerlink" title="添加驱动"></a>添加驱动</h2><p>接下来我们要添加黑苹果必须的驱动，macOS的驱动都以<code>kext</code>为后缀名，我们需要将其放在<code>EFI/CLOVER/kexts/Other/</code>文件夹中</p><p>我们需要的驱动基本都能在<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>或者<a href="https://bitbucket.org/RehabMan/" target="_blank" rel="noopener">Rehabman</a>的仓库中找到，可以在Github或者Google中直接搜索驱动的名称，一般第一个链接就是仓库地址</p><p>驱动的列表及其功能介绍如下，来自<a href="https://github.com/daliansky/Hackintosh/blob/master/LinkList.md" target="_blank" rel="noopener">daliansky</a>的GitHub仓库，根据我的配置查找相应的驱动：</p><table><thead><tr><th style="text-align:center">驱动名称(名称排序)</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">AppleALC.kext</td><td style="text-align:center">声卡注入框架</td></tr><tr><td style="text-align:center">BT4LEContinuityFixup.kext</td><td style="text-align:center">博通网卡AirDrop、Handoff功能修复，说不定以后会换网卡，先添加了</td></tr><tr><td style="text-align:center">CodecCommander.kext</td><td style="text-align:center">解决睡眠唤醒之后声卡无声问题</td></tr><tr><td style="text-align:center">CPUFriend.kext</td><td style="text-align:center">注入动态电源数据</td></tr><tr><td style="text-align:center">FakePCIID_Intel_GbX.kext</td><td style="text-align:center">不清楚作用，但与FakePCIID在同一个包中，所以就放进来了</td></tr><tr><td style="text-align:center">FakePCIID_XHCIMux.kext</td><td style="text-align:center">老版本的USB驱动</td></tr><tr><td style="text-align:center">FakePCIID.kext</td><td style="text-align:center">硬件ID仿冒驱动</td></tr><tr><td style="text-align:center">FakeSMC.kext</td><td style="text-align:center">仿冒SMC设备驱动，黑苹果必备驱动</td></tr><tr><td style="text-align:center">GenericUSBXHCI.kext</td><td style="text-align:center">通用的USB3.0驱动</td></tr><tr><td style="text-align:center">HibernationFixup.kext</td><td style="text-align:center">修复睡眠后无法唤醒、死机、黑屏等问题</td></tr><tr><td style="text-align:center">IntelMausiEthernet.kext</td><td style="text-align:center">Intel有线网卡驱动</td></tr><tr><td style="text-align:center">Lilu.kext</td><td style="text-align:center">驱动注入框架，AppleALC, WhateverGreen, VirtualSMC等驱动的依赖</td></tr><tr><td style="text-align:center">NVWebDriverLibValFix.kext</td><td style="text-align:center">修复Nvidia Web驱动安装时提示Lib库错误的问题</td></tr><tr><td style="text-align:center">VoodooPS2Controller.kext</td><td style="text-align:center">键盘、鼠标、触摸板万能驱动</td></tr><tr><td style="text-align:center">WhateverGreen.kext</td><td style="text-align:center">显卡核心驱动，已经合并了AMD、Nvidia、Intel显卡修复的驱动</td></tr><tr><td style="text-align:center">XHCI-300-series-injector.kext</td><td style="text-align:center">对应B360主板的SATA修复</td></tr><tr><td style="text-align:center">USBInjectAll.kext</td><td style="text-align:center">修复USB3.0 USB3.1的U盘无法识别的问题</td></tr></tbody></table><p>我的机型所需的驱动就是以上的列表，添加驱动之后我的文件夹如下图所示：</p><p><img src="images/hackintosh/kexts.png" alt="驱动文件夹"></p><h2 id="配置config-plist"><a href="#配置config-plist" class="headerlink" title="配置config.plist"></a>配置config.plist</h2><p><code>CLOVER</code>文件夹中已经给我们提供了一份<code>config-sample.plist</code>文件，我并没有基于这份配置文件进行修改，而是使用了3月份的时候，第一次成功吃到黑苹果的<code>config.plist</code>文件。我比较建议从网上找一份和自己型号相似的配置文件，然后基于那份配置文件再进行修改，这样子可以避免很多弯路</p><p>首先我们需要下载<code>Clover Configurator</code>，这个软件用来图形化配置<code>config.plist</code>文件，有Mac版和Win版，我使用的是Mac版，下载地址在<a href="https://mackie100projects.altervista.org/download-clover-configurator/" target="_blank" rel="noopener">这里</a></p><ol><li><p>打开<code>Clover Configurator</code>，点击左下角，使用<code>Clover Configurator</code>打开配置文件</p></li><li><p>ACPI设置：对于我的主板，我需要勾选<code>修复关机</code>，修复<code>HDA</code>，SSDT的生成选项中勾选<code>插件类型</code></p><p><img src="images/hackintosh/ACPI.png" alt="ACPI设置"></p></li><li><p>引导参数设置：默认引导卷名修改为自己想要默认使用的卷，右边的框填<code>PBR</code></p><p><code>-v</code>：启动啰嗦模式，安装的时候方便查看失败原因，安装启动成功后可以去掉</p><p><code>dart=0</code>：具体功能不清楚</p><p><code>darkwake=1</code>：修复华硕主板声卡<code>ASUS SUPREMEFX S1220A</code>无声的问题</p><p><code>nvda_drv=1</code>：启用Nvidia Web Driver驱动</p><p><img src="images/hackintosh/BOOT.png" alt="BOOT设置"></p></li><li><p>设备设置：勾选<code>USB注入</code>、Audio注入值修改为<code>7</code>，同时勾选<code>重置HDA</code>、勾选<code>LAN注入</code></p><p><img src="images/hackintosh/DEVICE.png" alt="DEVICE设置"></p></li><li><p>引导界面设置：我的配置如下，可以根据自己需要修改</p><p><img src="images/hackintosh/UEFI.png" alt="UEFI"></p></li><li><p>内核和驱动补丁设置：这里面的参数我照用了之前的配置，没做任何修改</p><p><img src="images/hackintosh/KERNEL.png" alt="KERNEL配置"></p></li><li><p>机型设置：根据自己的配置以及要安装的系统版本进行配置，选择与自己配置最为接近的型号，并且所选型号支持将要安装的系统</p><p>点击右下角选择机型，然后点击<code>检查覆盖范围</code>，保证使用的序列号在苹果官网无法查到。如果查到了就点击左下角按钮生成新的序列号</p><p><img src="images/hackintosh/MODEL.png" alt="MODEL设置"></p></li><li><p>系统设置：点击生成一个<code>UUID</code>，勾选<code>注入System ID</code>和<code>NavidiaWeb</code></p><p><img src="images/hackintosh/SYSTEM.png" alt="SYSTEM设置"></p></li></ol><p><strong>保存配置文件，将其命名为<code>config.plist</code>并放在<code>COLVER</code>文件夹下。至此EFI的配置就完成了，接下来写入EFI分区之后就可以开始安装测试了</strong></p><h1 id="替换EFI文件"><a href="#替换EFI文件" class="headerlink" title="替换EFI文件"></a>替换EFI文件</h1><p>将系统镜像写入U盘之后，U盘会有一个隐藏的EFI分区，我们使用工具将其挂载，打开分区，将里面的EFI文件夹备份出来，然后把我们刚配置好的EFI文件夹放进去，就可以开始系统的安装了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在今年3月份的时候，我用一块机械硬盘装了一次黑苹果。当时装系统的时候走了不少的弯路：卡加号，卡显卡驱动加载，进系统黑屏……历经千辛万苦，终于装成功了，但是机械硬盘的体验着实不咋地。于是双十一的时候先是买了一块&lt;code&gt;PM981a&lt;/code&gt;，拿到手后还没装上电脑呢，一查发现&lt;code&gt;PM981&lt;/code&gt;系列装黑苹果会卡死，因为主控的问题。好家伙，退货花了12块，等退款又花了几天，这几天之内我专心研究了一下&lt;code&gt;Clover EFI&lt;/code&gt;，黑苹果相关的主板、驱动配置，自己弄了一套适合自己机型的&lt;code&gt;Clover EFI&lt;/code&gt;配置。前天新固态到了之后就开始装机，第一次启动的时候提示机型设置的太新了，不兼容&lt;code&gt;10.13.6&lt;/code&gt;，然后我换了一套17年的iMac机型，剩下的安装一气呵成&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hackintosh" scheme="http://fisher.lazybone.xyz/tags/hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>CSGO服务器更新失败的解决方法</title>
    <link href="http://fisher.lazybone.xyz/csgo%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
    <id>http://fisher.lazybone.xyz/csgo服务器更新失败的解决方法.html</id>
    <published>2019-11-20T01:50:29.000Z</published>
    <updated>2019-11-20T02:08:31.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>CSGO裂网大行动更新之后，我也迫不及待地要更新自己的CSGO服务器了。但是一运行更新脚本，就发现了Steamcmd报错，具体信息为：<code>ERROR! Timed out waiting for AppInfo update.</code></p><p><img src="images/csgo/server/updatefail.png" alt="更新失败"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>上网查了一圈之后发现，这个问题是因为Steam中的<code>appinfo.vdf</code>更新失败造成的。这个文件的具体目录位于<code>Steam/appcache</code>中。我们可以将其删除，然后就可以更新了</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Steam/appcache</span><br><span class="line">rm appinfo.vdf</span><br><span class="line"><span class="built_in">cd</span> ~/steamcmd/</span><br><span class="line">./csgo_server_update.sh</span><br></pre></td></tr></table></figure><p><img src="images/csgo/server/updatesuccess.png" alt="更新成功"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;CSGO裂网大行动更新之后，我也迫不及待地要更新自己的CSGO服务器了。但是一运行更新脚本，就发现了Steamcmd报错，具体信息为：&lt;code&gt;ERROR! Timed out waiting for AppInfo update.&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;images/csgo/server/updatefail.png&quot; alt=&quot;更新失败&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h1&gt;&lt;p&gt;上网查了一圈之后发现，这个问题是因为Steam中的&lt;code&gt;appinfo.vdf&lt;/code&gt;更新失败造成的。这个文件的具体目录位于&lt;code&gt;Steam/appcache&lt;/code&gt;中。我们可以将其删除，然后就可以更新了&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://fisher.lazybone.xyz/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop之HDFS搭建</title>
    <link href="http://fisher.lazybone.xyz/hadoop%E4%B9%8Bhdfs%E6%90%AD%E5%BB%BA.html"/>
    <id>http://fisher.lazybone.xyz/hadoop之hdfs搭建.html</id>
    <published>2019-11-18T11:52:56.000Z</published>
    <updated>2019-11-18T12:35:11.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因学校团委项目需要，我们团队需要一个统一的大数据文件储存节点。自己的电脑不能保证24h开机状态，因此我们打算在阿里云服务器上搭建HDFS节点，并以单节点模式运行</p><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>首先下载Hadoop，这里使用了清华的镜像站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/stable2/hadoop-3.2.1.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后下载Java JDK或Open JDK，由于Oracle官方的JDK下载需要Oracle账号，这里提供放在自己服务器上的资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://fisher.lazybone.xyz/downloads/software/jdk-8u231-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>因为组员可能要在本地搭建HDFS节点，因此我将JDK集成和数据文件夹放在Hadoop文件夹下，整个Hadoop文件夹目录结构如下：</p><ul><li>Hadoop<ul><li>jdk</li><li>data</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-3.2.1.tar.gz</span><br><span class="line">mv hadoop-3.2.1.tar.gz hadoop</span><br><span class="line">tar -zxvf jdk-8u231-linux-x64.tar.gz -C ./hadoop</span><br><span class="line"><span class="built_in">cd</span> hadoop/</span><br><span class="line">mv jdk1.8.0_231 jdk</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>接下来我们需要配置Hadoop的HDFS模块，一共包括<code>core-site.xml</code>，<code>hdfs-site.xml</code>和<code>hadoop-env.sh</code>，这三个文件都在Hadoop文件夹的<code>etc/hadoop/</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> etc/hadoop</span><br><span class="line">vim core-site.xml</span><br><span class="line">vim hdfs-site.xml</span><br><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure><p>对于<code>core-site.xml</code>，我的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://0.0.0.0:8000&lt;/value&gt;</span><br><span class="line"> &lt;description&gt;NameNode URL&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/fisher/hadoop/data/temp&lt;/value&gt;</span><br><span class="line"> &lt;description&gt;hadoop的临时本地文件目录&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;io.file.buffer.size&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;51200&lt;/value&gt;</span><br><span class="line"> &lt;description&gt;读写序列文件缓存大小&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>对于<code>hdfs-site.xml</code>，我的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">            &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;/home/fisher/hadoop/data/name&lt;/value&gt;</span><br><span class="line">            &lt;description&gt;本地文件系统存储着命令空间和操作日志 &lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;/home/fisher/hadoop/data/file&lt;/value&gt;</span><br><span class="line">             &lt;description&gt;存储blocks的本地路径列表，用逗号隔开 &lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">             &lt;description&gt; 备份数，根据集群节点合理规划&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">             &lt;value&gt;http://0.0.0.0:8001&lt;/value&gt;</span><br><span class="line">             &lt;description&gt; namenode 界面访问地址&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">            &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">            &lt;description&gt; 是否使用界面访问&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>对于<code>hadoop-env.sh</code>，我们需要将JDK添加到其环境变量中，找到<code>JAVA_HOME</code>所在地方，将其修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/fisher/hadoop/jdk</span><br></pre></td></tr></table></figure><p>至此，Hadoop的HDFS节点就搭建完成了。<strong>需要注意的是：如果我们需要将HDFS暴露到外网中，我们需要将节点的地址都修改为<code>0.0.0.0</code>，并且开放相应的防火墙端口</strong></p><h2 id="配置免登录密钥"><a href="#配置免登录密钥" class="headerlink" title="配置免登录密钥"></a>配置免登录密钥</h2><p>我们还需要为当前用户配置<code>.shh</code>免登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>在Hadoop文件夹中初始化节点并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs namenode -format</span><br><span class="line">sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p>启动结果如下图所示，则表示启动成功：</p><p><img src="images/hadoop/hdfstart.png" alt="启动HDFS"></p><p>使用<code>域名+端口</code>访问网页管理界面，可以看到如下图：</p><p><img src="images/hadoop/hdfstatus.png" alt="管理界面"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因学校团委项目需要，我们团队需要一个统一的大数据文件储存节点。自己的电脑不能保证24h开机状态，因此我们打算在阿里云服务器上搭建HDFS节点，并以单节点模式运行&lt;/p&gt;&lt;h1 id=&quot;搭建过程&quot;&gt;&lt;a href=&quot;#搭建过程&quot; class=&quot;headerlink&quot; title=&quot;搭建过程&quot;&gt;&lt;/a&gt;搭建过程&lt;/h1&gt;&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;首先下载Hadoop，这里使用了清华的镜像站&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/stable2/hadoop-3.2.1.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="服务器配置" scheme="http://fisher.lazybone.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Hadoop" scheme="http://fisher.lazybone.xyz/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验三：模拟P、V操作</title>
    <link href="http://fisher.lazybone.xyz/%E6%A8%A1%E6%8B%9Fp%E3%80%81v%E6%93%8D%E4%BD%9C.html"/>
    <id>http://fisher.lazybone.xyz/模拟p、v操作.html</id>
    <published>2019-11-17T11:20:31.000Z</published>
    <updated>2019-11-17T12:17:40.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>操作系统系列博客的所有实验源自于课程<code>&quot;操作系统原理与实践检验&quot;</code>，代码是参考老师给的<code>&quot;软件工程专业操作系统实验指导书&quot;</code>文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法</p><a id="more"></a><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ol><li>理解信号量相关理论</li><li>掌握记录型信号量结构</li><li>掌握 P、V 原语实现机制</li></ol><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>本实验针对操作系统中信号量的相关理论进行实验，要求实验者输入实验指导书提供的代码并进行测试。代码主要模拟信号量的P（down）、V（up）操作</p><ul><li><p>信号量</p><p>信号量也称为信号锁，主要应用于进程间的同步和互斥，在用于互斥时，信号量通常作为资源锁。信号量通过两个原子操作P（down）和V（up）来访问。down操作使信号量的值-1，up操作使信号量的值+1</p></li><li><p>记录型信号量</p><p>记录型信号量采用了“让权等待”的策略，当存在多个资源访问同一个临界资源的情况时，记录型信号量可以使用一个等待链来存放等待使用资源的进程。在本次实验中，我们使用的是记录型信号量</p></li></ul><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><ul><li>对于P（down）操作。首先我们需要判断申请的临界资源是否存在。若该资源存在，接下来我们要判断该资源是否被其他进程使用中。如果其他进程使用中，我们将申请使用该资源的进程添加到等待链表中，并且信号量-1。如果没有其他进程使用中，则信号量-1，并将该资源标识为该进程使用中</li><li>对于V（up）操作。首先我们需要判断释放的临界资源是否存在。若该资源存在，接下来我们可以释放该资源，并查看等待链表中是否有正在等待使用资源的进程。如果没有等待使用资源的进程，则该资源的信号量+1，如果有等待使用资源的进程，我们将其从等待链表移入到正在使用的列表中，同时信号量+1</li></ul><h1 id="代码汇总"><a href="#代码汇总" class="headerlink" title="代码汇总"></a>代码汇总</h1><p><code>basicpcb.h</code>已经定义了关于信号量的结构体，我们只需要创建<code>semaphore.cpp</code>，并实现P、V操作</p><h2 id="P操作"><a href="#P操作" class="headerlink" title="P操作"></a>P操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申请资源 -&gt; P操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">char</span> *sname, <span class="keyword">int</span> pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sflag: 信号量找到标志</span></span><br><span class="line"><span class="comment"> * pflag: 进程找到标志</span></span><br><span class="line"><span class="comment"> * p: 找到的进程节点</span></span><br><span class="line"><span class="comment"> * s: 找到的信号量节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    <span class="keyword">int</span> sflag = <span class="number">0</span>, pflag = <span class="number">0</span>;</span><br><span class="line">    pnode *p;</span><br><span class="line">    semaphore *s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据名字查找信号量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SEMAPHORE_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(sem[i].name, sname))</span><br><span class="line">        &#123;</span><br><span class="line">            s = &amp;sem[i];</span><br><span class="line">            sflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据进程ID查找进程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PROCESS_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pr[i]-&gt;node-&gt;pid == pid)</span><br><span class="line">        &#123;</span><br><span class="line">            p = pr[i];</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标信号量或进程未找到</span></span><br><span class="line">    <span class="keyword">if</span> (!sflag || !pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Semaphore %s not exist or Process %d not exist.\n"</span>, sname, pid);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Semaphore find result: %d. Process find result: %d\n"</span>, sflag, pflag);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量-1</span></span><br><span class="line">    s-&gt;count--;</span><br><span class="line">    <span class="comment">// 临界资源仍足够</span></span><br><span class="line">    <span class="keyword">if</span> (s-&gt;count &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;curpid = p-&gt;node-&gt;pid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 临界资源不足</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 添加到等待列表</span></span><br><span class="line">        <span class="keyword">if</span> (s-&gt;wlist != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pnode *tmp = s-&gt;wlist;</span><br><span class="line">            <span class="keyword">while</span> (tmp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">                tmp = tmp-&gt;next;</span><br><span class="line">            tmp-&gt;next = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s-&gt;wlist = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="V操作"><a href="#V操作" class="headerlink" title="V操作"></a>V操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放资源 -&gt; V操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">char</span> *sname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sflag: 信号量找到标志</span></span><br><span class="line"><span class="comment"> * spos: 信号量位置</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    <span class="keyword">int</span> sflag = <span class="number">0</span>, spos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找信号量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SEMAPHORE_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(sem[i].name, sname))</span><br><span class="line">        &#123;</span><br><span class="line">            sflag = <span class="number">1</span>;</span><br><span class="line">            spos = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量未找到</span></span><br><span class="line">    <span class="keyword">if</span> (!sflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Semaphore %s not found\n"</span>, sname);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源</span></span><br><span class="line"><span class="comment"> * 如果等待列表中有进程，count数量不变，等待列表入队</span></span><br><span class="line"><span class="comment"> * 如果等待列表中无进程，count数量++</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    <span class="keyword">if</span> (sem[spos].wlist != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sem[spos].curpid = sem[spos].wlist-&gt;node-&gt;pid;</span><br><span class="line">        sem[spos].wlist = sem[spos].wlist-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sem[spos].count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他完善程序的函数"><a href="#其他完善程序的函数" class="headerlink" title="其他完善程序的函数"></a>其他完善程序的函数</h2><p>我们需要完善<code>showdetail()</code>，<code>help()</code>，<code>init()</code>，<code>terminal()</code>函数来让整个程序跑起来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在程序的最开始定义宏</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> SEMAPHORE_NUMBER 5</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> PROCESS_NUMBER 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义5个信号量</span></span><br><span class="line">semaphore sem[SEMAPHORE_NUMBER];</span><br><span class="line"><span class="comment">// 定义0-19一共20个进程</span></span><br><span class="line">pnode *pr[PROCESS_NUMBER];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看临界资源使用状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showdetail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n===================================================\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SEMAPHORE_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sem[i].count &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s (Current process id: %d) | Wait list: "</span>, sem[i].name, sem[i].curpid);</span><br><span class="line">            pnode *p = sem[i].wlist;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%5d -&gt;"</span>, p-&gt;node-&gt;pid);</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"   List end\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s now avaliable\n"</span>, sem[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"===================================================\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 帮助命令</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n===================================================\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sname: 临界资源名称  pid: 进程ID\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"申请资源: down(sname,pid)\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"释放资源: up(sname)\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"查看当前资源使用情况: showdetail\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"获取帮助: help\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"退出: exit\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"===================================================\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化信号量semaphore</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SEMAPHORE_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> sname[] = &#123;<span class="string">'s'</span>, i+<span class="number">48</span>, <span class="string">'\0'</span>&#125;;</span><br><span class="line">        <span class="built_in">strcat</span>(sem[i].name, sname);</span><br><span class="line">        sem[i].wlist = <span class="literal">NULL</span>;</span><br><span class="line">        sem[i].count = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化进程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PROCESS_NUMBER; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pr[i] = <span class="keyword">new</span> pnode;</span><br><span class="line">        pr[i]-&gt;node = <span class="keyword">new</span> pcb;</span><br><span class="line">        pr[i]-&gt;node-&gt;pid = i;</span><br><span class="line">        pr[i]-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line">        pr[i]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        pr[i]-&gt;sub = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">terminal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> cflag, pflag;</span><br><span class="line">    <span class="keyword">char</span> cmdstr[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    initerror();</span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cflag = <span class="number">0</span>;</span><br><span class="line">        pflag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cmd: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmdstr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"exit"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"showdetail"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            showdetail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"help"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            help();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmdstr, <span class="string">"down"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> *sname = substr(cmdstr, instr(cmdstr, <span class="string">'('</span>)+<span class="number">1</span>, instr(cmdstr, <span class="string">','</span>)<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">char</span> *pid = substr(cmdstr, instr(cmdstr, <span class="string">','</span>)+<span class="number">1</span>, instr(cmdstr, <span class="string">')'</span>)<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sname &amp;&amp; pid)</span><br><span class="line">            &#123;</span><br><span class="line">                down(sname, atoi(pid));</span><br><span class="line">                pflag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmdstr, <span class="string">"up"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> *sname = substr(cmdstr, instr(cmdstr, <span class="string">'('</span>)+<span class="number">1</span>, instr(cmdstr, <span class="string">')'</span>)<span class="number">-1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (sname)</span><br><span class="line">            &#123;</span><br><span class="line">                up(sname);</span><br><span class="line">                pflag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入错误或参数错误</span></span><br><span class="line">        <span class="keyword">if</span> (!cflag)</span><br><span class="line">            geterror(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!pflag)</span><br><span class="line">            geterror(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个semaphore.cpp程序的入口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    terminal();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h1><ol><li><p>编译并运行程序</p><p><code>g++ semaphore.cpp -o semaphore &amp;&amp; ./semaphore</code></p><p><img src="images/os/semaphorecompile.png" alt="编译运行"></p></li><li><p>使用<code>help</code>命令查看帮助</p><p><img src="images/os/semaphorehelp.png" alt="查看帮助"></p></li><li><p>使用<code>down</code>命令申请资源，使用<code>up</code>命令释放资源，使用<code>showdetail</code>查看资源使用情况</p><p><img src="images/os/semaphoredetail.png" alt="PV操作"></p><p>从上图中可以看到，我们申请了临界资源，程序会判断临界资源和进程是否同时存在，再进行P操作，释放资源也是如此。但是我们的程序有一个缺点，就是PV操作必须要成对地进行，而且一个进程不能多次申请同一个临界资源，因为我们没有对其进行限制。这是程序不完美的地方</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本次的实验中，我们模拟进行了进程的P、V操作。PV操作解决了临界资源的分配问题，进程可以通过一个等待列表来先后使用需要的资源，但是PV操作存在一个问题就是：如果A进程占用了1号资源，需要再申请占用2号资源才能运行；而B进程占用了2号资源，需要再申请占用1号资源才能运行。这就造成了死锁的问题，对于该问题的解决方案，人们提出了“银行家算法”，在计算进程申请资源后是否会造成死锁问题后，选择不会形成死锁的解决方案来分配进程，破坏进程死锁产生的条件。该算法虽然会影响系统的性能，但与死锁造成的资源浪费、产生死锁后再解决问题相比，“银行家算法”显然是一个比较好的解决方案</p><h1 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h1><ol><li><p>如何修改<code>down</code>操作，使之能一次申请多个信号量？</p><p>将<code>down</code>函数的信号量参数改为一个信号量数组之后，进程能一次申请多个信号量。这会同时带来进程的死锁问题，为了避免该问题，其中一个解决方案：将信号量的申请改为<code>&amp;&amp;</code>关系，即该进程的一次申请中，所有要申请的临界资源都能使用，才能正式分配资源</p></li><li><p>在某个时刻，一个进程最多可以等待多少个信号量？</p><p>从理论上来说，一个进程最多可以等待很多个信号量。但是如果等待的信号量越多，产生死锁的可能性就越来越大，为了避免死锁的产生，进程最好是不需要等待信号量，或者在可控范围下等待信号量</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;操作系统系列博客的所有实验源自于课程&lt;code&gt;&amp;quot;操作系统原理与实践检验&amp;quot;&lt;/code&gt;，代码是参考老师给的&lt;code&gt;&amp;quot;软件工程专业操作系统实验指导书&amp;quot;&lt;/code&gt;文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://fisher.lazybone.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验二：模拟进程的撤销</title>
    <link href="http://fisher.lazybone.xyz/%E6%A8%A1%E6%8B%9F%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%92%A4%E9%94%80.html"/>
    <id>http://fisher.lazybone.xyz/模拟进程的撤销.html</id>
    <published>2019-11-13T07:40:15.000Z</published>
    <updated>2019-11-17T11:39:51.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>操作系统系列博客的所有实验源自于课程<code>&quot;操作系统原理与实践检验&quot;</code>，代码是参考老师给的<code>&quot;软件工程专业操作系统实验指导书&quot;</code>文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法</p><a id="more"></a><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ul><li>理解进程撤销相关理论</li><li>掌握进程撤销流程</li></ul><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>本实验针对操作系统进程撤销相关理论进行实验。要求实验者设计一个程序，该程序可以模拟撤销多个进程及其子孙进程</p><ol><li>采用动态或静态方法生成一颗进程树（进程数目&gt;=20）</li><li>设计进程撤销算法</li><li>实现进程撤销函数，采用级联方法撤销</li><li>可动态撤销进程</li><li>可动态观察进程树的情况</li><li>测试程序并获得正确结果</li></ol><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><ol><li>首先我们需要从进程总链中找到要撤销的进程。如果查找不成功，则进程撤销操作结束，返回查找不成功消息</li><li>找到要撤销的进程之后，我们需要查找该进程的父进程。如果该进程没有父进程，我们认为这个进程是进程总链和进程树的根节点，根节点不可以被撤销</li><li>将要撤销的进程从进程树上截下。由于我们使用的是广义二叉树中的<code>孩子兄弟表示法</code>，因此我们需要判断要撤销的进程是否为父进程的第一个节点。如果是第一个节点，则直接置父进程的孩子节点为<code>NULL</code>即可；如果不是第一个节点，则需要在兄弟链中摘除节点</li><li>撤销进程树，从进程总链上摘除。我们使用递归的方法遍历撤销进程及其子孙，同时将其从进程总链上摘除</li></ol><h1 id="代码汇总"><a href="#代码汇总" class="headerlink" title="代码汇总"></a>代码汇总</h1><p><code>basicpcb.h</code>和<code>process.cpp</code>的代码已经在上一篇博客中定义，我们只需要将下面的代码附加到<code>process.cpp</code>文件中，注意代码位置即可</p><h2 id="进程树撤销"><a href="#进程树撤销" class="headerlink" title="进程树撤销"></a>进程树撤销</h2><p>进程树的撤销使用了递归的方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从节点p开始删除进程树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deltree</span><span class="params">(pnode *tbd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (pnode *p = plink; p; p = p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next!=<span class="literal">NULL</span> &amp;&amp; p-&gt;next==tbd)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;next = tbd-&gt;next;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tbd-&gt;brother != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        deltree(tbd-&gt;brother);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tbd-&gt;sub != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        deltree(tbd-&gt;sub);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> tbd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程撤销"><a href="#进程撤销" class="headerlink" title="进程撤销"></a>进程撤销</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 撤销进程</span></span><br><span class="line"><span class="comment"> * para[0]: 要撤销的进程pid</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deletepc</span><span class="params">(<span class="keyword">int</span> *para)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (para[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Root process(pid:0) can not be deleted!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * p: 工作指针</span></span><br><span class="line"><span class="comment"> * ptree_previous: 要撤销的进程在进程树中的前一个节点</span></span><br><span class="line"><span class="comment"> * tbd: 要撤销的进程节点</span></span><br><span class="line"><span class="comment"> * pflag: 记录要撤销的进程是否查找成功</span></span><br><span class="line"><span class="comment"> * tbd_ppid: 要撤销的进程的父进程</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    pnode *p, *ptree_previous, *tbd;</span><br><span class="line">    <span class="keyword">int</span> pflag = <span class="number">0</span>, tbd_ppid = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到要撤销的进程</span></span><br><span class="line">    <span class="keyword">for</span> (p=plink; p; p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            tbd_ppid = p-&gt;node-&gt;ppid;</span><br><span class="line">            tbd = p;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到要撤销的进程的父进程</span></span><br><span class="line">    <span class="keyword">for</span> (p=plink; p; p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == tbd_ppid)</span><br><span class="line">        &#123;</span><br><span class="line">            ptree_previous = p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Process pid %d not found!\n"</span>, para[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tbd_ppid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Process parent(pid:%d) not found!\n"</span>, tbd_ppid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将进程从进程树中删除</span></span><br><span class="line">    <span class="keyword">if</span> (ptree_previous != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 进程是父进程的第一个字节点</span></span><br><span class="line">        <span class="keyword">if</span> (ptree_previous-&gt;sub == tbd)</span><br><span class="line">        &#123;</span><br><span class="line">            ptree_previous-&gt;sub = tbd-&gt;brother;</span><br><span class="line">            tbd-&gt;brother=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 进程是子节点但不是第一个</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (p=ptree_previous-&gt;sub; p; p=p-&gt;brother)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;brother == tbd)</span><br><span class="line">                &#123;</span><br><span class="line">                    p-&gt;brother = tbd-&gt;brother;</span><br><span class="line">                    tbd-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将进程及其子进程从进程链表中删除，然后从内存中删除</span></span><br><span class="line">    deltree(tbd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMD指令解析"><a href="#CMD指令解析" class="headerlink" title="CMD指令解析"></a>CMD指令解析</h2><p>我们需要修改<code>processterminal()</code>函数中的代码，更新<code>cmd</code>指令</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 撤销进程</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(cmdstr, <span class="string">"deletepc"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> *para;</span><br><span class="line">    <span class="keyword">char</span> *s;</span><br><span class="line"></span><br><span class="line">    cflag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = instr(cmdstr, <span class="string">'('</span>);</span><br><span class="line">    <span class="keyword">int</span> end = instr(cmdstr, <span class="string">')'</span>);</span><br><span class="line">    s = substr(cmdstr, start+<span class="number">1</span>, end<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    para = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line">    para = strtoarray(s);</span><br><span class="line"></span><br><span class="line">    deletepc(para);</span><br><span class="line"></span><br><span class="line">    pflag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h1><ol><li><p>编译并运行程序</p><p><code>g++ process.cpp -o process</code></p><p><img src="images/os/compile.png" alt="编译并运行"></p></li><li><p>使用<code>help</code>命令查看帮助</p><p><img src="images/os/createhelp.png" alt="help命令"></p></li><li><p>使用<code>createpc</code>命令自行创建进程，可以创建一个子孙进程比较多的进程。使用<code>showdetail</code>命令查看进程信息</p><p><img src="images/os/createpc.png" alt="创建进程"></p></li><li><p>使用<code>deletepc</code>命令撤销进程，使用<code>showdetail</code>命令查看撤销后的进程信息。可以从下图中看出，我使用了<code>deletepc(1)</code>撤销了<code>pid=1</code>的进程，并且<code>pid=3</code>的子孙进程也相应的被撤销了</p><p><img src="images/os/deletepc.png" alt="撤销进程"></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本次实验中，我们模拟了进程的撤销。在实际的操作系统中，进程的撤销还需要涉及资源的释放、回收等操作，系统还需要对该进程的信息进行收集，例如：进程异常结束时，系统需要收集异常信息，发送异常报告。但其核心就是进程树、进程总链上的摘除，我们了解掌握其核心即可</p><h1 id="课后思考"><a href="#课后思考" class="headerlink" title="课后思考"></a>课后思考</h1><ol><li><p>进程撤销的核心是什么？</p><p>答：进程撤销的核心是将进程及其子孙进程从进程树和进程总链中摘除，释放其占用的资源，并且保证不破坏现有的进程树和进程总链结构</p></li><li><p>进程总链在进程撤销的过程中有什么作用？</p><p>答：进程总链能够快速定位我们需要查找的进程，如果通过进程树查找进程，我们需要耗费较长的时间，这在系统级操作中是不允许的</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;操作系统系列博客的所有实验源自于课程&lt;code&gt;&amp;quot;操作系统原理与实践检验&amp;quot;&lt;/code&gt;，代码是参考老师给的&lt;code&gt;&amp;quot;软件工程专业操作系统实验指导书&amp;quot;&lt;/code&gt;文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://fisher.lazybone.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验一：模拟进程的创建</title>
    <link href="http://fisher.lazybone.xyz/%E6%A8%A1%E6%8B%9F%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA.html"/>
    <id>http://fisher.lazybone.xyz/模拟进程的创建.html</id>
    <published>2019-11-11T11:22:24.000Z</published>
    <updated>2019-11-13T07:59:25.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>操作系统系列博客的所有实验源自于课程<code>&quot;操作系统原理与实践检验&quot;</code>，代码是参考老师给的<code>&quot;软件工程专业操作系统实验指导书&quot;</code>文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法</p><a id="more"></a><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ul><li>理解进程创建的相关理论</li><li>掌握进程创建的方法</li><li>掌握进程相关数据结构</li></ul><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>本实验针对操作系统中进程创建相关理论进行实验。要求实验者输入实验指导书提供的代码并进行测试。代码简化了进程创建的多个步骤和内容。进程的树形结构采用广义二叉树的方式进行储存</p><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="定义进程控制块PCB-Process-Control-Block"><a href="#定义进程控制块PCB-Process-Control-Block" class="headerlink" title="定义进程控制块PCB(Process Control Block)"></a>定义进程控制块PCB(Process Control Block)</h2><p>为了描述和控制进程的运行，系统为每个进程定义了一个进程控制块（PCB）。它是进程实体的一部分，是操作系统进程管理中最重要的数据结构，其主要包含以下信息：</p><ol><li>进程标识符：在系统中唯一地标识一个进程。通常包括：<ul><li>进程号<code>pid</code></li><li>父进程号<code>ppid</code></li><li>用户号<code>uid</code>。</li></ul></li><li>处理机状态：处理器的状态通常由处理机的各种寄存器中的内容组成。PCB负责存放<strong>中断/阻塞/挂起</strong>时各个寄存器的值，当进程恢复执行时，进程可以从断点处恢复并继续运行。其数据结构包括：<ul><li>通用寄存器</li><li>指令计数器</li><li>程序状态字PSW</li><li>用户栈指针。</li></ul></li><li>进程调度信息：进程在调度过程中，系统需要记录进程的执行信息，以管理进程的运行，为进程分配CPU时间片。调度需要用到以下的信息：<ul><li>进程状态（就绪/阻塞/挂起）</li><li>进程优先级（用于描述优先获得CPU时间片的级别的整数，高优先级的进程优先获得CPU时间片。通常情况下，该值越小优先级越高）</li><li>其他信息（等待时间、运行总时间等。用于记录进程执行的相关信息）</li><li>事件（描述进程挂起/阻塞的原因）</li></ul></li><li>进程控制信息：用于记录进程执行所需要的资源信息，创建执行进程的程序信息以及进程锁和进程之间的通信信息。其数据结构包括：<ul><li>程序和数据的地址（程序在内存和外存中的首地址）</li><li>进程同步和通信机制</li><li>资源列表（进程除CPU以外的所有资源）</li><li>链接指针（进程队列中指向下一个进程的PCB首地址）</li></ul></li></ol><p><strong>定义进程控制块的代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础进程控制块（PCB）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 进程ID</span></span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="comment">// 进程父ID</span></span><br><span class="line">    <span class="keyword">int</span> ppid;</span><br><span class="line">    <span class="comment">// 进程优先级</span></span><br><span class="line">    <span class="keyword">int</span> prio;</span><br><span class="line">    <span class="comment">// 进程状态</span></span><br><span class="line">    <span class="keyword">int</span> state;</span><br><span class="line">    <span class="comment">// 上次运行时间</span></span><br><span class="line">    <span class="keyword">int</span> lasttime;</span><br><span class="line">    <span class="comment">// 进程运行总时间</span></span><br><span class="line">    <span class="keyword">int</span> totaltime;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程组织结构：进程在广义二叉树或者进程链表中的节点结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 当前节点对应的进程控制块</span></span><br><span class="line">    pcb *node;</span><br><span class="line">    <span class="comment">// 进程树中，当前节点的子节点</span></span><br><span class="line">    pnode *sub;</span><br><span class="line">    <span class="comment">// 进程树中，当前节点的兄弟节点</span></span><br><span class="line">    pnode *brother;</span><br><span class="line">    <span class="comment">// 进程链表中，当前节点的下一节点</span></span><br><span class="line">    pnode *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号量机制，进程的资源分配</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 信号量资源名称</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">// 计数值</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="comment">// 当前进程ID</span></span><br><span class="line">    <span class="keyword">int</span> curpid;</span><br><span class="line">    <span class="comment">// 等待进程链表</span></span><br><span class="line">    pnode *wlist;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h2><ol><li><p>进程创建首先需要申请一个空白的PCB，获得唯一的进程ID，装载进程运行所需要的信息</p></li><li><p>为新进程分配内存和栈空间</p></li><li><p>初始化进程控制块：</p><ul><li>初始化标识信息</li><li>初始化处理机状态信息</li><li>初始化处理机控制信息</li></ul></li><li><p>将新进程插入就绪队列</p></li><li><p>将新进程插入进程树中，进程树用于用于描述进程家族关系。如下图1-1中可以看出，进程P1创建了进程P2、P3、P4、P5，而P2创建了P6、P7、P8。在进程的创建过程中，我们需要将每一个新进程都插入到进程树中，有了清晰的父子关系，资源继承、进程删除等操作将会十分方便</p><p><img src="images/os/processtree.png" alt="进程树"></p></li><li><p>将新进程插入到进程总链中，该总链可以快速定位和查找进程</p></li></ol><p><strong>进程创建的代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进程树根节点</span></span><br><span class="line">pnode *proot;</span><br><span class="line"><span class="comment">// 进程链表头节点</span></span><br><span class="line">pnode *plink;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建进程</span></span><br><span class="line"><span class="comment"> * para[0]: 要创建的新进程的pid</span></span><br><span class="line"><span class="comment"> * para[1]: 新进程的父进程pid</span></span><br><span class="line"><span class="comment"> * para[2]: 新进程的优先级</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createpc</span><span class="params">(<span class="keyword">int</span> *para)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * p: 操作指针</span></span><br><span class="line"><span class="comment"> * p1: 新进程的指针</span></span><br><span class="line"><span class="comment"> * pp: 新进程p1的父节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    pnode *p, *p1, *pp;</span><br><span class="line">    <span class="keyword">int</span> pflag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (p=plink; p; p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检查当前进程是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"pid %d is already exist!\n"</span>, para[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到进程父节点的进程控制块</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            pp = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Parent id %d is not exist!\n"</span>, para[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新的进程控制块</span></span><br><span class="line">    p1 = <span class="keyword">new</span> pnode;</span><br><span class="line">    p1-&gt;node = <span class="keyword">new</span> pcb;</span><br><span class="line">    p1-&gt;node-&gt;pid = para[<span class="number">0</span>];</span><br><span class="line">    p1-&gt;node-&gt;ppid = para[<span class="number">1</span>];</span><br><span class="line">    p1-&gt;node-&gt;prio = para[<span class="number">2</span>];</span><br><span class="line">    p1-&gt;sub = <span class="literal">NULL</span>;</span><br><span class="line">    p1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p1-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新进程添加到进程树中</span></span><br><span class="line">    <span class="keyword">if</span>(!pp-&gt;sub)</span><br><span class="line">        pp-&gt;sub = p1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环遍历至兄弟子进程的最后一个</span></span><br><span class="line">        <span class="keyword">for</span> (p=pp-&gt;sub; p-&gt;brother; p=p-&gt;brother);</span><br><span class="line">        p-&gt;brother = p1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新进程添加到进程链表中</span></span><br><span class="line">    <span class="keyword">for</span> (p=plink; p-&gt;next; p=p-&gt;next);</span><br><span class="line">    p-&gt;next = p1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码汇总"><a href="#代码汇总" class="headerlink" title="代码汇总"></a>代码汇总</h1><h2 id="PCB头文件"><a href="#PCB头文件" class="headerlink" title="PCB头文件"></a>PCB头文件</h2><p>我们将PCB整理为一个头文件<code>basicpcb.h</code>，并添加如下常用工具函数，也可以使用C++标准库中的函数</p><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">作用介绍</th></tr></thead><tbody><tr><td style="text-align:center"><code>geterror</code></td><td style="text-align:center">获取错误信息</td></tr><tr><td style="text-align:center"><code>initerror</code></td><td style="text-align:center">初始化错误信息</td></tr><tr><td style="text-align:center"><code>substr</code></td><td style="text-align:center">获取字串</td></tr><tr><td style="text-align:center"><code>instr</code></td><td style="text-align:center">查找字符C在Str中的位置</td></tr><tr><td style="text-align:center"><code>strtoarray</code></td><td style="text-align:center">将Str字符串按照格式转化为string数组</td></tr></tbody></table><p><strong><code>basicpcb.h</code>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进程控制块PCB头文件</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> basicpcb_h</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> basicpcb_h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *errormsg[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程控制块</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 进程ID</span></span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="comment">// 进程父ID</span></span><br><span class="line">    <span class="keyword">int</span> ppid;</span><br><span class="line">    <span class="comment">// 进程优先级</span></span><br><span class="line">    <span class="keyword">int</span> prio;</span><br><span class="line">    <span class="comment">// 进程状态</span></span><br><span class="line">    <span class="keyword">int</span> state;</span><br><span class="line">    <span class="comment">// 上次运行时间</span></span><br><span class="line">    <span class="keyword">int</span> lasttime;</span><br><span class="line">    <span class="comment">// 进程运行总时间</span></span><br><span class="line">    <span class="keyword">int</span> totaltime;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程在广义二叉树或者进程链表的节点结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 当前节点对应的进程控制块</span></span><br><span class="line">    pcb *node;</span><br><span class="line">    <span class="comment">// 进程链树中，当前节点的子节点</span></span><br><span class="line">    pnode *sub;</span><br><span class="line">    <span class="comment">// 进程树中，当前节点的兄弟节点</span></span><br><span class="line">    pnode *brother;</span><br><span class="line">    <span class="comment">// 进程链表中，当前节点的下一节点</span></span><br><span class="line">    pnode *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号量机制</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 信号量资源名称</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">// 计数值</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="comment">// 当前进程ID</span></span><br><span class="line">    <span class="keyword">int</span> curpid;</span><br><span class="line">    <span class="comment">// 等待进程链表</span></span><br><span class="line">    pnode *wlist;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取错误信息</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> geterror(eno) printf(<span class="meta-string">"%s\n"</span>, errormsg[eno]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成错误信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initerror</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    errormsg[<span class="number">0</span>] = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(errormsg[<span class="number">0</span>], <span class="string">"Error command!"</span>);</span><br><span class="line">    <span class="comment">// errormsg[0] = "Error command!";</span></span><br><span class="line">    errormsg[<span class="number">1</span>] = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">// errormsg[1] = "Error parameter!";</span></span><br><span class="line">    <span class="built_in">strcpy</span>(errormsg[<span class="number">1</span>], <span class="string">"Error parameter!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子字符串</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">substr</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s1;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">if</span> (start&lt;<span class="number">0</span> || end&gt;=len || start&gt;end)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    s1 = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(end - start + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; pos &lt;= end-start; pos++)</span><br><span class="line">    &#123;</span><br><span class="line">        s1[pos] = s[pos+start];</span><br><span class="line">    &#125;</span><br><span class="line">    s1[pos] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找字符C在Str中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">instr</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Str字符串转为string数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">strtoarray</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str: XXX,XXX,XXX</span></span><br><span class="line"><span class="comment"> * a: 用于记录每个字符的下标</span></span><br><span class="line"><span class="comment"> * count: 用于记录字符串中','出现的次数</span></span><br><span class="line"><span class="comment"> * x1: 储存','在字符串s1中出现的位置</span></span><br><span class="line"><span class="comment"> * s1: 记录截取字符串后的s</span></span><br><span class="line"><span class="comment"> * s2: 储存每个子字符串的指针</span></span><br><span class="line"><span class="comment"> * c: 储存','</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    <span class="keyword">int</span> *a, count, x1;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> c, *s1, *s2;</span><br><span class="line">    <span class="keyword">if</span> (!s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"String can't be NULL!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    s1 = s;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s1); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == <span class="string">','</span>)</span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line"></span><br><span class="line">    a = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(count);</span><br><span class="line">    c = <span class="string">','</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x1 = instr(s1, c);</span><br><span class="line">        <span class="keyword">if</span> (x1 &gt;= <span class="number">0</span>)</span><br><span class="line">            s2 = substr(s1, <span class="number">0</span>, x1<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s2 = s1;</span><br><span class="line">        <span class="comment">// 将string转为int</span></span><br><span class="line">        a[i] = atoi(s2);</span><br><span class="line">        s1 = substr(s1, x1+<span class="number">1</span>, <span class="built_in">strlen</span>(s1)<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="进程创建具体实现"><a href="#进程创建具体实现" class="headerlink" title="进程创建具体实现"></a>进程创建具体实现</h2><p>我们在<code>process.cpp</code>文件中实现进程的创建，并编写了<code>main</code>函数进行测试</p><p><strong><code>process.cpp</code>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"basicpcb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程树根节点</span></span><br><span class="line">pnode *proot;</span><br><span class="line"><span class="comment">// 进程链表头节点</span></span><br><span class="line">pnode *plink;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建进程</span></span><br><span class="line"><span class="comment"> * para[0]: 要创建的新进程的pid</span></span><br><span class="line"><span class="comment"> * para[1]: 新进程的父进程pid</span></span><br><span class="line"><span class="comment"> * para[2]: 新进程的优先级</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createpc</span><span class="params">(<span class="keyword">int</span> *para)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * p: 操作指针</span></span><br><span class="line"><span class="comment"> * p1: 新进程的指针</span></span><br><span class="line"><span class="comment"> * pp: 新进程p1的父节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    pnode *p, *p1, *pp;</span><br><span class="line">    <span class="keyword">int</span> pflag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (p=plink; p; p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检查当前进程是否已创建</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"pid %d is already exist!\n"</span>, para[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到进程父节点的进程控制块</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;node-&gt;pid == para[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            pp = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pflag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Parent id %d is not exist!\n"</span>, para[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新的进程控制块</span></span><br><span class="line">    p1 = <span class="keyword">new</span> pnode;</span><br><span class="line">    p1-&gt;node = <span class="keyword">new</span> pcb;</span><br><span class="line">    p1-&gt;node-&gt;pid = para[<span class="number">0</span>];</span><br><span class="line">    p1-&gt;node-&gt;ppid = para[<span class="number">1</span>];</span><br><span class="line">    p1-&gt;node-&gt;prio = para[<span class="number">2</span>];</span><br><span class="line">    p1-&gt;sub = <span class="literal">NULL</span>;</span><br><span class="line">    p1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p1-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新进程添加到进程树中</span></span><br><span class="line">    <span class="keyword">if</span>(!pp-&gt;sub)</span><br><span class="line">        pp-&gt;sub = p1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环遍历至兄弟子进程的最后一个</span></span><br><span class="line">        <span class="keyword">for</span> (p=pp-&gt;sub; p-&gt;brother; p=p-&gt;brother);</span><br><span class="line">        p-&gt;brother = p1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新进程添加到进程链表中</span></span><br><span class="line">    <span class="keyword">for</span> (p=plink; p-&gt;next; p=p-&gt;next);</span><br><span class="line">    p-&gt;next = p1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示进程信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showdetail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pnode *p, *p1;</span><br><span class="line">    p = plink;</span><br><span class="line">    <span class="comment">// 将所有进程信息打印</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(pid: %d - prio: %d): "</span>, p-&gt;node-&gt;pid, p-&gt;node-&gt;prio);</span><br><span class="line">        p1 = p-&gt;sub;</span><br><span class="line">        <span class="comment">// 打印子进程信息</span></span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"   (pid: %d - prio: %d)"</span>, p1-&gt;node-&gt;pid, p1-&gt;node-&gt;prio);</span><br><span class="line">            p1 = p1-&gt;brother;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化根节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initprocess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    proot = <span class="keyword">new</span> pnode;</span><br><span class="line">    proot-&gt;node = <span class="keyword">new</span> pcb;</span><br><span class="line">    proot-&gt;node-&gt;pid = <span class="number">0</span>;</span><br><span class="line">    proot-&gt;node-&gt;ppid = <span class="number">-1</span>;</span><br><span class="line">    proot-&gt;node-&gt;prio = <span class="number">0</span>;</span><br><span class="line">    proot-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    proot-&gt;sub = <span class="literal">NULL</span>;</span><br><span class="line">    proot-&gt;brother = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    plink = proot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令控制台</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processterminal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">short</span> cflag, pflag;</span><br><span class="line">    <span class="keyword">char</span> cmdstr[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cflag = <span class="number">0</span>;</span><br><span class="line">        pflag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cmd: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmdstr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 程序退出</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"exit"</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看进程信息</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"showdetail"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            showdetail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 帮助信息</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cmdstr, <span class="string">"help"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n=================================================\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"pid: 当前进程ID  ppid: 父进程ID  prio: 进程优先级\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"创建新进程: createpc(pid,ppid,prio)\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"查看当前进程信息: showdetail\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"获取帮助: help\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"退出: exit\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"=================================================\n\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新进程，判断createpc是否为cmdstr字串</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmdstr, <span class="string">"createpc"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> *para;</span><br><span class="line">            <span class="keyword">char</span> *s;</span><br><span class="line">            </span><br><span class="line">            cflag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取创建新进程的参数 -&gt; pid,ppid,prio</span></span><br><span class="line">            <span class="keyword">int</span> start = instr(cmdstr, <span class="string">'('</span>);</span><br><span class="line">            <span class="keyword">int</span> end = instr(cmdstr, <span class="string">')'</span>);</span><br><span class="line">            s = substr(cmdstr, start+<span class="number">1</span>, end<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">            para = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="number">3</span>);</span><br><span class="line">            para = strtoarray(s);</span><br><span class="line">            createpc(para);</span><br><span class="line"></span><br><span class="line">            pflag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入错误或参数错误</span></span><br><span class="line">        <span class="keyword">if</span> (!cflag)</span><br><span class="line">            geterror(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!pflag)</span><br><span class="line">            geterror(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    initerror();</span><br><span class="line"></span><br><span class="line">    initprocess();</span><br><span class="line"></span><br><span class="line">    processterminal();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h1><ol><li><p>编译并运行程序</p><p><code>g++ process.cpp -o process</code></p><p><img src="images/os/compile.png" alt="编译并运行"></p></li><li><p>使用<code>help</code>命令查看帮助</p><p><img src="images/os/createhelp.png" alt="help命令"></p></li><li><p>使用<code>createpc</code>命令创建进程，使用<code>showdetail</code>命令查看进程信息</p><p><img src="images/os/createpc.png" alt="创建进程"></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次实验我们模拟了一次进程的创建，在模拟创建的过程中，我们了解了进程控制块的定义，进程之间的组织方式，如何将进程添加到进程树和进程总链中。在现在的操作系统中，进程的创建还需要加载静态和计算机硬件资源，这比我们自己做的实验要复杂的多。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;操作系统系列博客的所有实验源自于课程&lt;code&gt;&amp;quot;操作系统原理与实践检验&amp;quot;&lt;/code&gt;，代码是参考老师给的&lt;code&gt;&amp;quot;软件工程专业操作系统实验指导书&amp;quot;&lt;/code&gt;文档后的改进版本。操作系统是计算机系统的核心，因此了解操作系统的设计和实现思路是必不可少的。了解操作系统的基本要求是：理解进程的概念，理解死锁，掌握银行家算法；掌握页式储存管理的实现原理以及页面置换法&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://fisher.lazybone.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hexo文章中添加本地图片</title>
    <link href="http://fisher.lazybone.xyz/hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87.html"/>
    <id>http://fisher.lazybone.xyz/hexo文章中添加本地图片.html</id>
    <published>2019-11-06T10:05:48.000Z</published>
    <updated>2019-11-06T14:35:41.368Z</updated>
    
    <content type="html"><![CDATA[<p>在写博客的过程中，我们经常需要添加一些图片。但是Hexo框架默认将<code>images</code>文件夹放在<code>source</code>文件夹目录下，与<code>_posts</code>文件夹中的推送不在同一级目录下，因此添加本地图片。生成静态网页文件之后<code>images</code>文件夹却与推送在同一级目录下。导致图片在本地编辑时能够预览，而发布之后不能预览，为了解决这一问题，我使用了文件夹的软连接功能。</p><a id="more"></a><p>首先，进入博客根目录，在<code>_posts</code>文件夹下创建一个<code>images</code>文件夹，将图片全部放到该文件夹下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span>/_posts</span><br><span class="line">mkdir images</span><br></pre></td></tr></table></figure><p>接着在<code>source</code>文件夹下创建软连接，注意文件夹目录要使用绝对路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /Users/fisher/blog/<span class="built_in">source</span>/_posts/images /Users/fisher/blog/<span class="built_in">source</span>/_posts</span><br></pre></td></tr></table></figure><p>这样子在<code>source</code>文件夹下就可以看到一个类似于快捷方式的文件夹</p><p><img src="images/blogtek/linkfolder.png" alt="images文件夹链接"></p><p>添加图片的时候，路径直接填写本地路径即可</p><p><img src="images/blogtek/localpic.png" alt="本地路径"></p><p>部署到服务器上不需要更改路径也能显示</p><p><img src="images/blogtek/onlinepic.png" alt="在线路径"></p><p>整个<code>source</code>文件夹的结构如下</p><p><img src="images/blogtek/foldertree.png" alt="文件夹结构"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写博客的过程中，我们经常需要添加一些图片。但是Hexo框架默认将&lt;code&gt;images&lt;/code&gt;文件夹放在&lt;code&gt;source&lt;/code&gt;文件夹目录下，与&lt;code&gt;_posts&lt;/code&gt;文件夹中的推送不在同一级目录下，因此添加本地图片。生成静态网页文件之后&lt;code&gt;images&lt;/code&gt;文件夹却与推送在同一级目录下。导致图片在本地编辑时能够预览，而发布之后不能预览，为了解决这一问题，我使用了文件夹的软连接功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客相关" scheme="http://fisher.lazybone.xyz/tags/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>CS:GO服务器搭建脚本</title>
    <link href="http://fisher.lazybone.xyz/cs-go%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC.html"/>
    <id>http://fisher.lazybone.xyz/cs-go服务器搭建脚本.html</id>
    <published>2019-11-06T08:20:02.000Z</published>
    <updated>2019-11-06T08:31:26.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章首发于<a href="https://www.jianshu.com/p/b2cde3ba7908" target="_blank" rel="noopener">Fisher的简书</a></p><p>在我意识到shell编程的重要性之后，我便开始想着学习shell，但是拿什么练手呢？我想到了CSGO服务器的搭建，于是这个一键安装CSGO服务器的脚本就诞生了</p><h1 id="前期的准备"><a href="#前期的准备" class="headerlink" title="前期的准备"></a>前期的准备</h1><p><strong>首先我们需要获取steam服务器的登录令牌。没有该令牌的服务器只能在本地网络中进行连接，在社区服务器浏览器中也不会显示</strong></p><a id="more"></a><p>在之前<a href="https://www.jianshu.com/p/b2cde3ba7908" target="_blank" rel="noopener">基于Centos7.X的CS:GO私人服务器搭建</a>中的<code>“三.配置并运行CS:GO服务端”</code>里面已经有关于如何获取steam服务器登录令牌的教程，这里就不多做说明了</p><p><strong>开放云服务器的UDP 27015端口</strong></p><p>在之前的搭建教程中的<code>“三. 配置并运行CS:GO服务端”</code>已有相关的教程，这里也不多说了</p><h1 id="获取一键安装脚本"><a href="#获取一键安装脚本" class="headerlink" title="获取一键安装脚本"></a>获取一键安装脚本</h1><p><strong>使用wget下载csgo.sh文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/FisherWY/Shell/releases/download/0.2/csgo.sh</span><br></pre></td></tr></table></figure><p>如果没有安装wget，执行以下命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install wget</span><br></pre></td></tr></table></figure></p><p><strong>运行csgo.sh注意事项</strong></p><p>为csgo.sh添加可运行权限：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x csgo.sh</span><br></pre></td></tr></table></figure></p><p>运行脚本：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./csgo.sh</span><br></pre></td></tr></table></figure></p><h1 id="安装过程以及注意事项"><a href="#安装过程以及注意事项" class="headerlink" title="安装过程以及注意事项"></a>安装过程以及注意事项</h1><p><strong>脚本会自动检查是否用户是否为root，以及系统版本是否兼容。如果没有root，请切换用户</strong></p><p><img src="images/csgo/shell/pic1.png" alt="安装前的检查"></p><p><strong>输入管理steamcmd的用户名称和steamcmd文件夹名称，如不想修改直接回车就行</strong></p><p><img src="images/csgo/shell/pic3.png" alt="设置用户名和steamcmd文件夹名"></p><p><strong>输入CSGO服务器端文件夹名称，如不想修改直接回车</strong></p><p><img src="images/csgo/shell/pic4.png" alt="设置csgo文件夹名称"></p><p><strong>回车开始安装CSGO服务器，这需要一段时间。这速度取决于网速，我的是20分钟左右</strong></p><p><img src="images/csgo/shell/pic5.png" alt="更新steamcmd中"></p><p><img src="images/csgo/shell/pic6.png" alt="安装CSGO服务器中"></p><p><strong>设置CSGO服务器参数，需要设置的是：CSGO服务器名称，RCON密码，房间密码，steam登录令牌。如果不填留空，这些稍后都可以自行配置</strong></p><p><img src="images/csgo/shell/pic7.png" alt="设置服务器参数"></p><p><strong>安装MetaMod和SourceMod插件，如果需要安装插件的话输入”y”，不需要的话”n”即可</strong></p><p><img src="images/csgo/shell/pic8.png" alt="安装Mod插件"></p><p><strong>安装完成，输出安装信息，需要的可以记下来</strong></p><p><img src="images/csgo/shell/pic9.png" alt="安装信息"></p><p><strong>授权新安装的文件给新用户。由于CSGO服务器的所有文件都属于root，在切换用户后运行服务器会提示权限不足。因此我们需要把新的文件授权给新用户</strong></p><p>先切换到新用户的根目录下，我的新用户是”steam”，因此根目录是”/home/steam/“<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/steam/</span><br><span class="line">chown -R steam:steam *</span><br></pre></td></tr></table></figure></p><p><img src="images/csgo/shell/pic13.png" alt="授权给新用户"></p><p><strong>screen打开新窗口，切换到steam用户，启动服务器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen -S csgo</span><br><span class="line"><span class="built_in">cd</span> /home/steam/csgo_server</span><br><span class="line">./srcds_run -debug -game csgo -console -port 27015 -usercon -steamcmd_script /home/steam/steamcmd/update.txt -steam_dir /home/steam/ +map de_mirage</span><br></pre></td></tr></table></figure><p>在看到如下图的提示后，即可关闭窗口，在游戏中连接服务器了<br><img src="images/csgo/shell/pic12.png" alt="服务器启动"></p><h1 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h1><ol><li>关于如何更新CSGO服务器，steamcmd中已有一键脚本，直接执行即可</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/steam/steamcmd/</span><br><span class="line">./steamcmd.sh +runscript update_csgo.txt</span><br></pre></td></tr></table></figure><ol><li>关于如何使用创意工坊地图，在之前<a href="https://www.jianshu.com/p/b2cde3ba7908" target="_blank" rel="noopener">基于Centos7.X的CS:GO私人服务器搭建</a>中的<code>“五. 使用社区地图”</code>已有相关教程，这里就不多说了</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章首发于&lt;a href=&quot;https://www.jianshu.com/p/b2cde3ba7908&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fisher的简书&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在我意识到shell编程的重要性之后，我便开始想着学习shell，但是拿什么练手呢？我想到了CSGO服务器的搭建，于是这个一键安装CSGO服务器的脚本就诞生了&lt;/p&gt;&lt;h1 id=&quot;前期的准备&quot;&gt;&lt;a href=&quot;#前期的准备&quot; class=&quot;headerlink&quot; title=&quot;前期的准备&quot;&gt;&lt;/a&gt;前期的准备&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;首先我们需要获取steam服务器的登录令牌。没有该令牌的服务器只能在本地网络中进行连接，在社区服务器浏览器中也不会显示&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://fisher.lazybone.xyz/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="服务器配置" scheme="http://fisher.lazybone.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>CS:GO私人服务器搭建</title>
    <link href="http://fisher.lazybone.xyz/cs-go%E7%A7%81%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA.html"/>
    <id>http://fisher.lazybone.xyz/cs-go私人服务器搭建.html</id>
    <published>2019-11-06T07:39:00.000Z</published>
    <updated>2019-11-06T08:16:33.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章首发于<a href="https://www.jianshu.com/p/b2cde3ba7908" target="_blank" rel="noopener">Fisher的简书</a></p><p>最近比较喜欢和同学玩创意工坊地图，但是和同学不在同一个局域网。任何一个人的电脑做主机延迟和loss都非常的高，玩起来体验非常的差。正好阿里云的服务器可以以每月9.5元的学生价搞到一台云服务器，因此我便开始研究如何搭建私人的CS:GO服务器。在参考了<a href="https://wilfoo.com/?p=92https://wilfoo.com/?p=92" target="_blank" rel="noopener">Wilf的博客</a>之后，我成功地搭建了自己的游戏服务器，在此十分感谢Wilf！</p><a id="more"></a><p><strong>下面正式开始服务器搭建</strong></p><h1 id="创建新用户，安装steamcmd，安装CS-GO服务端"><a href="#创建新用户，安装steamcmd，安装CS-GO服务端" class="headerlink" title="创建新用户，安装steamcmd，安装CS:GO服务端"></a>创建新用户，安装steamcmd，安装CS:GO服务端</h1><p>使用ssh以root用户身份登录到服务器，创建名为<strong>steam</strong>的用户，并切换到该用户和该用户的根目录下（用户名可以自行选择，但在后续的操作中，路径需要进行替换）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m steam    <span class="comment"># 添加名为steam的用户</span></span><br><span class="line">su steam    <span class="comment"># 切换到steam用户</span></span><br><span class="line"><span class="built_in">cd</span> /home/steam/    <span class="comment"># 切换到steam用户的根目录下</span></span><br></pre></td></tr></table></figure><p>创建名为steamcmd的文件夹，下载steamcmd并解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir steamcmd    <span class="comment"># 创建名为steamcmd的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> steamcmd/    <span class="comment"># 切换到文件夹目录下</span></span><br><span class="line">wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz    <span class="comment"># 下载steamcmd</span></span><br><span class="line">tar zxvf steamcmd_linux.tar.gz    <span class="comment"># 解压steamcmd</span></span><br><span class="line">rm steamcmd_linux.tar.gz    <span class="comment"># 删除下载的安装包，也可以保留</span></span><br></pre></td></tr></table></figure><p>安装运行steamcmd所需的环境，运行steamcmd并安装CS:GO服务端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install glibc.i686    <span class="comment"># 安装steamcmd运行所需的库</span></span><br><span class="line">sudo yum install libstdc++.i686    <span class="comment"># 有的主机已经安装其他发行版本的依赖库，不用重复安装</span></span><br><span class="line">./steamcmd.sh</span><br></pre></td></tr></table></figure><p><strong>在操作无误的情况下，看到下面的命令行之后，steamcmd就安装完成了</strong><br><img src="images/csgo/server/steamcmd.png" alt="steamcmd成功安装"><br><strong>接下来便是在steamcmd中安装CS:GO</strong></p><p>以匿名用户身份登录steamcmd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login anonymous</span><br></pre></td></tr></table></figure><p>创建CS:GO服务器文件夹，该文件夹在steamcmd文件夹目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">force_install_dir ./csgo_server</span><br></pre></td></tr></table></figure><p>安装csgo服务端（15分钟左右）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_update 740 validate</span><br></pre></td></tr></table></figure><p><strong>在看到如下图片中最后的行的”Success!”后，表明CS:GO服务端安装成功（此处使用了更新成功的图片，但同样是”Success!”字样）</strong><br><img src="images/csgo/server/install.png" alt="安装（更新）成功"></p><p>安装完成后，退出steamcmd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h1 id="编写CS-GO更新脚本（可选）"><a href="#编写CS-GO更新脚本（可选）" class="headerlink" title="编写CS:GO更新脚本（可选）"></a>编写CS:GO更新脚本（可选）</h1><p>更新脚本主要用于一键更新游戏服务器，从而避免每次都要手动输入更新命令的麻烦</p><p>编写steamcmd的runscript脚本</p><p><em>在steamcmd目录下（退出steamcmd.sh后的当前目录），创建新的<code>update.txt</code>文件</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi update.txt</span><br></pre></td></tr></table></figure><p>进入编辑模式，写入以下语句，然后保存退出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">login anonymous</span><br><span class="line">force_install_dir ./csgo_server</span><br><span class="line">app_update 740</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>编写steamcmd运行脚本</p><p><em>在steamcmd目录下，使用vim创建新的<code>csgo_server_update.sh</code>文件</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi csgo_server_update.sh</span><br></pre></td></tr></table></figure><p>进入编辑模式，写入以下语句后保存退出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">./steamcmd.sh +runscript update.txt</span><br></pre></td></tr></table></figure><p>测试脚本</p><p><em>在steamcmd目录下运行脚本csgo_server_update.sh</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./csgo_server_update.sh</span><br></pre></td></tr></table></figure></p><p><em>若运行结果如下所示，则更新脚本编写完成，以后可以直接使用该命令一键更新CS:GO服务器</em><br><img src="images/csgo/server/update.png" alt="CS:GO更新脚本"></p><p>出现了权限不足的情况，提升权限再次运行即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 775 csgo_server_update.sh</span><br></pre></td></tr></table></figure><h1 id="配置并运行CS-GO服务端"><a href="#配置并运行CS-GO服务端" class="headerlink" title="配置并运行CS:GO服务端"></a>配置并运行CS:GO服务端</h1><p>前往<a href="https://steamcommunity.com/dev/managegameservers" target="_blank" rel="noopener">Steam游戏服务器帐户管理</a>注册steam服务器登录令牌。没有该令牌服务器只能在本地网络中进行连接，在社区服务器浏览器中也不会显示。（网站可能无法连接，推荐使用Steamcommunity 302工具修复连接问题）</p><p><strong>在App ID中填入CS:GO的ID：730。备忘录中填入：CSGO服务端令牌（选填）</strong><br><img src="images/csgo/server/sv_authkey.png" alt="填写App ID"><br><strong>点击创建之后便获得了登录令牌，不要将该令牌泄露出去，该令牌用于服务器在CS:GO社区服务器中验证</strong></p><p>下载服务器配置文件server.cfg</p><p><em>切换目录到CS:GO的cfg文件夹下，下载server.cfg文件，编辑server.cfg文件</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> csgo_server/csgo/cfg/</span><br><span class="line">wget http://www.csgodev.com/downloads/server.cfg</span><br><span class="line">vi server.cfg</span><br></pre></td></tr></table></figure></p><p><em>进入编辑模式，在server.cfg文件中添加登录令牌，修改部分参数（这部分一定要改，不然很影响游戏体验！）</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 新增以下参数：</span><br><span class="line">// steam account，修改为自己刚刚申请的登陆令牌</span><br><span class="line">sv_setsteamaccount <span class="string">"4FXXXXXXXXXXXXXXXXXXXXXXXXX"</span></span><br><span class="line"></span><br><span class="line">// 找到并修改以下参数：</span><br><span class="line">// 服务器名称，安全方面</span><br><span class="line">hostname <span class="string">"Fisher's server"</span>    // 服务器在社区服务器浏览器上显示的名称，自行修改为喜欢的名字</span><br><span class="line">rcon_password <span class="string">"12345678"</span>    // CS:GO远程控制台密码，修改为自己定义的密码</span><br><span class="line">sv_password <span class="string">"87654321"</span>    // 服务器连接密码，在连接服务器时输入，不要密码可以留空</span><br><span class="line">// 游戏参数方面</span><br><span class="line">sv_maxrate <span class="string">"128000"</span>    // 服务器最大带宽使用量，默认值非常小，因此会造成choke值异常，此处建议改为128000</span><br><span class="line">sv_minrate <span class="string">"80000"</span>    // 服务器最小带宽使用量，与上面同理，此处建议改为80000</span><br><span class="line">sv_accelerate <span class="string">"5.5"</span>    // 人物移动速度，默认值为10，快到恶心，此处建议修改为5.5</span><br></pre></td></tr></table></figure></p><p><em>最关键的参数在下图已经用红笔圈出来了</em><br><img src="images/csgo/server/server_cfg.png" alt="服务器配置"><br><strong>修改完以上参数之后，服务器便可以启动了，关于server.cfg中的其他参数说明，可以在server.cfg文件的注释中查看，也可以前往<a href="http://csgodev.com/csgodev-server-cfg-for-csgo/" target="_blank" rel="noopener">CSGODev</a>查看</strong></p><p>开放UDP 27015端口</p><p><strong>前往阿里云服务器防火墙控制面板，添加防火墙规则</strong><br><img src="images/csgo/server/port.png" alt="开放端口"></p><p>安装screen，启动CS:GO服务器</p><p><em>安装screen，以便CS:GO服务进程在后台运行</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo install screen</span><br></pre></td></tr></table></figure></p><p><em>返回csgo_server目录，使用screen创建新的会话</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/steam/steamcmd/csgo_server/</span><br><span class="line">screen -S csgo</span><br></pre></td></tr></table></figure></p><p><strong>注意：当screen会话未结束时，在下次ssh登陆时可以使用命令”screen -r csgo”来恢复会话</strong><br><em>此时屏幕会清屏，说明你成功进入到”csgo”这个会话当中，这时开始启动服务器</em><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./srcds_run -debug -game csgo -console -port 27015 -steamcmd_script /home/steam/steamcmd/update.txt -steam_dir /home/steam/ +map de_dust2</span><br></pre></td></tr></table></figure></p><p><strong>若系统提示没有srcds_run这个文件，则是你当前的文件夹目录不正确</strong></p><blockquote><p><strong>参数解释：</strong><br>-debug <strong>开启调试模式</strong><br>-game <strong>指明游戏，此处是csgo</strong><br>-console <strong>打开游戏控制台</strong><br>-port <strong>游戏服务器端口，此处是27015</strong><br>-steamcmd_script <strong>运行steamcmd的脚本文件地址</strong><br>-steam_dir <strong>Steam的安装地址</strong><br>+map <strong>服务器加载的地图（此处只能用官方地图，创意工坊地图请看后面）</strong></p></blockquote><p><strong>当看到如下图所示的界面之后，说明服务器成功地运行，可以在游戏中连接了</strong><br><img src="images/csgo/server/server_start.png" alt="服务器启动成功"><br><strong>记下红圈中的服务器IP地址，稍后连接使用</strong></p><h1 id="在游戏中连接服务器"><a href="#在游戏中连接服务器" class="headerlink" title="在游戏中连接服务器"></a>在游戏中连接服务器</h1><p>由于国服的社区服务器浏览器和世界服的不一样，世界服现在也免费了，因此目前我们使用世界服进行连接。（关于如何切换到世界服，请自行百度）</p><p>打开社区服务器浏览器，点击“收藏夹选项卡”，输入服务器IP地址，点击“在此地址上查找游戏”，然后选择找到的服务器，点击“将选定游戏服务器添加至收藏夹”</p><p><img src="images/csgo/server/search.png" alt="服务器搜索与添加"></p><p>连接服务器，双击收藏夹中刚刚添加的服务器，输入密码即可，注意输入法</p><p><img src="images/csgo/server/join.png" alt="加入服务器"></p><p>Enjoy！</p><p><em>PS：实测4人在64tick情况下，loss和choke基本为0%，延迟稳定在25ms左右</em><br><img src="images/csgo/server/enjoy.png" alt="连接延迟"></p><h1 id="使用社区地图"><a href="#使用社区地图" class="headerlink" title="使用社区地图"></a>使用社区地图</h1><p>注册Steam网页API</p><p><em>前往<a href="https://steamcommunity.com/dev/apikey" target="_blank" rel="noopener">Steam网页API注册</a>页面注册API，获得Authkey（注意不要泄露出去）</em><br><img src="images/csgo/server/authkey.png" alt="获得Authkey"></p><p>获取创意工坊地图ID</p><p><em>在steam的创意工坊中打开自己想要的地图的页面，复制浏览器地址上的ID。比如说，aim_map_c的地图ID是465367694</em><br><img src="images/csgo/server/map_id.png" alt="获取地图ID"></p><p>启动服务器</p><p><em>在csgo_server文件夹中输入命令</em><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/srcds_run -debug -game csgo -console -port 27015 -steamcmd_script /</span>home<span class="regexp">/steam/</span>steamcmd<span class="regexp">/update.txt -steam_dir /</span>home<span class="regexp">/steam/</span> +host_workshop_map <span class="number">465367694</span> -authkey <span class="number">3</span>XXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure></p><blockquote><p>相同的参数在之前有解释，这里只解释新的参数：<br>+host_workshop_map 465367694 <strong>切换地图为来自创意工坊的地图，后面的数字填入刚刚获取的地图ID</strong><br>-authkey 3XXXXXXXXXX <strong>Steam网页API的Authkey，填入刚刚获取的API Authkey</strong></p></blockquote><p><em>若看到以下Log，则表示服务器切换到创意工坊的地图成功</em><br><img src="images/csgo/server/workshop_map.png" alt="服务器成功切换到创意工坊地图"><br><em>按照上面的步骤再次连接服务器，就会发现服务器地图切换为创意工坊的地图了，Enjoy！</em></p><p>更换地图</p><p><em>如果不想通过重启服务器的方法来更换地图，可以在服务器控制台中输入以下命令：</em></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">changelevel XXXX    <span class="comment">// XXXX可以是创意工坊地图ID，也可以是官方地图名字</span></span><br></pre></td></tr></table></figure><p><img src="images/csgo/server/change_map.png" alt="服务器后台直接更换地图"></p><p>更多</p><p><em>更多关于创意工坊地图的命令，可以参考官方给出的文档：<a href="https://developer.valvesoftware.com/wiki/CSGO_Workshop_For_Server_Operators" target="_blank" rel="noopener">CSGO_Workshop_For_Server_Operators</a></em></p><h1 id="添加Mod和插件"><a href="#添加Mod和插件" class="headerlink" title="添加Mod和插件"></a>添加Mod和插件</h1><p><em>因为我只和同学玩玩普通的创意工坊地图，不需要打Mod，因此这里我并没有做更多的研究。在此引用Wilf博客中的教程，有兴趣的人可以去研究一下</em></p><blockquote><p>常用插件为sourcemod和metamod，装了这俩之后才能装满十，kz，僵尸等等插件。<br>其它有用的插件比如warmod等等可以在x社区找到，安装方法一般是放在cfg以及addon文件夹内，使用方法在插件原文里说明的也比较详细，这里给出网址不赘述了。<br><a href="https://www.sourcemod.net/" target="_blank" rel="noopener">https://www.sourcemod.net</a><br><a href="https://www.metamodsource.net/" target="_blank" rel="noopener">https://www.metamodsource.net</a><br><a href="https://bbs.93x.net/" target="_blank" rel="noopener">https://bbs.93x.net</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></blockquote><p>至此，CS:GO私人服务器的搭建就完成了，可以与同学愉快地玩耍了。要想让服务器在后台继续运行，直接断开ssh连接即可。在下次ssh连接登录后，想要恢复之前的screen会话，输入以下命令即可：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">screen -r csgo</span></span><br></pre></td></tr></table></figure><p>教程中用到网址汇总</p><table><thead><tr><th style="text-align:center">网址</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://wilfoo.com/?p=92https://wilfoo.com/?p=92" target="_blank" rel="noopener">https://wilfoo.com/?p=92https://wilfoo.com/?p=92</a></td><td style="text-align:center">Wilf的博客</td></tr><tr><td style="text-align:center"><a href="https://steamcommunity.com/dev/managegameservers" target="_blank" rel="noopener">https://steamcommunity.com/dev/managegameservers</a></td><td style="text-align:center">Steam 游戏服务器帐户管理</td></tr><tr><td style="text-align:center"><a href="http://csgodev.com/csgodev-server-cfg-for-csgo/" target="_blank" rel="noopener">http://csgodev.com/csgodev-server-cfg-for-csgo/</a></td><td style="text-align:center">CS:GO配置文件来源</td></tr><tr><td style="text-align:center"><a href="https://steamcommunity.com/dev/apikey" target="_blank" rel="noopener">https://steamcommunity.com/dev/apikey</a></td><td style="text-align:center">Steam网页API注册</td></tr><tr><td style="text-align:center"><a href="https://developer.valvesoftware.com/wiki/CSGO_Workshop_For_Server_Operators" target="_blank" rel="noopener">https://developer.valvesoftware.com/wiki/CSGO_Workshop_For_Server_Operators</a></td><td style="text-align:center">创意工坊地图操作手册</td></tr><tr><td style="text-align:center"><a href="https://www.sourcemod.net/" target="_blank" rel="noopener">https://www.sourcemod.net</a></td><td style="text-align:center">Mod插件</td></tr><tr><td style="text-align:center"><a href="https://www.metamodsource.net/" target="_blank" rel="noopener">https://www.metamodsource.net</a></td><td style="text-align:center">Mod插件</td></tr><tr><td style="text-align:center"><a href="https://bbs.93x.net/" target="_blank" rel="noopener">https://bbs.93x.net</a></td><td style="text-align:center">Mod插件</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章首发于&lt;a href=&quot;https://www.jianshu.com/p/b2cde3ba7908&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fisher的简书&lt;/a&gt;&lt;/p&gt;&lt;p&gt;最近比较喜欢和同学玩创意工坊地图，但是和同学不在同一个局域网。任何一个人的电脑做主机延迟和loss都非常的高，玩起来体验非常的差。正好阿里云的服务器可以以每月9.5元的学生价搞到一台云服务器，因此我便开始研究如何搭建私人的CS:GO服务器。在参考了&lt;a href=&quot;https://wilfoo.com/?p=92https://wilfoo.com/?p=92&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wilf的博客&lt;/a&gt;之后，我成功地搭建了自己的游戏服务器，在此十分感谢Wilf！&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://fisher.lazybone.xyz/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="服务器配置" scheme="http://fisher.lazybone.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>VMware装OpenWrt</title>
    <link href="http://fisher.lazybone.xyz/vmware%E8%A3%85openwrt.html"/>
    <id>http://fisher.lazybone.xyz/vmware装openwrt.html</id>
    <published>2019-11-04T12:27:24.000Z</published>
    <updated>2019-11-04T14:31:41.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>在没有设备的情况下，VMware虚拟机就是检验编译成果和学习的最好工具，这篇博客记录了我是如何根据<a href="https://openwrt.org/docs/guide-user/virtualization/vmware" target="_blank" rel="noopener">官方文档</a>配置虚拟机的</p><h2 id="自行编译"><a href="#自行编译" class="headerlink" title="自行编译"></a>自行编译</h2><p>如果自己编译的时候在<code>Target Images</code>中勾选了<code>Build VMware images files</code>后，那么在编译输出的文件夹中就能够直接找到<code>vmdk</code>格式的文件，可以直接跳过前期准备</p><a id="more"></a><h2 id="使用img镜像转换"><a href="#使用img镜像转换" class="headerlink" title="使用img镜像转换"></a>使用img镜像转换</h2><p>首先安装依赖，我使用的是Ubuntu 19.04</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-img</span><br></pre></td></tr></table></figure><p>然后从OpenWrt官网上下载镜像文件并解压，这里下载的是<code>openwrt-18.06.4-x86-64-combined-ext4.img.gz</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.openwrt.org/releases/18.06.4/targets/x86/64/openwrt-18.06.4-x86-64-combined-ext4.img.gz</span><br><span class="line">gunzip openwrt-18.06.4-x86-64-combined-ext4.img.gz</span><br></pre></td></tr></table></figure><p>使用<code>qemu-img</code>将img固件转换为vmdk格式的虚拟机硬盘文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f raw -O vmdk openwrt-18.06.4-x86-64-combined-ext4.img openwrt-18.06.4-x86-64-combined-ext4.vmdk</span><br></pre></td></tr></table></figure><h1 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><p>接下来就是创建一个空白的虚拟机，将vmdk文件添加到该空白虚拟机中</p><ol><li><p>文件-&gt;新建虚拟机，选择自定义</p><p><img src="images/router/Openwrt_VM1.png" alt="第一步"></p></li><li><p>虚拟机硬件兼容性直接默认就好</p><p><img src="images/router/Openwrt_VM2.png" alt="第二步"></p></li><li><p>选择稍后安装操作系统</p><p><img src="images/router/Openwrt_VM3.png" alt="第三步"></p></li><li><p>OpenWrt18使用的是Linux4.x的内核，因此操作系统类型选择<code>其他 Linux 4.x</code></p><p><img src="images/router/Openwrt_VM4.png" alt="第四步"></p></li><li><p>虚拟机的名字，自己起一个喜欢的</p><p><img src="images/router/Openwrt_VM5.png" alt="第五步"></p></li><li><p>分配处理器，1个处理器1个内核就够了</p><p><img src="images/router/Openwrt_VM6.png" alt="第六步"></p></li><li><p>分配内存，256MB就够了</p><p><img src="images/router/Openwrt_VM7.png" alt="第七步"></p></li><li><p>虚拟机的网络连接类型，根据情况选择，我使用的是桥接网络</p><p><img src="images/router/Openwrt_VM8.png" alt="第八步"></p></li><li><p>I/O控制器类型选择<code>LSI Logic</code></p><p><img src="images/router/Openwrt_VM9.png" alt="第九步"></p></li><li><p>虚拟磁盘类型选择<code>SCSI</code></p><p><img src="images/router/Openwrt_VM10.png" alt="第十步"></p></li><li><p>选择磁盘的时候，点击<code>使用现有虚拟磁盘</code>，然后选择刚刚转换的vmdk文件。如果提示说可以转换为格式较新的虚拟磁盘，选择保持当前磁盘格式</p><p><img src="images/router/Openwrt_VM11.png" alt="第十一步1"></p><p><img src="images/router/Openwrt_VM11_1.png" alt="第十一步2"></p></li><li><p>打开虚拟机所在位置，找到<code>xxx.vmx</code>文件，使用文本编辑器打开，在最后一句加上<code>ethernet0.virtualDev = &quot;e1000&quot;</code>，保存文件</p><p>这条语句将虚拟机的虚拟网卡类型设置为Intel e1000，Openwrt能够将其识别出来，如果想使用其他虚拟网卡类型，可以在编译配置的时候在<code>Kernel modules -&gt; Network Devices</code>中勾选其他网卡驱动</p><p><img src="images/router/Openwrt_VM12.png" alt="第十二步"></p></li></ol><h1 id="启动虚拟机，配置网络"><a href="#启动虚拟机，配置网络" class="headerlink" title="启动虚拟机，配置网络"></a>启动虚拟机，配置网络</h1><p>启动虚拟机，屏幕上是不会显示命令行的，看到屏幕的日志不再滚动之后按回车就可以进入命令行了</p><p><img src="images/router/Openwrt_Start.png" alt="开机界面"></p><p>因为Openwrt默认的lan配置是只限于虚拟机本地网络的，因此还不能使用浏览器打开LuCi管理界面。需要修改一下lan网络配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/config/network</span><br></pre></td></tr></table></figure><p>如果网络中的路由器有DHCP服务器，则将<code>interface &#39;lan&#39;</code>改成如下所示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config interface <span class="string">'lan'</span></span><br><span class="line">    option <span class="built_in">type</span> <span class="string">'bridge'</span></span><br><span class="line">    option ifname <span class="string">'eth0'</span></span><br><span class="line">    option proto <span class="string">'dhcp'</span></span><br></pre></td></tr></table></figure><p>如果网络中的路由器没有DHCP服务器，则自行指定：IP地址、子网掩码、默认网关、DNS服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config interface <span class="string">'lan'</span></span><br><span class="line">    option <span class="built_in">type</span> <span class="string">'bridge'</span></span><br><span class="line">    option ifname <span class="string">'eth0'</span></span><br><span class="line">    option proto <span class="string">'static'</span></span><br><span class="line">    option ipaddr <span class="string">'192.168.1.11'</span><span class="comment">#自行指定</span></span><br><span class="line">    option netmask <span class="string">'255.255.255.0'</span> <span class="comment">#自行指定</span></span><br><span class="line">    option ip6assign <span class="string">'60'</span></span><br><span class="line">    option gateway <span class="string">'192.168.1.1'</span><span class="comment">#自行指定</span></span><br><span class="line">    option dns <span class="string">'192.168.1.1'</span><span class="comment">#自行指定</span></span><br></pre></td></tr></table></figure><p>重启网络服务，查看是否获得IP地址，有IP地址就表示配置成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br><span class="line">ifconfig br-lan</span><br></pre></td></tr></table></figure><p><img src="images/router/Openwrt_Net.png" alt="网络配置"></p><h1 id="登录LuCi"><a href="#登录LuCi" class="headerlink" title="登录LuCi"></a>登录LuCi</h1><p>在网络配置好之后，就可以打开浏览器，使用LuCi对路由器进行管理配置了。第一次登录的时候，Openwrt会要求设置root密码</p><p><img src="images/router/Openwrt_LuCi.png" alt="LuCi"></p><p>之后就可以愉快地玩耍了😁</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h1&gt;&lt;p&gt;在没有设备的情况下，VMware虚拟机就是检验编译成果和学习的最好工具，这篇博客记录了我是如何根据&lt;a href=&quot;https://openwrt.org/docs/guide-user/virtualization/vmware&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;配置虚拟机的&lt;/p&gt;&lt;h2 id=&quot;自行编译&quot;&gt;&lt;a href=&quot;#自行编译&quot; class=&quot;headerlink&quot; title=&quot;自行编译&quot;&gt;&lt;/a&gt;自行编译&lt;/h2&gt;&lt;p&gt;如果自己编译的时候在&lt;code&gt;Target Images&lt;/code&gt;中勾选了&lt;code&gt;Build VMware images files&lt;/code&gt;后，那么在编译输出的文件夹中就能够直接找到&lt;code&gt;vmdk&lt;/code&gt;格式的文件，可以直接跳过前期准备&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://fisher.lazybone.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://fisher.lazybone.xyz/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt编译</title>
    <link href="http://fisher.lazybone.xyz/openwrt%E7%BC%96%E8%AF%91.html"/>
    <id>http://fisher.lazybone.xyz/openwrt编译.html</id>
    <published>2019-11-03T14:12:18.000Z</published>
    <updated>2019-11-04T14:19:35.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>“你们为什么不自己去尝试编译一个OpenWrt研究一下呢？”</p><p>在操作系统课上，刘刚不止一次讲了这句话了。其实我之前给路由器刷过OpenWrt固件，但是编译还真没试过。恰好我对此也有兴趣，于是说干就干，自己编译一个OpenWrt固件！</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>系统环境：Ubuntu 19.04 64-bit</p><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install subversion g++ zlib1g-dev build-essential git python python3</span><br><span class="line">sudo apt install libncurses5-dev gawk gettext unzip file libssl-dev wget</span><br><span class="line">sudo apt install libelf-dev ecj fastjar java-propose-classpath</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="获取OpenWrt源码"><a href="#获取OpenWrt源码" class="headerlink" title="获取OpenWrt源码"></a>获取OpenWrt源码</h1><p>OpenWrt官方也有一个Git仓库，但是国内的网络使用比较慢，因此我们使用GitHub上来自官方的镜像仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openwrt/openwrt.git</span><br></pre></td></tr></table></figure><p>之后需要更新源码的时候，只需要使用Git的命令即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p><img src="images/router/Openwrt_Git.png" alt="更新源码"></p><h1 id="更新依赖包"><a href="#更新依赖包" class="headerlink" title="更新依赖包"></a>更新依赖包</h1><p>在每次编译之前我们需要将依赖包更新一下，以保证编译到固件中的软件包是最新版的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> openwrt</span><br><span class="line"></span><br><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure><p><img src="images/router/Openwrt_FeedsUpdate.png" alt="更新依赖包"></p><p><img src="images/router/Openwrt_FeedsInstall.png" alt="安装依赖包"></p><h1 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h1><p>在正式编译之前，我们需要修改编译的配置文件，以指定编译的目标平台、架构、需要的系统软件包、固件的格式。在OpenWrt的编译配置中，我们使用图形化的编译配置<code>make menuconfig</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>此时终端会出现一个如下图的界面</p><p><img src="images/router/Openwrt_Menuconfig.png" alt="编译配置"></p><p>在这个界面就可以配置出自己想要的固件，我的配置如下：</p><ul><li>Target System =&gt; x86    (目标系统架构)</li><li>Subtarget =&gt; x86_64    (目标CPU类型)</li><li>Target Profile =&gt; Generic x86/64    (目标设备)</li></ul><p>剩下的配置就是<strong>编译出的固件格式</strong>，<strong>系统环境依赖包</strong>，<strong>LuCi依赖包</strong>等等。可以根据自己的需要灵活选择。在选择完成之后保存配置文件，就可以开始编译了</p><h1 id="正式编译"><a href="#正式编译" class="headerlink" title="正式编译"></a>正式编译</h1><p>第一次编译的时候，Openwrt并不推荐使用多线程编译，因为编译过程中需要下载比较多的软件包。因此第一次编译我只添加了输出编译日志的参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make V=99</span><br></pre></td></tr></table></figure><p>第一次编译完成之后，在以后的编译中就可以使用多线程编译了，具体线程数需要看CPU的核心数。因为使用的进程数量是<code>-j</code>参数中的数字+1，而我给虚拟机分配的CPU核心数有4个，因此我的参数是<code>-j3</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j3 V=99</span><br></pre></td></tr></table></figure><p>在网络通畅的情况下，第一次编译需要的时间比较长，我用了一个下午😂。后面加入多线程编译后只需要20分钟就编译完了</p><p><img src="images/router/Openwrt_Make1.png" alt="编译1"></p><p><img src="images/router/Openwrt_Make2.png" alt="编译2"></p><p>编译完成后的固件在文件夹中的<code>bin/target</code>中，编译好的依赖包在<code>bin/packages</code>中，以后可以做一个镜像站代替官方的opkg依赖源</p><p><img src="images/router/Openwrt_Makeup.png" alt="编译完成"></p><p>需要重新编译的时候，先进行<code>make clean</code>清理之前编译好的固件，再执行<code>make</code>重新编译</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;“你们为什么不自己去尝试编译一个OpenWrt研究一下呢？”&lt;/p&gt;&lt;p&gt;在操作系统课上，刘刚不止一次讲了这句话了。其实我之前给路由器刷过OpenWrt固件，但是编译还真没试过。恰好我对此也有兴趣，于是说干就干，自己编译一个OpenWrt固件！&lt;/p&gt;&lt;h1 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h1&gt;&lt;p&gt;系统环境：Ubuntu 19.04 64-bit&lt;/p&gt;&lt;p&gt;安装依赖&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install subversion g++ zlib1g-dev build-essential git python python3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install libncurses5-dev gawk gettext unzip file libssl-dev wget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install libelf-dev ecj fastjar java-propose-classpath&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://fisher.lazybone.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://fisher.lazybone.xyz/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>小程序获取QQ音乐播放链接插件</title>
    <link href="http://fisher.lazybone.xyz/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%8E%B7%E5%8F%96qq%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E9%93%BE%E6%8E%A5%E6%8F%92%E4%BB%B6.html"/>
    <id>http://fisher.lazybone.xyz/小程序获取qq音乐播放链接插件.html</id>
    <published>2019-11-03T08:27:15.000Z</published>
    <updated>2019-11-04T04:45:54.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近参加了一个微信小程序开发大赛，其中用到了音乐播放功能。于是在小程序官方文档和插件库中逛了一圈，但是官方没有提供对QQ音乐的搜索和获取播放链接等支持，插件库中的插件寥寥无几，并不好用。无奈之下只好自己写一个关于QQ音乐的插件，来完成相应的搜索，获取播放链接等功能。</p><p>在开始介绍插件功能之前，特别感谢<a href="https://www.jianshu.com/p/67e4bd47d981" target="_blank" rel="noopener">简书tisa</a>提供了QQ音乐相应的api。这个插件就是基于这些api进行的封装。</p><a id="more"></a><blockquote><p>插件项目地址：<a href="https://github.com/FisherWY/QQMusicPlugin" target="_blank" rel="noopener">https://github.com/FisherWY/QQMusicPlugin</a></p></blockquote><p><strong>下面正式开始介绍插件使用方法</strong></p><h1 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h1><p>前往<a href="https://github.com/FisherWY/QQMusicPlugin/releases" target="_blank" rel="noopener">下载页面</a>，下载最新的v0.2版本，将下载的文件解压放在小程序utils文件夹中，解压后的文件目录结构如下图所示：</p><p><img src="images/qqmusicplugin/File_Tree.png" alt="文件目录结构"></p><h1 id="添加合法Request域名"><a href="#添加合法Request域名" class="headerlink" title="添加合法Request域名"></a>添加合法Request域名</h1><p>前往微信公众平台-&gt;开发-&gt;开发设置-&gt;服务器域名。添加以下request合法域名，该域名用于音乐的搜索等</p><blockquote><p><a href="https://c.y.qq.com" target="_blank" rel="noopener">https://c.y.qq.com</a></p></blockquote><p><img src="images/qqmusicplugin/Add_Address.png" alt="添加合法域名"></p><h1 id="页面中引入插件"><a href="#页面中引入插件" class="headerlink" title="页面中引入插件"></a>页面中引入插件</h1><p>在小程序页面js文件中引用<code>qqMusicTools.js</code>，注意相对路径，这里演示的页面路径为<code>/pages/index/</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> musicTool = <span class="built_in">require</span>(<span class="string">"../../utils/QQMusicPlugin/qqMusicTools.js"</span>)</span><br></pre></td></tr></table></figure><p><img src="images/qqmusicplugin/Require.png" alt="引入插件"></p><h1 id="搜索音乐"><a href="#搜索音乐" class="headerlink" title="搜索音乐"></a>搜索音乐</h1><p>搜索音乐接口searchMusic（使用PromiseJS语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.searchMusic(<span class="number">1</span>, <span class="number">10</span>, <span class="string">"墙纸"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">searchRes</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(searchRes)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接口参数说明：</p><ul><li><p>page：搜索页码</p></li><li><p>number：每页搜索记录数量</p></li><li><p>keyword：搜索关键字</p></li></ul><p>搜索接果如下图：</p><p><img src="images/qqmusicplugin/Search_Music.png" alt="搜索音乐"></p><h1 id="播放音乐"><a href="#播放音乐" class="headerlink" title="播放音乐"></a>播放音乐</h1><p>获取播放音乐链接接口playMusic接受1个参数：<code>filename</code>。表示要播放的音乐的文件名，文件名来自searchMusic结果中的<code>songmid</code>（使用PeomiseJS语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.playMusic(<span class="string">"0021rBlZ1gQiLy"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">playRes</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(playRes)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接口参数说明：</p><ul><li>filename：要播放的音乐的文件名，文件名来自searchMusic结果中的<code>songmid</code></li></ul><p>返回结果如下图：</p><p><img src="images/qqmusicplugin/Search_Result.png" alt="获取播放链接"></p><h1 id="获取专辑图片"><a href="#获取专辑图片" class="headerlink" title="获取专辑图片"></a>获取专辑图片</h1><p>获取音乐专辑图片接口getAlbumImage（使用Promise语法）（在v0.1版本中，搜索音乐接口已经集成了该接口，专辑图片字段名为<code>albumImg</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.getAlbumImage(<span class="number">6271293</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>albumId：该参数来自searchMusic结果中的<code>albumId</code></li></ul><p>返回结果如下图：</p><p><img src="images/qqmusicplugin/Album_Image.png" alt="获取专辑图片"></p><h1 id="获取热歌榜"><a href="#获取热歌榜" class="headerlink" title="获取热歌榜"></a>获取热歌榜</h1><p>获取热门音乐榜Top100歌单接口getTopMusic不需要任何参数，直接调用即可获得返回结果（使用Promise语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.getTopMusic().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>返回结果如下图：</p><p><img src="images/qqmusicplugin/Top.png" alt="获取热歌榜"></p><h1 id="随机推荐歌单"><a href="#随机推荐歌单" class="headerlink" title="随机推荐歌单"></a>随机推荐歌单</h1><p>随机推荐歌单接口radomRecommend不需要任何参数，直接调用即可获得返回结果（使用Promise语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">musicTool.randomRecommend().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>返回结果如下图：</p><p><img src="images/qqmusicplugin/Random.png" alt="随机推荐歌单"></p><h1 id="播放音乐-1"><a href="#播放音乐-1" class="headerlink" title="播放音乐"></a>播放音乐</h1><p>播放音乐，这里使用BackgroundAudioManager演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取全局唯一的背景音乐管理器</span></span><br><span class="line"><span class="keyword">const</span> bgAudioManager = wx.getBackgroundAudioManager()</span><br><span class="line"><span class="comment">// 音乐标题</span></span><br><span class="line">bgAudioManager.title = <span class="string">'Music'</span></span><br><span class="line"><span class="comment">// 音乐歌手名</span></span><br><span class="line">bgAudioManager.singer = <span class="string">'Singer'</span></span><br><span class="line"><span class="comment">// 专辑封面图片</span></span><br><span class="line">bgAudioManager.coverImgUrl = <span class="string">'imgUrl'</span></span><br><span class="line"><span class="comment">// 音乐播放链接，设置后自动开始播放</span></span><br><span class="line">bgAudioManager.src = playRes</span><br></pre></td></tr></table></figure><h1 id="整体使用流程"><a href="#整体使用流程" class="headerlink" title="整体使用流程"></a>整体使用流程</h1><p>代码整合到一块，整个使用流程如下（需要注意异步问题）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bgAudioManager = wx.getBackgroundAudioManager();</span><br><span class="line"><span class="comment">// 搜索音乐</span></span><br><span class="line">musicTool.searchMusic(<span class="number">1</span>, <span class="number">10</span>, <span class="string">"绿色"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">searchRes</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(searchRes)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取播放链接</span></span><br><span class="line">musicTool.playMusic(<span class="string">"0021rBlZ1gQiLy"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">playRes</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(playRes)</span><br><span class="line">  bgAudioManager.title = <span class="string">'Music'</span></span><br><span class="line">  bgAudioManager.src = playRes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取专辑封面</span></span><br><span class="line">musicTool.getAlbumImage(<span class="number">6271293</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取top100音乐</span></span><br><span class="line">musicTool.getTopMusic().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 随机推荐音乐</span></span><br><span class="line">musicTool.randomRecommend().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h1><ul><li><p>当要播放的音乐属于收费音乐时无法播放 ，具体表现为获取token返回值为空</p></li><li><p>请求过程中需要注意js中的异步问题 </p></li><li><p>微信小程序的BackgroundAudioManager存在部分链接无法播放的问题，因此建议使用InnerAudioContext，无法播放的详细原因参见<a href="https://www.jianshu.com/p/9553cdbc750d" target="_blank" rel="noopener">JabinGP的简书</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近参加了一个微信小程序开发大赛，其中用到了音乐播放功能。于是在小程序官方文档和插件库中逛了一圈，但是官方没有提供对QQ音乐的搜索和获取播放链接等支持，插件库中的插件寥寥无几，并不好用。无奈之下只好自己写一个关于QQ音乐的插件，来完成相应的搜索，获取播放链接等功能。&lt;/p&gt;&lt;p&gt;在开始介绍插件功能之前，特别感谢&lt;a href=&quot;https://www.jianshu.com/p/67e4bd47d981&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书tisa&lt;/a&gt;提供了QQ音乐相应的api。这个插件就是基于这些api进行的封装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://fisher.lazybone.xyz/tags/javascript/"/>
    
      <category term="小程序" scheme="http://fisher.lazybone.xyz/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx搭建下载服务器</title>
    <link href="http://fisher.lazybone.xyz/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BA%E4%B8%8B%E8%BD%BD%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
    <id>http://fisher.lazybone.xyz/使用nginx搭建下载服务器.html</id>
    <published>2019-11-01T12:19:30.000Z</published>
    <updated>2019-11-04T14:28:24.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Nginx搭建下载服务器"><a href="#使用Nginx搭建下载服务器" class="headerlink" title="使用Nginx搭建下载服务器"></a>使用Nginx搭建下载服务器</h1><p>下载服务器主要用于存放自己日常使用的安装包和文件</p><h2 id="1-创建文件存放根目录"><a href="#1-创建文件存放根目录" class="headerlink" title="1. 创建文件存放根目录"></a>1. 创建文件存放根目录</h2><p>使用<code>ssh</code>登录服务器，创建文件夹。在这里我使用的是自己的用户和自己用户的根目录，方便文件的管理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir downloads</span><br></pre></td></tr></table></figure><h2 id="2-修改Nginx配置文件"><a href="#2-修改Nginx配置文件" class="headerlink" title="2. 修改Nginx配置文件"></a>2. 修改Nginx配置文件</h2><p>修改Nginx配置文件，将文件夹添加为下载根目录</p><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>在Http Server添加一个<code>location</code>代码块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /downloads/ &#123;</span><br><span class="line">    <span class="built_in">alias</span> /home/fisher/downloads/;</span><br><span class="line">    autoindex on;</span><br><span class="line">    <span class="comment"># 只显示文件粗略大小，以k、M等单位计算</span></span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    <span class="comment"># 使用服务器本地时间</span></span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-重载Nginx"><a href="#3-重载Nginx" class="headerlink" title="3. 重载Nginx"></a>3. 重载Nginx</h2><p>重新加载Nginx配置文件，使配置生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><p>这时候用浏览器访问<code>http://hostname/downloads/</code>，出现以下页面，配置成功！</p><p><img src="images/nginx/downloads.png" alt="页面根目录"></p><h2 id="4-存在的问题"><a href="#4-存在的问题" class="headerlink" title="4. 存在的问题"></a>4. 存在的问题</h2><p>在使用默认的配置下，使用<code>curl</code>或<code>wget</code>下载到1m之后就会丢失连接，使用迅雷下载途中会中断多次，在查找并使用了网上的解决方案之后仍然不能解决问题。个人认为是默认缓冲为1m的原因，具体的解决方法待我研究研究。在此先挖一个坑。</p><h3 id="问题的解决（2019-11-04）"><a href="#问题的解决（2019-11-04）" class="headerlink" title="问题的解决（2019-11-04）"></a>问题的解决（2019-11-04）</h3><p>在研究了<code>sendfile</code>参数、<code>max_chunk_size</code>参数、<code>buffer_size</code>等参数无用之后。今天早上我的Nginx甚至不能正常工作了，无奈之下我只好把Nginx卸载重装。神奇的是重装完之后一切都恢复正常了，不需要加什么特别的参数，使用默认的配置文件就能解决存在的问题了。看来重装能解决99%的问题😂？</p><h2 id="5-root和alias的区别"><a href="#5-root和alias的区别" class="headerlink" title="5. root和alias的区别"></a>5. root和alias的区别</h2><p>最开始配置<code>location</code>代码块的中的根目录时候，我使用的是<code>root</code>，重载Nginx之后发现404。接着我换成了<code>alias</code>之后就可以了。仔细查了一下文档，这两个参数的区别在于：<code>两者解析URL的方式不同</code></p><p>首先<code>location</code>代码块如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location <span class="regexp">/folder/</span> &#123;</span><br><span class="line">    (root或alias): <span class="regexp">/home/</span>fisher<span class="regexp">/downloads/</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>alias</code>：使用<code>alias</code>中的路径替换掉URL的参数路径，例如：www.domain.com/folder/会返回服务器上的<code>/home/fisher/downloads/</code>中的文件，使用该方式最后面必须以<code>/</code>结束，否则会找不到文件</li><li><code>root</code>：将URL参数路径中的路径追加到<code>root</code>后面，例如：www.domain.com/folder/会返回服务器上的<code>/home/fisher/downloads/folder/</code>，因此出现了404的问题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Nginx搭建下载服务器&quot;&gt;&lt;a href=&quot;#使用Nginx搭建下载服务器&quot; class=&quot;headerlink&quot; title=&quot;使用Nginx搭建下载服务器&quot;&gt;&lt;/a&gt;使用Nginx搭建下载服务器&lt;/h1&gt;&lt;p&gt;下载服务器主要用于存放自己日常使用的安装包和文件&lt;/p&gt;&lt;h2 id=&quot;1-创建文件存放根目录&quot;&gt;&lt;a href=&quot;#1-创建文件存放根目录&quot; class=&quot;headerlink&quot; title=&quot;1. 创建文件存放根目录&quot;&gt;&lt;/a&gt;1. 创建文件存放根目录&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;ssh&lt;/code&gt;登录服务器，创建文件夹。在这里我使用的是自己的用户和自己用户的根目录，方便文件的管理&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir downloads&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;2-修改Nginx配置文件&quot;&gt;&lt;a href=&quot;#2-修改Nginx配置文件&quot; class=&quot;headerlink&quot; title=&quot;2. 修改Nginx配置文件&quot;&gt;&lt;/a&gt;2. 修改Nginx配置文件&lt;/h2&gt;&lt;p&gt;修改Nginx配置文件，将文件夹添加为下载根目录&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://fisher.lazybone.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="服务器配置" scheme="http://fisher.lazybone.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Nginx配置" scheme="http://fisher.lazybone.xyz/tags/nginx%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>从Github迁移Hexo博客</title>
    <link href="http://fisher.lazybone.xyz/%E4%BB%8Egithub%E8%BF%81%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://fisher.lazybone.xyz/从github迁移hexo博客.html</id>
    <published>2019-10-31T14:29:01.000Z</published>
    <updated>2019-10-31T16:05:51.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从GitHub迁移Hexo博客"><a href="#从GitHub迁移Hexo博客" class="headerlink" title="从GitHub迁移Hexo博客"></a>从GitHub迁移Hexo博客</h2><p>博客项目重启之后，鉴于GitHub的访问速度，我便想着将博客迁移到服务器上。经过一番研究之后，我成功地实现了博客的迁移，并且Github和阿里云服务器能同步更新博客。</p><h3 id="1-所需环境一览"><a href="#1-所需环境一览" class="headerlink" title="1. 所需环境一览"></a>1. 所需环境一览</h3><ul><li><p>本地环境：</p><ul><li>由于之前在GitHub上搭建过博客，因此本地留有Hexo的根目录，我的Hexo根目录文件夹名称为<strong>blog</strong>。</li><li>系统：macOS Mojave</li><li>环境：Git-v2.17，Node.js-v8.9.3，hexo，ssh</li><li>任务：创建RSA公钥，本地生成静态网页文件，用Git同时推送到Github和阿里云服务器上</li></ul></li><li><p>阿里云服务器环境：</p><ul><li>系统：Centos7</li><li>环境：Git-v1.8，Node.js-v6.17.2，Nginx（推荐更新为最新版，我使用该版本没什么问题）</li><li>任务：创建Git仓库用于储存静态网页文件，使用Nginx作为网页服务器</li></ul></li><li><p>Github环境：</p><ul><li>环境：保存本地环境中的RSA公钥</li><li>任务：创建Git仓库用于储存静态网页文件，使用Github Pages设置网页主页</li></ul></li></ul><a id="more"></a><h3 id="2-云服务器的配置"><a href="#2-云服务器的配置" class="headerlink" title="2. 云服务器的配置"></a>2. 云服务器的配置</h3><p>各个环境所需的依赖请自行安装，在此就不贴出安装步骤了</p><h4 id="2-1-创建新用户，配置Git"><a href="#2-1-创建新用户，配置Git" class="headerlink" title="2.1 创建新用户，配置Git"></a>2.1 创建新用户，配置Git</h4><p>创建一个新用户用于网站的配置（推荐），也可以使用现有用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd fisher<span class="comment"># 添加名为fisher的新用户</span></span><br><span class="line">passwd fisher<span class="comment"># 修改fisher的密码</span></span><br><span class="line">chmod 740 /etc/sudoers<span class="comment"># 将fisher添加到sudo名单中</span></span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>找到如下行，在下面添加一行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line"><span class="comment"># 添加以下行</span></span><br><span class="line">fisherALL=(ALL)ALL</span><br></pre></td></tr></table></figure><p>保存并推出，将文件权限改回来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><h4 id="2-2-添加RSA公钥"><a href="#2-2-添加RSA公钥" class="headerlink" title="2.2 添加RSA公钥"></a>2.2 添加RSA公钥</h4><p>在本地电脑上打开终端，使用Git Bash创建密钥。如果要使用已有的密钥，这一步可以跳过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa<span class="comment"># 一路回车即可</span></span><br></pre></td></tr></table></figure><p><img src="images/blogtek/keygen.png" alt=""></p><p><strong>注意：该密钥不可以泄漏给其他人，一旦泄漏服务器很危险。这里生成的key仅用做演示，因此没有打码</strong></p><p>切换至<strong>“fisher”</strong>用户，创建<strong>“.ssh”</strong>文件夹以及<strong>“authorized_keys”</strong>文件并将刚刚生成的<strong>“key.pub”</strong>中的内容复制粘贴到里面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su fisher</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>修改<strong>“authorized_keys”</strong>的权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">chmod 600 .ssh/authorized_keys</span><br><span class="line">chmod 700 .ssh</span><br></pre></td></tr></table></figure><h4 id="2-3-测试到服务器的连接"><a href="#2-3-测试到服务器的连接" class="headerlink" title="2.3 测试到服务器的连接"></a>2.3 测试到服务器的连接</h4><p>使用ssh连接到服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh fisher@ADDRESS<span class="comment"># ADDRESS是你服务器的IP地址</span></span><br></pre></td></tr></table></figure><p>如果不需要输入密码就能连上服务器，则说明你的RSA公钥配置成功</p><h3 id="3-Github仓库的配置"><a href="#3-Github仓库的配置" class="headerlink" title="3. Github仓库的配置"></a>3. Github仓库的配置</h3><p>由于之前我在搭建Github Pages的时候没有使用RSA公钥，我的部署全部是用用户名和密码的。因此本次迁移，我顺便把Github的博客仓库也配置上RSA公钥</p><h4 id="3-1-添加RSA公钥"><a href="#3-1-添加RSA公钥" class="headerlink" title="3.1 添加RSA公钥"></a>3.1 添加RSA公钥</h4><p>打开位于Github上面的博客仓库，点击<strong>“Settings”</strong>，点击<strong>“Deploy Keys”</strong>，点击<strong>“Add deploy key”</strong></p><p><img src="images/blogtek/addkey.png" alt=""></p><p>然后将<strong>“key.pub”</strong>中的内容粘贴进去，勾选选项，点击确认并输入密码</p><p><img src="images/blogtek/addkey1.png" alt=""></p><p>到此，Github上的RSA公钥就配置完成了</p><h3 id="4-云服务器的Nginx配置"><a href="#4-云服务器的Nginx配置" class="headerlink" title="4. 云服务器的Nginx配置"></a>4. 云服务器的Nginx配置</h3><h4 id="4-1-创建网站根目录，配置Nginx"><a href="#4-1-创建网站根目录，配置Nginx" class="headerlink" title="4.1 创建网站根目录，配置Nginx"></a>4.1 创建网站根目录，配置Nginx</h4><p>以fisher用户登录服务器，在用户根目录下创建网站根目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /blog</span><br></pre></td></tr></table></figure><p>在Nginx的配置文件中添加网站目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>如果使用HTTP协议，则在80端口中的server添加网站目录。如果使用HTTPS协议，则在443端口中添加网站目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  fiher.lazybone.xyz;    <span class="comment"># 修改为自己的域名</span></span><br><span class="line">    root         /home/fisher/blog;    <span class="comment"># 修改为网站的根目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新载入Nginx，使配置生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><h4 id="4-2-建立Git仓库"><a href="#4-2-建立Git仓库" class="headerlink" title="4.2 建立Git仓库"></a>4.2 建立Git仓库</h4><p>创建一个Git裸库，只用于保存Repository信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git init --bare blogit.git</span><br></pre></td></tr></table></figure><p>使用Git-Hooks同步网站根目录，这里使用的是Git中的<strong>“post-receive”</strong>，当有Git收发的时候会调用该脚本，自动将最新内容同步到网站根目录中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blogit.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>将以下语句写入文件中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/home/fisher/blog --git-dir=/home/fisher/blogit.git checkout -f</span><br></pre></td></tr></table></figure><p>保存并赋予执行权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/fisher/blogit.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h3 id="5-本地配置"><a href="#5-本地配置" class="headerlink" title="5. 本地配置"></a>5. 本地配置</h3><h4 id="5-1-配置”-config-yml”"><a href="#5-1-配置”-config-yml”" class="headerlink" title="5.1 配置”_config.yml”"></a>5.1 配置”_config.yml”</h4><p>打开位于Hexo博客根目录下的<strong>“_config.yml”</strong>文件，找到<strong>“deploy”</strong>并修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">-   <span class="built_in">type</span>: git</span><br><span class="line">    repo: fisher@ADDRESS:/home/fisher/blogit.git     <span class="comment"># ADDRESS是服务器地址</span></span><br><span class="line">    branch: master      <span class="comment"># 分支</span></span><br><span class="line">-   <span class="built_in">type</span>: git</span><br><span class="line">    repo: https://github.com/fisherwy/fisherwy.github.io.git<span class="comment"># 换成自己Github上的仓库地址</span></span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><h4 id="5-2-部署"><a href="#5-2-部署" class="headerlink" title="5.2 部署"></a>5.2 部署</h4><p>至此，整个博客的迁移工作只剩下最后一步，就是重新部署一次了，以后按照以前的部署步骤来就可以了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>迁移的教程最初来自此处：<a href="https://blog.csdn.net/StaunchKai/article/details/82878928" target="_blank" rel="noopener">StaunchKai的博客</a>。非常感谢StaunchKai提供的教程！</p><p>整个迁移工作下来，重点其实只有3个：</p><ul><li>在云服务器上配置RSA公钥</li><li>建立网站根目录，配置Nginx的网页根目录</li><li>建立博客仓库，与网站根目录挂钩，同步更新</li></ul><p>掌握了这3个重点的操作之后，其他的操作其实很简单</p><p>于是乎在云服务器上，我又重新开始记录我的日常点滴</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;从GitHub迁移Hexo博客&quot;&gt;&lt;a href=&quot;#从GitHub迁移Hexo博客&quot; class=&quot;headerlink&quot; title=&quot;从GitHub迁移Hexo博客&quot;&gt;&lt;/a&gt;从GitHub迁移Hexo博客&lt;/h2&gt;&lt;p&gt;博客项目重启之后，鉴于GitHub的访问速度，我便想着将博客迁移到服务器上。经过一番研究之后，我成功地实现了博客的迁移，并且Github和阿里云服务器能同步更新博客。&lt;/p&gt;&lt;h3 id=&quot;1-所需环境一览&quot;&gt;&lt;a href=&quot;#1-所需环境一览&quot; class=&quot;headerlink&quot; title=&quot;1. 所需环境一览&quot;&gt;&lt;/a&gt;1. 所需环境一览&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本地环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于之前在GitHub上搭建过博客，因此本地留有Hexo的根目录，我的Hexo根目录文件夹名称为&lt;strong&gt;blog&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;系统：macOS Mojave&lt;/li&gt;
&lt;li&gt;环境：Git-v2.17，Node.js-v8.9.3，hexo，ssh&lt;/li&gt;
&lt;li&gt;任务：创建RSA公钥，本地生成静态网页文件，用Git同时推送到Github和阿里云服务器上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阿里云服务器环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统：Centos7&lt;/li&gt;
&lt;li&gt;环境：Git-v1.8，Node.js-v6.17.2，Nginx（推荐更新为最新版，我使用该版本没什么问题）&lt;/li&gt;
&lt;li&gt;任务：创建Git仓库用于储存静态网页文件，使用Nginx作为网页服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Github环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境：保存本地环境中的RSA公钥&lt;/li&gt;
&lt;li&gt;任务：创建Git仓库用于储存静态网页文件，使用Github Pages设置网页主页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="博客相关" scheme="http://fisher.lazybone.xyz/tags/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
</feed>
