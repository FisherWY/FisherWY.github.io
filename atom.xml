<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fisher&#39;s Blog</title>
  
  <subtitle>自由尋覓快樂別人從沒法感受</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.fisheryung.top/"/>
  <updated>2022-09-25T11:30:55.498Z</updated>
  <id>http://www.fisheryung.top/</id>
  
  <author>
    <name>Fisher</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Ubuntu18.04上编译安装MindSpore</title>
    <link href="http://www.fisheryung.top/%E5%9C%A8ubuntu18-04%E4%B8%8A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85mindspore.html"/>
    <id>http://www.fisheryung.top/在ubuntu18-04上编译安装mindspore.html</id>
    <published>2022-09-22T08:12:30.000Z</published>
    <updated>2022-09-25T11:30:55.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>本篇博客最初发布于Gitlink论坛中的MindSpore解读评注，链接在<a href="https://forum.gitlink.org.cn/forums/7321/detail" target="_blank" rel="noopener">这里</a>。</p><p>在参与MindSpore项目开发之前，第一件需要做的事情就是搭建开发环境，从源码编译安装MindSpore是一个绕不开的话题。本篇博客记录了我在Ubuntu18.04上从源码编译安装MindSpore的全过程。</p><h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><a id="more"></a><h3 id="项目编译常用工具链的安装"><a href="#项目编译常用工具链的安装" class="headerlink" title="项目编译常用工具链的安装"></a>项目编译常用工具链的安装</h3><p>在日常开发中，<code>gcc</code>、<code>git</code>、<code>cmake</code>等是常用的开发、构建工具，根据MindSpore文档中的工具版本要求，我们对本机上的工具版本进行检查，如果有版本不合适的工具，我们需要更新一下。</p><ol><li><p>首先检查<code>gcc</code>，版本要求为：<code>7.3.0-9.4.0</code>。我的<code>gcc</code>版本为<code>7.5.0</code>，符合要求。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fisher@ubuntu:~$ gcc --version</span><br><span class="line">gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure></li><li><p>检查<code>git</code>，一般的Linux系统都会预装Git。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fisher@ubuntu:~$ git --version</span><br><span class="line">git version 2.17.1</span><br></pre></td></tr></table></figure></li><li><p>检查<code>cmake</code>，版本要求为：<code>&gt;=3.18.3</code>。由于<code>apt</code>默认源中安装的版本比较旧，因此我下载了二进制包并手动配置了环境变量。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/Kitware/CMake/releases/download/v3.23.2/cmake-3.23.2-linux-x86_64.tar.gz</span><br><span class="line">tar zxvf cmake-3.23.2-linux-x86_64.tar.gz</span><br><span class="line">mv cmake-3.23.2-linux-x86_64 cmake</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"export PATH=<span class="variable">$PWD</span>/cmake/bin:\$PATH"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><p>配置完成后检查安装效果<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fisher@ubuntu:~$ cmake --version</span><br><span class="line">cmake version 3.23.2</span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>检查<code>autoconf</code>，版本要求为：<code>&gt;=2.69</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fisher@ubuntu:~$ autoconf --version</span><br><span class="line">autoconf (GNU Autoconf) 2.69</span><br><span class="line">Copyright (C) 2012 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+/Autoconf: GNU GPL version 3 or later</span><br><span class="line">&lt;http://gnu.org/licenses/gpl.html&gt;, &lt;http://gnu.org/licenses/exceptions.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Written by David J. MacKenzie and Akim Demaille.</span><br></pre></td></tr></table></figure></li><li><p>检查<code>libtool</code>，版本要求为：<code>&gt;=2.4.6-29.fc30</code>。命令行看不出是哪个小版本，但编译过程中没有任何错误。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fisher@ubuntu:~$ libtool --version</span><br><span class="line">libtool (GNU libtool) 2.4.6</span><br><span class="line">Written by Gordon Matzigkeit, 1996</span><br><span class="line">Copyright (C) 2014 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure></li><li><p>检查<code>automake</code>，版本要求为：<code>&gt;=1.15.1</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fisher@ubuntu:~$ automake --version</span><br><span class="line">automake (GNU automake) 1.15.1</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">License GPLv2+: GNU GPL version 2 or later &lt;http://gnu.org/licenses/gpl-2.0.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Written by Tom Tromey &lt;tromey@redhat.com&gt;</span><br><span class="line">       and Alexandre Duret-Lutz &lt;adl@gnu.org&gt;.</span><br></pre></td></tr></table></figure></li><li><p>安装MindSpore需要的其他依赖库，这些库都可以通过<code>apt</code>安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libgmp-dev tcl patch libnuma-dev flex -y</span><br></pre></td></tr></table></figure></li></ol><p>如果前面5个常用工具（除<code>cmake</code>）没有安装，可以执行以下命令安装。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-7 git automake autoconf libtool -y</span><br></pre></td></tr></table></figure></p><ol start="8"><li>准备Python相关环境，使用<code>Anaconda</code>创建一个新环境，新环境会自动安装最新版的<code>wheel</code>和<code>setuptools</code>。同时该环境也用于MindSpore开发，不会影响系统的Python环境。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n mindspore-dev python=3.7</span><br></pre></td></tr></table></figure></li></ol><h3 id="CUDA相关工具的安装"><a href="#CUDA相关工具的安装" class="headerlink" title="CUDA相关工具的安装"></a>CUDA相关工具的安装</h3><ol><li>安装CUDA 10.1版本。将CUDA安装在<code>/usr/local/cuda-10.1</code>中，同时配置环境变量。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run</span><br><span class="line">sudo sh cuda_10.1.243_418.87.00_linux.run</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"export PATH=/usr/local/cuda-10.1/bin:\$PATH"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:\$LD_LIBRARY_PATH"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><p>安装配置完成后检查安装结果<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fisher@ubuntu:~$ nvcc --version</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2019 NVIDIA Corporation</span><br><span class="line">Built on Fri_Feb__8_19:08:17_PST_2019</span><br><span class="line">Cuda compilation tools, release 10.1, V10.1.105</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>安装cuDNN 8.0.5版本。解压后复制到CUDA中，同时记得调整文件的拥有者，防止出现权限问题。cuDNN的下载地址点<a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">tar zxvf cudnn.tgz</span><br><span class="line">sudo chown -R root:root cuda/</span><br><span class="line">sudo chmod a+r cuda/include/* cuda/lib64/libcudnn*</span><br><span class="line">sudo cp cuda/include/* /usr/<span class="built_in">local</span>/cuda-10.1/include</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda-10.1/lib64</span><br></pre></td></tr></table></figure></li><li><p>安装TensorRT 7.2.3版本。下载时注意选择对应版本，TensorRT的下载地址点<a href="https://developer.nvidia.com/nvidia-tensorrt-7x-download" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">tar zxvf TensorRT-7.2.3.4.Ubuntu-18.04.x86_64-gnu.cuda-10.2.cudnn8.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> TensorRT-7.2.3.4</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"export TENSORRT_HOME=<span class="variable">$PWD</span>"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"export LD_LIBRARY_PATH=\$TENSORRT_HOME/lib:\$LD_LIBRARY_PATH"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><h3 id="其他工具的安装"><a href="#其他工具的安装" class="headerlink" title="其他工具的安装"></a>其他工具的安装</h3><ol><li>安装Open MPI 4.0.3版本。直接参考官方文档的安装命令即可，我与官方的步骤的区别在于：我将安装路径设置在用户根目录下，并且文件夹命名中不带版本号。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">curl -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.3.tar.gz</span><br><span class="line">tar xzf openmpi-4.0.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openmpi-4.0.3</span><br><span class="line">./configure --prefix=/home/fisher/openmpi</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"export PATH=<span class="variable">$PWD</span>/openmpi/bin:\$PATH"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"export LD_LIBRARY_PATH=<span class="variable">$PWD</span>/openmpi/lib:\$LD_LIBRARY_PATH"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><p>安装配置完成后检查安装结果<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fisher@ubuntu:~$ ompi_info --version</span><br><span class="line">Open MPI v2.1.1</span><br><span class="line">http://www.open-mpi.org/community/<span class="built_in">help</span>/</span><br></pre></td></tr></table></figure></p><ol start="2"><li>安装LLVM 14.0.0版本。下载解压后配置环境变量即可，Github Release地址点击<a href="https://github.com/llvm/llvm-project/releases" target="_blank" rel="noopener">这里</a>。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz</span><br><span class="line">tar xvf clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz</span><br><span class="line">mv clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04 llvm</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"export PATH=<span class="variable">$PWD</span>/llvm/bin:\$PATH"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><p>安装配置完成后检查安装结果<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fisher@ubuntu:~$ clang --version</span><br><span class="line">clang version 14.0.0</span><br><span class="line">Target: x86_64-unknown-linux-gnu</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /home/fisher/llvm/bin</span><br></pre></td></tr></table></figure></p><h2 id="三、拉取源码并编译"><a href="#三、拉取源码并编译" class="headerlink" title="三、拉取源码并编译"></a>三、拉取源码并编译</h2><ol><li><p>拉取源码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/mindspore/mindspore.git</span><br></pre></td></tr></table></figure></li><li><p>使用Conda激活MindSpore编译的Python环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate mindspore-dev</span><br></pre></td></tr></table></figure></li><li><p>执行编译脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mindspore</span><br><span class="line">bash build.sh -d -e gpu -S on -j64</span><br></pre></td></tr></table></figure></li></ol><p>编译成功<br><img src="images/mindspore/compile.png" alt="编译成果"></p><h2 id="四、安装MindSpore"><a href="#四、安装MindSpore" class="headerlink" title="四、安装MindSpore"></a>四、安装MindSpore</h2><ol><li><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install output/mindspore_gpu-*.whl -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li><li><p>验证安装成果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"import mindspore;mindspore.run_check()"</span></span><br></pre></td></tr></table></figure></li></ol><p>输出正确结果<br><img src="images/mindspore/result.png" alt="输出结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;本篇博客最初发布于Gitlink论坛中的MindSpore解读评注，链接在&lt;a href=&quot;https://forum.gitlink.org.cn/forums/7321/detail&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;在参与MindSpore项目开发之前，第一件需要做的事情就是搭建开发环境，从源码编译安装MindSpore是一个绕不开的话题。本篇博客记录了我在Ubuntu18.04上从源码编译安装MindSpore的全过程。&lt;/p&gt;&lt;h2 id=&quot;二、环境准备&quot;&gt;&lt;a href=&quot;#二、环境准备&quot; class=&quot;headerlink&quot; title=&quot;二、环境准备&quot;&gt;&lt;/a&gt;二、环境准备&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Mindspore" scheme="http://www.fisheryung.top/tags/mindspore/"/>
    
  </entry>
  
  <entry>
    <title>Mindspore算子分析之RandomPoisson</title>
    <link href="http://www.fisheryung.top/mindspore%E7%AE%97%E5%AD%90%E5%88%86%E6%9E%90%E4%B9%8Brandompoisson.html"/>
    <id>http://www.fisheryung.top/mindspore算子分析之randompoisson.html</id>
    <published>2022-09-20T11:45:11.000Z</published>
    <updated>2022-09-22T03:04:44.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算子介绍"><a href="#算子介绍" class="headerlink" title="算子介绍"></a>算子介绍</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>泊松分布是一种统计与概率学里常见的离散概率分布，适合描述单位时间内随机事件发生的次数的概率分布，如：某一服务设施在一定时间内受到的服务请求的次数、电话交换机接到呼叫的次数、汽车站台的候车人数等。</p><p>泊松分布的函数表达式为：</p><p>$$P(X=k) = \frac{e^{-\Lambda}\Lambda^k}{k!}$$</p><a id="more"></a><p>其中，参数$\Lambda$是随机事件发生次数的数学期望值。若$X$服从参数为$\Lambda$的泊松分布，记为$X \sim Pois(\Lambda)$。</p><p>关于泊松分布的更多定义，可以参考Wikipedia，<a href="https://zh.wikipedia.org/wiki/%E5%8D%9C%E7%93%A6%E6%9D%BE%E5%88%86%E5%B8%83" target="_blank" rel="noopener">链接</a>。</p><h2 id="算子功能"><a href="#算子功能" class="headerlink" title="算子功能"></a>算子功能</h2><p>给定描述待采样矩阵维度的1-D Tensor: <code>shape</code>，以及期望值<code>rate</code>（对应泊松分布定义中的$\Lambda$），算子根据输入的期望值<code>rate</code>以及待采样矩阵<code>shape</code>，生成随机泊松分布的采样结果，采样结果的维度由给定的<code>shape</code>与期望值<code>rate</code>的维度拼接而成。比如说，输入的待采样矩阵的维度<code>shape</code>为<code>[3, 3]</code>，输入的期望值<code>rate</code>维度为5，则输出的结果维度为<code>[3, 3, 5]</code>。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="Python侧算子原语定义"><a href="#Python侧算子原语定义" class="headerlink" title="Python侧算子原语定义"></a>Python侧算子原语定义</h2><p>在<code>Mindspore</code>中，所有算子都使用算子原语（Primitive）进行封装，为底层<code>Ascend</code>，<code>GPU</code>，<code>AICPU</code>，<code>CPU</code>等设备的算子具体实现提供统一的调用接口。在Python侧的算子定义中，通常只需要实现类最基本的初始化即可，也就是实现<code>__init__</code>函数，在初始化过程中需要对初始化的参数进行合法性检查，在文件<code>mindspore/python/mindspore/ops/operations/random_ops.py</code>中，<code>RandomPoisson</code>算子的Python侧原语定义如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomPoisson</span><span class="params">(Primitive)</span>:</span></span><br><span class="line">    <span class="string">r"""</span></span><br><span class="line"><span class="string">    Produces random non-negative  values i, distributed according to discrete probability function:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. math::</span></span><br><span class="line"><span class="string">        \text&#123;P&#125;(i|μ) = \frac&#123;\exp(-μ)μ^&#123;i&#125;&#125;&#123;i!&#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">         seed (int): An optional int. Defaults to 0. If either `seed` or `seed2` are set to be non-zero,</span></span><br><span class="line"><span class="string">            the seed is set by the given seed. Otherwise, it is seeded by a random seed.</span></span><br><span class="line"><span class="string">         seed2 (int): An optional int. Defaults to 0. A second seed to avoid seed collision.</span></span><br><span class="line"><span class="string">         dtype (mindspore.dtype): The type of output. Default: mindspore.int64.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Inputs:</span></span><br><span class="line"><span class="string">        - **shape** (Tensor) - The shape of random tensor to be generated, 1-D Tensor, whose dtype must be in</span></span><br><span class="line"><span class="string">                               [int32, int64]</span></span><br><span class="line"><span class="string">        - **rate** (Tensor) - μ parameter the distribution was constructed with. The parameter defines mean number</span></span><br><span class="line"><span class="string">          of occurrences of the event. Its type must be in [float16, float32, float64, int32, int64]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Outputs:</span></span><br><span class="line"><span class="string">        Tensor. Its shape is (*shape, *rate.shape). Its type is spcified by `dtype`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        TypeError: If `shape` is not a Tensor or its dtype is not int32 or int64.</span></span><br><span class="line"><span class="string">        TypeError: If `dtype` is not int32 or int64.</span></span><br><span class="line"><span class="string">        ValueError: If `shape` is not a 1-D tensor.</span></span><br><span class="line"><span class="string">        ValueError: If `shape` elements are negative.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Supported Platforms:</span></span><br><span class="line"><span class="string">        ``Ascend````GPU````CPU``</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Examples:</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; shape = Tensor(np.array([2, 3]), mstype.int32)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; rate = Tensor(np.array([2, 2]), mstype.int32)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; seed = 0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; seed2 = 0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; random_poisson = ops.RandomPoisson(seed=seed, seed2=seed2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; output = random_poisson(shape,rate)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; print(output.shape)</span></span><br><span class="line"><span class="string">        (2, 3, 2)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @prim_attr_register</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, seed=<span class="number">0</span>, seed2=<span class="number">0</span>, dtype=mstype.int64)</span>:</span></span><br><span class="line">        <span class="string">"""Initialize Poisson"""</span></span><br><span class="line">        self.init_prim_io_names(inputs=[<span class="string">'shape'</span>, <span class="string">'rate'</span>], outputs=[<span class="string">'output'</span>])</span><br><span class="line">        Validator.check_value_type(<span class="string">'seed'</span>, seed, [int], self.name)</span><br><span class="line">        Validator.check_value_type(<span class="string">'seed2'</span>, seed2, [int], self.name)</span><br><span class="line">        valid_values = (mstype.int64, mstype.int32, mstype.float16, mstype.float32, mstype.float64)</span><br><span class="line">        Validator.check_type_name(<span class="string">"dtype"</span>, dtype, valid_values, self.name)</span><br></pre></td></tr></table></figure><p>每一段代码对应的作用如下：</p><ul><li>首行：定义泊松算子类，继承于算子原语<code>Primitive</code>类。</li><li>注释部分：算子文档，描述算子功能、算子参数、算子输入、算子输出、抛出错误的类型、支持的平台、代码样例，该注释也用于生成<code>Mindspore</code>在线文档。</li><li><strong>init</strong>函数：算子初始化，<code>init_prim_io_names</code>方法向<code>Mindspore</code>框架注册该算子的输入名称和输出名称，<code>Validator</code>类用于检查输入参数是否合法。</li></ul><h2 id="C-侧算子注册"><a href="#C-侧算子注册" class="headerlink" title="C++侧算子注册"></a>C++侧算子注册</h2><p>在C++侧，算子首先需要将自己注册到<code>Mindspore</code>框架的全局变量中，来“告知”框架，存在一个名字叫<code>RandomPoisson</code>的算子，算子在<code>mindspore/core/ops/core_ops.h</code>中注册，代码如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GVAR_DEF(PrimitivePtr, kPrimRandomPoisson, <span class="built_in">std</span>::make_shared&lt;Primitive&gt;(<span class="string">"RandomPoisson"</span>));</span><br></pre></td></tr></table></figure><h2 id="C-侧算子原语定义"><a href="#C-侧算子原语定义" class="headerlink" title="C++侧算子原语定义"></a>C++侧算子原语定义</h2><p>算子在C++侧也需要定义自己的<code>Primitive</code>原语，用于算子在C++侧的初始化、参数合法性检查等。C++侧的原语定义分为<code>mindspore/core/ops/random_poisson.h</code>和<code>mindspore/core/ops/random_poisson.cc</code>两个文件，头文件主要是定义算子类，cc文件主要是类成员函数的具体实现，由于源码代码比较长，因此将代码实现具体功能的描述都写在注释中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义随机泊松算子原语类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MINDSPORE_CORE_OPS_RANDOM_POISSON_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINDSPORE_CORE_OPS_RANDOM_POISSON_H_</span></span><br><span class="line"><span class="comment">// C++标准库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="comment">// Mindspore算子原语父类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ops/base_operator.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mindapi/base/types.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Mindspore命名空间域，算子需要定义在`mindspore::ops`中</span></span><br><span class="line"><span class="keyword">namespace</span> mindspore &#123;</span><br><span class="line"><span class="keyword">namespace</span> ops &#123;</span><br><span class="line"><span class="comment">// 随机泊松算子的名称</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> kRandomPoisson = <span class="string">"RandomPoisson"</span>;</span><br><span class="line"><span class="comment">// 算子类定义，继承于`BaseOperator`</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MIND_API</span> <span class="title">RandomPoisson</span> :</span> <span class="keyword">public</span> BaseOperator &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 使用宏定义，定义使用智能指针作为参数的构造函数和默认的析构函数</span></span><br><span class="line">  MIND_API_BASE_MEMBER(RandomPoisson);</span><br><span class="line">  <span class="comment">// 类构造函数，构造算子的输入、输出</span></span><br><span class="line">  RandomPoisson() : BaseOperator(kRandomPoisson) &#123; InitIOName(&#123;<span class="string">"shape"</span>, <span class="string">"rate"</span>&#125;, &#123;<span class="string">"output"</span>&#125;); &#125;</span><br><span class="line">  <span class="comment">// 实现父类`Init`方法，并没有实际作用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 算子随机种子`seed`的setter和getter方法</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_seed</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> seed)</span></span>;</span><br><span class="line">  <span class="keyword">int64_t</span> get_seed() <span class="keyword">const</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_seed2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> seed2)</span></span>;</span><br><span class="line">  <span class="keyword">int64_t</span> get_seed2() <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 算子执行计算的正式入口</span></span><br><span class="line">abstract::<span class="function">AbstractBasePtr <span class="title">RandomPoissonInfer</span><span class="params">(<span class="keyword">const</span> abstract::AnalysisEnginePtr &amp;, <span class="keyword">const</span> PrimitivePtr &amp;primitive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;abstract::AbstractBasePtr&gt; &amp;input_args)</span></span>;</span><br><span class="line"><span class="comment">// 指向算子的智能指针</span></span><br><span class="line"><span class="keyword">using</span> kPrimPrimRandomPoissonPtr = <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;RandomPoisson&gt;;</span><br><span class="line">&#125;  <span class="comment">// namespace ops</span></span><br><span class="line">&#125;  <span class="comment">// namespace mindspore</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MINDSPORE_CORE_OPS_RANDOM_POISSON_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机泊松算子的头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ops/random_poisson.h"</span></span></span><br><span class="line"><span class="comment">// C++标准库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="comment">// Mindspore公共工具类函数库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ops/op_utils.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils/check_convert_utils.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"abstract/ops/primitive_infer_map.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"abstract/param_validator.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mindapi/src/helper.h"</span></span></span><br><span class="line"><span class="comment">// 与头文件相同的Mindspore命名空间域</span></span><br><span class="line"><span class="keyword">namespace</span> mindspore &#123;</span><br><span class="line"><span class="keyword">namespace</span> ops &#123;</span><br><span class="line"><span class="comment">// 自定义的命名空间域，将随机泊松算子需要的一些私有函数定义在该空间域中，以防止出现函数重名冲突</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="comment">// 对算子的输入进行维度合法性检查</span></span><br><span class="line">abstract::<span class="function">ShapePtr <span class="title">RandomPoissonInferShape</span><span class="params">(<span class="keyword">const</span> PrimitivePtr &amp;primitive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AbstractBasePtr&gt; &amp;input_args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Mindspore公有工具函数，检查传入的参数是否为空指针</span></span><br><span class="line">  MS_EXCEPTION_IF_NULL(primitive);</span><br><span class="line">  <span class="keyword">auto</span> op_name = primitive-&gt;name();</span><br><span class="line">  <span class="comment">// 检查输入参数`shape`的维度，该参数只能为1-D Tensor</span></span><br><span class="line">  <span class="keyword">auto</span> shape_shape = CheckAndConvertUtils::ConvertShapePtrToShapeMap(input_args[kInputIndex0]-&gt;BuildShape())[kShape];</span><br><span class="line">  <span class="keyword">if</span> (shape_shape.size() != <span class="number">1</span>) &#123;</span><br><span class="line">    MS_EXCEPTION(ValueError) &lt;&lt; <span class="string">"For RandomPoisson, the argument[shape] must be a 1-D tensor, but got "</span></span><br><span class="line">                             &lt;&lt; shape_shape.size() &lt;&lt; <span class="string">"-D"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 检查输入参数`shape`的值，如果值为空则抛出错误</span></span><br><span class="line">  <span class="keyword">auto</span> shape_value = input_args[kInputIndex0]-&gt;BuildValue();</span><br><span class="line">  MS_EXCEPTION_IF_NULL(shape_value);</span><br><span class="line">  <span class="keyword">if</span> (!shape_value-&gt;isa&lt;AnyValue&gt;() &amp;&amp; !shape_value-&gt;isa&lt;None&gt;()) &#123;</span><br><span class="line">    <span class="keyword">auto</span> out_shape = CheckAndConvertUtils::CheckTensorIntValue(<span class="string">"shape"</span>, shape_value, op_name);</span><br><span class="line">    (<span class="keyword">void</span>)CheckAndConvertUtils::CheckPositiveVector(<span class="string">"shape"</span>, out_shape, op_name);</span><br><span class="line">    <span class="comment">// 将`shape`的值和`rate`的维度拼接起来，构造算子最终输出结果的维度</span></span><br><span class="line">    <span class="keyword">auto</span> rate_shape = CheckAndConvertUtils::ConvertShapePtrToShapeMap(input_args[kInputIndex1]-&gt;BuildShape())[kShape];</span><br><span class="line">    <span class="keyword">auto</span> rate_rank = SizeToLong(rate_shape.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int64_t</span> i = <span class="number">0</span>; i &lt; rate_rank; i++) &#123;</span><br><span class="line">      out_shape.push_back(rate_shape[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::make_shared&lt;abstract::Shape&gt;(out_shape);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当输入参数`shape`的值为空时，则没有输出，在算子具体执行时会抛出错误</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; output_shape = &#123;<span class="number">-2</span>&#125;;</span><br><span class="line">    ShapeVector shape_min = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    ShapeVector shape_max = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::make_shared&lt;abstract::Shape&gt;(output_shape, shape_min, shape_max);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对算子输入参数的数据类型进行合法性检查</span></span><br><span class="line"><span class="function">TypePtr <span class="title">RandomPoissonInferType</span><span class="params">(<span class="keyword">const</span> PrimitivePtr &amp;prim, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AbstractBasePtr&gt; &amp;input_args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> prim_name = prim-&gt;name();</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">set</span>&lt;TypePtr&gt; valid_shape_types = &#123;kInt32, kInt64&#125;;</span><br><span class="line">  (<span class="keyword">void</span>)CheckAndConvertUtils::CheckTypeValid(<span class="string">"shape"</span>, input_args[<span class="number">0</span>]-&gt;BuildType(), valid_shape_types, prim_name);</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">set</span>&lt;TypePtr&gt; valid_types = &#123;kFloat16, kFloat32, kFloat64, kInt32, kInt64&#125;;</span><br><span class="line">  (<span class="keyword">void</span>)CheckAndConvertUtils::CheckTypeValid(<span class="string">"rate"</span>, input_args[<span class="number">1</span>]-&gt;BuildType(), valid_types, prim_name);</span><br><span class="line">  <span class="keyword">auto</span> dtype_value = prim-&gt;GetAttr(<span class="string">"dtype"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!dtype_value-&gt;isa&lt;Type&gt;()) &#123;</span><br><span class="line">    MS_EXCEPTION(TypeError) &lt;&lt; <span class="string">"For RandomPoisson, the dtype of "</span> + prim_name + <span class="string">" is invalid!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> output_type = dtype_value-&gt;cast&lt;TypePtr&gt;();</span><br><span class="line">  <span class="keyword">return</span> CheckAndConvertUtils::CheckSubClass(<span class="string">"dtype"</span>, output_type, valid_types, prim_name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个随机种子seed的getter方法</span></span><br><span class="line"><span class="keyword">int64_t</span> RandomPoisson::get_seed() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">auto</span> value_ptr = <span class="keyword">this</span>-&gt;GetAttr(kSeed);</span><br><span class="line">  <span class="keyword">return</span> GetValue&lt;<span class="keyword">int64_t</span>&gt;(value_ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个随机种子seed的setter方法</span></span><br><span class="line"><span class="keyword">void</span> RandomPoisson::set_seed(<span class="keyword">const</span> <span class="keyword">int64_t</span> seed) &#123; (<span class="keyword">void</span>)<span class="keyword">this</span>-&gt;AddAttr(kSeed, api::MakeValue(seed)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个随机种子seed2的getter方法</span></span><br><span class="line"><span class="keyword">int64_t</span> RandomPoisson::get_seed2() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">auto</span> value_ptr = <span class="keyword">this</span>-&gt;GetAttr(kSeed2);</span><br><span class="line">  <span class="keyword">return</span> GetValue&lt;<span class="keyword">int64_t</span>&gt;(value_ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个随机种子seed2的setter方法</span></span><br><span class="line"><span class="keyword">void</span> RandomPoisson::set_seed2(<span class="keyword">const</span> <span class="keyword">int64_t</span> seed2) &#123; (<span class="keyword">void</span>)<span class="keyword">this</span>-&gt;AddAttr(kSeed2, api::MakeValue(seed2)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算子执行计算的正式入口，调用以上的`RandomPoissonInferType`和`RandomPoissonInferShape`进行参数合法性检查后，正式开始算子的执行</span></span><br><span class="line"><span class="function">AbstractBasePtr <span class="title">RandomPoissonInfer</span><span class="params">(<span class="keyword">const</span> abstract::AnalysisEnginePtr &amp;, <span class="keyword">const</span> PrimitivePtr &amp;primitive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AbstractBasePtr&gt; &amp;input_args)</span> </span>&#123;</span><br><span class="line">  MS_EXCEPTION_IF_NULL(primitive);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int64_t</span> kInputsNum = <span class="number">2</span>;</span><br><span class="line">  CheckAndConvertUtils::CheckInputArgs(input_args, kEqual, kInputsNum, primitive-&gt;name());</span><br><span class="line">  <span class="keyword">auto</span> infertype = RandomPoissonInferType(primitive, input_args);</span><br><span class="line">  <span class="keyword">auto</span> infershape = RandomPoissonInferShape(primitive, input_args);</span><br><span class="line">  <span class="keyword">return</span> abstract::MakeAbstract(infershape, infertype);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册一些需要在Host端直接获取的数据</span></span><br><span class="line">REGISTER_HOST_DEPENDS(kRandomPoisson, &#123;<span class="number">0</span>&#125;);</span><br><span class="line"><span class="comment">// 向Mindspore框架注册算子</span></span><br><span class="line">MIND_API_OPERATOR_IMPL(RandomPoisson, BaseOperator);</span><br><span class="line"><span class="comment">// 向Mindspore框架注册算子入口</span></span><br><span class="line">REGISTER_PRIMITIVE_EVAL_IMPL(RandomPoisson, prim::kPrimRandomPoisson, RandomPoissonInfer, <span class="literal">nullptr</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;  <span class="comment">// namespace ops</span></span><br><span class="line">&#125;  <span class="comment">// namespace mindspore</span></span><br></pre></td></tr></table></figure><h2 id="C-侧GPU算子实现"><a href="#C-侧GPU算子实现" class="headerlink" title="C++侧GPU算子实现"></a>C++侧GPU算子实现</h2><p>光是定义了算子的原语还是无法实现完整的功能的，接下来还需要实现算子在不同类型设备上的执行逻辑，由于我的任务是实现GPU算子，因此在这里只分析GPU算子的源码。GPU算子又分为C++实现和CUDA实现两个部分，C++侧负责算子执行前的一些准备工作，CUDA侧主要利用GPU并行计算的能力加速算子的计算。</p><p>首先介绍算子的C++侧实现，算子核函数类同样分为头文件<code>mindspore/ccsrc/plugin/device/gpu/kernel/random/random_poisson_gpu_kernel.h</code>和具体实现<code>mindspore/ccsrc/plugin/device/gpu/kernel/random/random_poisson_gpu_kernel.cc</code>。由于代码比较长，因此以注释的方式去分析和解读代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++侧算子核函数的头文件定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MINDSPORE_CCSRC_BACKEND_KERNEL_COMPILER_GPU_RANDOM_RANDOM_POISSON_GPU_KERNEL_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINDSPORE_CCSRC_BACKEND_KERNEL_COMPILER_GPU_RANDOM_RANDOM_POISSON_GPU_KERNEL_H_</span></span><br><span class="line"><span class="comment">// CUDA相关头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curand_kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cuda_runtime_api.h&gt;</span></span></span><br><span class="line"><span class="comment">// C++标准库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="comment">// Mindspore的GPU算子Kernel有关的头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mindspore/core/ops/random_poisson.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"kernel/common_utils.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/gpu_kernel.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/gpu_kernel_factory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/cuda_impl/cuda_ops/random_op_impl.cuh"</span></span></span><br><span class="line"><span class="comment">// Mindspore将GPU Kernel的定义放在命名空间域`mindspore::kernel`中</span></span><br><span class="line"><span class="keyword">namespace</span> mindspore &#123;</span><br><span class="line"><span class="keyword">namespace</span> kernel &#123;</span><br><span class="line"><span class="comment">// GPU算子类的定义，继承于`NativeGpuKernelMod`类，使用Helper类`MatchKernelHelper`辅助进行参数类型合法性检查、算子支持数据类型注册</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomPoissonGpuKernelMod</span> :</span> <span class="keyword">public</span> NativeGpuKernelMod, <span class="keyword">public</span> MatchKernelHelper&lt;RandomPoissonGpuKernelMod&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// GPU Kernel的默认构造函数和析构函数</span></span><br><span class="line">  RandomPoissonGpuKernelMod() = <span class="keyword">default</span>;</span><br><span class="line">  ~RandomPoissonGpuKernelMod() override = <span class="keyword">default</span>;</span><br><span class="line">  <span class="comment">// 算子初始化，该函数在类的构造过程中只执行一次，可以在函数中设置一些非输入输出类的参数的值，如：随机种子seed等</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> BaseOperatorPtr &amp;base_operator, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;inputs,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;outputs)</span> override</span>;</span><br><span class="line">  <span class="comment">// 算子的运行入口，Mindspore为算子分配GPU的device_id，给出输入、工作空间、输出的device端地址</span></span><br><span class="line">  <span class="comment">// 这里调用Helper类的`kernel_func`函数，Helper类对所有参数进行非空检查，检查通过后调用`LaunchKernel`函数正式执行算子</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Launch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;inputs, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;outputs, <span class="keyword">void</span> *cuda_stream)</span> override </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null_input_) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cuda_stream_ = cuda_stream;</span><br><span class="line">    <span class="keyword">return</span> kernel_func_(<span class="keyword">this</span>, inputs, workspace, outputs);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 该方法主要用于计算算子在本次运行中所需要的内存空间大小，该方法仅仅是计算需要的内存空间大小，而不进行实际的内存分配</span></span><br><span class="line">  <span class="comment">// 计算结果的单位为`byte`，因此通常计算结果大小是`element_count * sizeof(element)`</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Resize</span><span class="params">(<span class="keyword">const</span> BaseOperatorPtr &amp;base_operator, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;inputs,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;outputs, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">uint32_t</span>, tensor::TensorPtr&gt; &amp;)</span> override</span>;</span><br><span class="line">  <span class="comment">// Helper类函数的实现，将算子支持的所有数据类型组合并构造成支持列表</span></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;KernelAttr, KernelRunFunc&gt;&gt; &amp;GetFuncList() <span class="keyword">const</span> override;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="comment">// 重设算子资源，通常在`Resize`函数中使用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">ResetResource</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    rate_elements_ = <span class="number">1</span>;</span><br><span class="line">    output_elements_ = <span class="number">1</span>;</span><br><span class="line">    is_null_input_ = <span class="literal">false</span>;</span><br><span class="line">    input_size_list_.clear();</span><br><span class="line">    output_size_list_.clear();</span><br><span class="line">    workspace_size_list_.clear();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 用于向Mindspore框架返回算子支持的数据类型，与Helper类的`OpSupport`和`GetFuncList`函数配合使用</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelAttr&gt; GetOpSupport() override &#123; <span class="keyword">return</span> OpSupport(); &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// 算子核函数执行方法，在该方法中调用CUDA核函数，使用GPU加速算子计算</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">LaunchKernel</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;kernel::AddressPtr&gt; &amp;inputs, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;kernel::AddressPtr&gt; &amp;outputs)</span></span>;</span><br><span class="line">  <span class="comment">// 算子私有变量，主要储存随机种子seed的值，和各个输入元素所占内存空间大小</span></span><br><span class="line">  <span class="keyword">int64_t</span> rate_elements_;</span><br><span class="line">  <span class="keyword">int64_t</span> output_elements_;</span><br><span class="line">  <span class="keyword">int64_t</span> unit_shape_size_;</span><br><span class="line">  <span class="keyword">int64_t</span> unit_rate_size_;</span><br><span class="line">  <span class="keyword">int64_t</span> unit_output_size_;</span><br><span class="line">  <span class="keyword">int64_t</span> seed_&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">int64_t</span> seed2_&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">bool</span> is_null_input_&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">  <span class="keyword">void</span> *cuda_stream_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;  <span class="comment">// namespace kernel</span></span><br><span class="line">&#125;  <span class="comment">// namespace mindspore</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MINDSPORE_CCSRC_BACKEND_KERNEL_COMPILER_GPU_RANDOM_RANDOM_POISSON_GPU_KERNEL_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算子GPU Kernel头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/random/random_poisson_gpu_kernel.h"</span></span></span><br><span class="line"><span class="comment">// C++标准库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">// Mindspore工具类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ir/anf.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils/log_adapter.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"kernel/common_utils.h"</span></span></span><br><span class="line"><span class="comment">// CUDA FP16头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/cuda_fp16.h"</span></span></span><br><span class="line"><span class="comment">// 命名空间域`mindspore::kernel`</span></span><br><span class="line"><span class="keyword">namespace</span> mindspore &#123;</span><br><span class="line"><span class="keyword">namespace</span> kernel &#123;</span><br><span class="line"><span class="comment">// 匿名命名空间域，存放只有本算子使用的宏定义，用于注册算子支持的数据类型</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">using</span> KernelRunFunc = RandomPoissonGpuKernelMod::KernelRunFunc;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD_KERNEL(shape_dtype, rate_dtype, output_dtype, rate_type, output_type) \</span></span><br><span class="line">  &#123;                                                                               \</span><br><span class="line">    KernelAttr()                                                                  \</span><br><span class="line">      .AddInputAttr(kNumberType##shape_dtype)                                     \</span><br><span class="line">      .AddInputAttr(kNumberType##rate_dtype)                                      \</span><br><span class="line">      .AddOutputAttr(kNumberType##output_dtype),                                  \</span><br><span class="line">      &amp;RandomPoissonGpuKernelMod::LaunchKernel&lt;rate_type, output_type&gt;            \</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  <span class="comment">// namespace</span></span><br><span class="line"><span class="comment">// 算子初始化函数，只会在类构造时调用一次</span></span><br><span class="line"><span class="keyword">bool</span> RandomPoissonGpuKernelMod::Init(<span class="keyword">const</span> BaseOperatorPtr &amp;base_operator, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;inputs,</span><br><span class="line">                                     <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;outputs) &#123;</span><br><span class="line">  MS_EXCEPTION_IF_NULL(base_operator);</span><br><span class="line">  kernel_name_ = base_operator-&gt;name();</span><br><span class="line">  <span class="comment">// 使用Helper函数对参数进行合法性检查</span></span><br><span class="line">  <span class="keyword">if</span> (!MatchKernelFunc(base_operator, inputs, outputs)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取各种参数类型所占的内存空间，用于在`Resize`函数中计算算子运行过程中所需内存大小</span></span><br><span class="line">  <span class="keyword">auto</span> kernel_attr = GetKernelAttrFromTensors(inputs, outputs);</span><br><span class="line">  unit_shape_size_ = abstract::TypeIdSize(kernel_attr.GetInputAttr(<span class="number">0</span>).first);</span><br><span class="line">  unit_rate_size_ = abstract::TypeIdSize(kernel_attr.GetInputAttr(<span class="number">1</span>).first);</span><br><span class="line">  unit_output_size_ = abstract::TypeIdSize(kernel_attr.GetOutputAttr(<span class="number">0</span>).first);</span><br><span class="line">  <span class="comment">// 获取算子的随机种子seed、seed2</span></span><br><span class="line">  <span class="keyword">auto</span> kernel_ptr = <span class="built_in">std</span>::make_shared&lt;ops::RandomPoisson&gt;(base_operator-&gt;GetPrim());</span><br><span class="line">  seed_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(kernel_ptr-&gt;get_seed());</span><br><span class="line">  seed2_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(kernel_ptr-&gt;get_seed2());</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算算子运行过程中所需内存空间的大小，注意单位为`byte`</span></span><br><span class="line"><span class="keyword">int</span> RandomPoissonGpuKernelMod::Resize(<span class="keyword">const</span> BaseOperatorPtr &amp;base_operator, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;inputs,</span><br><span class="line">                                      <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;outputs,</span><br><span class="line">                                      <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">uint32_t</span>, tensor::TensorPtr&gt; &amp;) &#123;</span><br><span class="line">  <span class="comment">// 检查所有的输入维度是否合法</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;input : inputs) &#123;</span><br><span class="line">    <span class="comment">// If any input shape contains -1, means input shape is dynamic, so just return do nothing.</span></span><br><span class="line">    <span class="keyword">auto</span> input_shape = input-&gt;GetShapeVector();</span><br><span class="line">    <span class="keyword">if</span> (!IsValidShape(input_shape)) &#123;</span><br><span class="line">      <span class="keyword">return</span> KRET_UNKNOWN_SHAPE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在计算本轮计算所需内存空间时，首先需要将之前产生的脏数据清空</span></span><br><span class="line">  ResetResource();</span><br><span class="line">  <span class="comment">// 计算输入输出的元素的个数</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; shape_shape = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt;(inputs.at(kIndex0)-&gt;GetDeviceShapeAdaptively().begin(),</span><br><span class="line">                                                          inputs.at(kIndex0)-&gt;GetDeviceShapeAdaptively().end());</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; rate_shape = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt;(inputs.at(kIndex1)-&gt;GetDeviceShapeAdaptively().begin(),</span><br><span class="line">                                                         inputs.at(kIndex1)-&gt;GetDeviceShapeAdaptively().end());</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; output_shape = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt;(outputs.at(kIndex0)-&gt;GetDeviceShapeAdaptively().begin(),</span><br><span class="line">                                                           outputs.at(kIndex0)-&gt;GetDeviceShapeAdaptively().end());</span><br><span class="line">  <span class="keyword">int64_t</span> shape_elements = <span class="built_in">std</span>::accumulate(shape_shape.begin(), shape_shape.end(), <span class="number">1</span>, <span class="built_in">std</span>::multiplies&lt;<span class="keyword">int64_t</span>&gt;());</span><br><span class="line">  rate_elements_ = <span class="built_in">std</span>::accumulate(rate_shape.begin(), rate_shape.end(), <span class="number">1</span>, <span class="built_in">std</span>::multiplies&lt;<span class="keyword">int64_t</span>&gt;());</span><br><span class="line">  output_elements_ = <span class="built_in">std</span>::accumulate(output_shape.begin(), output_shape.end(), <span class="number">1</span>, <span class="built_in">std</span>::multiplies&lt;<span class="keyword">int64_t</span>&gt;());</span><br><span class="line">  <span class="keyword">if</span> (output_elements_ == <span class="number">0</span>) &#123;</span><br><span class="line">    is_null_input_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将计算结果储存到数组中</span></span><br><span class="line">  input_size_list_.emplace_back(shape_elements * unit_shape_size_);</span><br><span class="line">  input_size_list_.emplace_back(rate_elements_ * unit_rate_size_);</span><br><span class="line">  output_size_list_.emplace_back(output_elements_ * unit_output_size_);</span><br><span class="line">  workspace_size_list_.push_back(output_elements_ * <span class="keyword">sizeof</span>(curandState));</span><br><span class="line">  <span class="keyword">return</span> KRET_OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 算子正式执行入口函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> RandomPoissonGpuKernelMod::LaunchKernel(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;kernel::AddressPtr&gt; &amp;inputs,</span><br><span class="line">                                             <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span><br><span class="line">                                             <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;kernel::AddressPtr&gt; &amp;outputs) &#123;</span><br><span class="line">  <span class="comment">// 获取输入输出的Device端地址</span></span><br><span class="line">  R *rate_addr = GetDeviceAddress&lt;R&gt;(inputs, <span class="number">1</span>);</span><br><span class="line">  T *output = GetDeviceAddress&lt;T&gt;(outputs, <span class="number">0</span>);</span><br><span class="line">  curandState *devStates = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">void</span> *workspace_addr = GetDeviceAddress&lt;<span class="keyword">void</span> *&gt;(workspace, <span class="number">0</span>);</span><br><span class="line">  devStates = <span class="keyword">reinterpret_cast</span>&lt;curandState *&gt;(workspace_addr);</span><br><span class="line">  <span class="comment">// CUDA核函数</span></span><br><span class="line">  RandomPoisson(seed_, seed2_, devStates, rate_addr, rate_elements_, output, output_elements_,</span><br><span class="line">                <span class="keyword">reinterpret_cast</span>&lt;cudaStream_t&gt;(cuda_stream_));</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册算子支持的参数类型，由于参数排列组合类型比较多，因此将实际注册的函数抽离成一个宏定义，使得注册列表看起来更简洁</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;KernelAttr, KernelRunFunc&gt;&gt; &amp;RandomPoissonGpuKernelMod::GetFuncList() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;KernelAttr, KernelRunFunc&gt;&gt; func_list = &#123;</span><br><span class="line">    ADD_KERNEL(Int32, Float16, Float16, half, half),     ADD_KERNEL(Int32, Float16, Float32, half, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Float16, Float64, half, <span class="keyword">double</span>),   ADD_KERNEL(Int32, Float16, Int32, half, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Float16, Int64, half, <span class="keyword">int64_t</span>),</span><br><span class="line"></span><br><span class="line">    ADD_KERNEL(Int32, Float32, Float16, <span class="keyword">float</span>, half),    ADD_KERNEL(Int32, Float32, Float32, <span class="keyword">float</span>, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Float32, Float64, <span class="keyword">float</span>, <span class="keyword">double</span>),  ADD_KERNEL(Int32, Float32, Int32, <span class="keyword">float</span>, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Float32, Int64, <span class="keyword">float</span>, <span class="keyword">int64_t</span>),</span><br><span class="line"></span><br><span class="line">    ADD_KERNEL(Int32, Float64, Float16, <span class="keyword">double</span>, half),   ADD_KERNEL(Int32, Float64, Float32, <span class="keyword">double</span>, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Float64, Float64, <span class="keyword">double</span>, <span class="keyword">double</span>), ADD_KERNEL(Int32, Float64, Int32, <span class="keyword">double</span>, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Float64, Int64, <span class="keyword">double</span>, <span class="keyword">int64_t</span>),</span><br><span class="line"></span><br><span class="line">    ADD_KERNEL(Int32, Int32, Float16, <span class="keyword">int</span>, half),        ADD_KERNEL(Int32, Int32, Float32, <span class="keyword">int</span>, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Int32, Float64, <span class="keyword">int</span>, <span class="keyword">double</span>),      ADD_KERNEL(Int32, Int32, Int32, <span class="keyword">int</span>, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Int32, Int64, <span class="keyword">int</span>, <span class="keyword">int64_t</span>),</span><br><span class="line"></span><br><span class="line">    ADD_KERNEL(Int32, Int64, Float16, <span class="keyword">int64_t</span>, half),    ADD_KERNEL(Int32, Int64, Float32, <span class="keyword">int64_t</span>, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Int64, Float64, <span class="keyword">int64_t</span>, <span class="keyword">double</span>),  ADD_KERNEL(Int32, Int64, Int32, <span class="keyword">int64_t</span>, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int32, Int64, Int64, <span class="keyword">int64_t</span>, <span class="keyword">int64_t</span>),</span><br><span class="line"></span><br><span class="line">    ADD_KERNEL(Int64, Float16, Float16, half, half),     ADD_KERNEL(Int64, Float16, Float32, half, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Float16, Float64, half, <span class="keyword">double</span>),   ADD_KERNEL(Int64, Float16, Int32, half, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Float16, Int64, half, <span class="keyword">int64_t</span>),</span><br><span class="line"></span><br><span class="line">    ADD_KERNEL(Int64, Float32, Float16, <span class="keyword">float</span>, half),    ADD_KERNEL(Int64, Float32, Float32, <span class="keyword">float</span>, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Float32, Float64, <span class="keyword">float</span>, <span class="keyword">double</span>),  ADD_KERNEL(Int64, Float32, Int32, <span class="keyword">float</span>, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Float32, Int64, <span class="keyword">float</span>, <span class="keyword">int64_t</span>),</span><br><span class="line"></span><br><span class="line">    ADD_KERNEL(Int64, Float64, Float16, <span class="keyword">double</span>, half),   ADD_KERNEL(Int64, Float64, Float32, <span class="keyword">double</span>, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Float64, Float64, <span class="keyword">double</span>, <span class="keyword">double</span>), ADD_KERNEL(Int64, Float64, Int32, <span class="keyword">double</span>, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Float64, Int64, <span class="keyword">double</span>, <span class="keyword">int64_t</span>),</span><br><span class="line"></span><br><span class="line">    ADD_KERNEL(Int64, Int32, Float16, <span class="keyword">int</span>, half),        ADD_KERNEL(Int64, Int32, Float32, <span class="keyword">int</span>, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Int32, Float64, <span class="keyword">int</span>, <span class="keyword">double</span>),      ADD_KERNEL(Int64, Int32, Int32, <span class="keyword">int</span>, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Int32, Int64, <span class="keyword">int</span>, <span class="keyword">int64_t</span>),</span><br><span class="line"></span><br><span class="line">    ADD_KERNEL(Int64, Int64, Float16, <span class="keyword">int64_t</span>, half),    ADD_KERNEL(Int64, Int64, Float32, <span class="keyword">int64_t</span>, <span class="keyword">float</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Int64, Float64, <span class="keyword">int64_t</span>, <span class="keyword">double</span>),  ADD_KERNEL(Int64, Int64, Int32, <span class="keyword">int64_t</span>, <span class="keyword">int</span>),</span><br><span class="line">    ADD_KERNEL(Int64, Int64, Int64, <span class="keyword">int64_t</span>, <span class="keyword">int64_t</span>)&#125;;</span><br><span class="line">  <span class="keyword">return</span> func_list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册随机泊松算子的GPU Kernel</span></span><br><span class="line">MS_KERNEL_FACTORY_REG(NativeGpuKernelMod, RandomPoisson, RandomPoissonGpuKernelMod);</span><br><span class="line">&#125;  <span class="comment">// namespace kernel</span></span><br><span class="line">&#125;  <span class="comment">// namespace mindspore</span></span><br></pre></td></tr></table></figure><h2 id="CUDA核函数实现"><a href="#CUDA核函数实现" class="headerlink" title="CUDA核函数实现"></a>CUDA核函数实现</h2><p>利用GPU并行计算能力，在计算量大的情况下，算子的加速效果十分明显。CUDA核函数的实现也分为函数定义和函数实现，分别写在文件<code>mindspore/ccsrc/plugin/device/gpu/kernel/cuda_impl/cuda_ops/random_op_impl.cuh</code>和文件<code>mindspore/ccsrc/plugin/device/gpu/kernel/cuda_impl/cuda_ops/random_op_impl.cu</code>中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义CUDA核函数头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MINDSPORE_CCSRC_PLUGIN_DEVICE_GPU_KERNEL_CUDA_IMPL_CUDA_OPS_RANDOM_OP_IMPL_CUH_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINDSPORE_CCSRC_PLUGIN_DEVICE_GPU_KERNEL_CUDA_IMPL_CUDA_OPS_RANDOM_OP_IMPL_CUH_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curand_kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/cuda_impl/cuda_ops/cuda_common.h"</span></span></span><br><span class="line"><span class="comment">// 随机泊松算子CUDA核函数定义</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">CUDA_LIB_EXPORT <span class="keyword">void</span> <span class="title">RandomPoisson</span><span class="params">(<span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, curandState *globalState,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   R *rate, <span class="keyword">int64_t</span> rate_size, T *output, <span class="keyword">size_t</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   cudaStream_t cuda_stream)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MINDSPORE_CCSRC_PLUGIN_DEVICE_GPU_KERNEL_CUDA_IMPL_CUDA_OPS_RANDOM_OP_IMPL_CUH_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"random_op_impl.cuh"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/cuda_fp16.h"</span></span></span><br><span class="line"><span class="comment">// CUDA核函数实现，注意只有`__global__`字段的函数才会在GPU上执行</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span><br><span class="line">__<span class="function">global__ <span class="keyword">void</span> <span class="title">RandomPoissonKernel</span><span class="params">(<span class="keyword">int</span> seed, curandState *globalState, R *rate, <span class="keyword">int</span> rate_size, T *output,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">size_t</span> count)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = blockIdx.x * blockDim.x + threadIdx.x; i &lt; (count); i += blockDim.x * gridDim.x) &#123;</span><br><span class="line">    <span class="comment">// 使用curand库的接口，初始化curandstate</span></span><br><span class="line">    curand_init(seed, i, <span class="number">0</span>, &amp;globalState[i]);</span><br><span class="line">    <span class="comment">// 将结果的顺序与`rate`的顺序对齐</span></span><br><span class="line">    <span class="keyword">auto</span> j = i % rate_size;</span><br><span class="line">    <span class="comment">// 使用curand库的泊松接口生成随机泊松值</span></span><br><span class="line">    output[i] = (T)curand_poisson(&amp;globalState[i], rate[j]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CUDA核函数入口</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandomPoisson</span><span class="params">(<span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, curandState *globalState, R *rate, <span class="keyword">int64_t</span> rate_size, T *output, <span class="keyword">size_t</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                   cudaStream_t cuda_stream)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 使用两个随机种子seed、seed2对random_device类进行初始化</span></span><br><span class="line">  <span class="keyword">int</span> RNG_seed = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::random_device rd;</span><br><span class="line">  <span class="keyword">if</span> (seed2 != <span class="number">0</span>) &#123;</span><br><span class="line">    RNG_seed = seed2;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seed != <span class="number">0</span>) &#123;</span><br><span class="line">    RNG_seed = seed;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    RNG_seed = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(rd());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用CUDA核函数</span></span><br><span class="line">  RandomPoissonKernel&lt;&lt;&lt;GET_BLOCKS(count), GET_THREADS, <span class="number">0</span>, cuda_stream&gt;&gt;&gt;(RNG_seed, globalState, rate, rate_size,</span><br><span class="line">                                                                          output, count);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册核函数支持的数据类型，由于参数类型组合比较多，因此使用宏定义抽离</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD_RANDOM_POISSON(rate_type, output_type) \</span></span><br><span class="line">  <span class="keyword">template</span> CUDA_LIB_EXPORT <span class="keyword">void</span> RandomPoisson&lt;rate_type, output_type&gt;(<span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, curandState *globalState, \</span><br><span class="line">                                                                      rate_type *rate, <span class="keyword">int64_t</span> rate_size, \</span><br><span class="line">                                                                      output_type *output, <span class="keyword">size_t</span> count, \</span><br><span class="line">                                                                      cudaStream_t cuda_stream);</span><br><span class="line"></span><br><span class="line">ADD_RANDOM_POISSON(half, half)</span><br><span class="line">ADD_RANDOM_POISSON(half, <span class="keyword">float</span>)</span><br><span class="line">ADD_RANDOM_POISSON(half, <span class="keyword">double</span>)</span><br><span class="line">ADD_RANDOM_POISSON(half, <span class="keyword">int</span>)</span><br><span class="line">ADD_RANDOM_POISSON(half, <span class="keyword">int64_t</span>)</span><br><span class="line"></span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">float</span>, half)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">float</span>, <span class="keyword">float</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">float</span>, <span class="keyword">double</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">float</span>, <span class="keyword">int</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">float</span>, <span class="keyword">int64_t</span>)</span><br><span class="line"></span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">double</span>, half)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">double</span>, <span class="keyword">float</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">double</span>, <span class="keyword">double</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">double</span>, <span class="keyword">int</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">double</span>, <span class="keyword">int64_t</span>)</span><br><span class="line"></span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int</span>, half)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int</span>, <span class="keyword">float</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int</span>, <span class="keyword">double</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int</span>, <span class="keyword">int</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int</span>, <span class="keyword">int64_t</span>)</span><br><span class="line"></span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int64_t</span>, half)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int64_t</span>, <span class="keyword">float</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int64_t</span>, <span class="keyword">double</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int64_t</span>, <span class="keyword">int</span>)</span><br><span class="line">ADD_RANDOM_POISSON(<span class="keyword">int64_t</span>, <span class="keyword">int64_t</span>)</span><br></pre></td></tr></table></figure><h1 id="算子执行流程图"><a href="#算子执行流程图" class="headerlink" title="算子执行流程图"></a>算子执行流程图</h1><p>对算子源码分析完成后，接下来用一副流程图来描述随机泊松算子的完整执行过程。</p><p><img src="images/mindspore/RandomPoisson%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="执行流程图"></p><h1 id="算子测试"><a href="#算子测试" class="headerlink" title="算子测试"></a>算子测试</h1><p>对算子计算结果进行测试，测试覆盖了算子支持的所有数据类型，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mindspore <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> mindspore <span class="keyword">import</span> Tensor</span><br><span class="line"><span class="keyword">from</span> mindspore <span class="keyword">import</span> ops</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">ms.set_context(device_target=<span class="string">"GPU"</span>)</span><br><span class="line"></span><br><span class="line">int_type = [ms.int32, ms.int64]</span><br><span class="line">float_type = [ms.int32, ms.int64, ms.float16, ms.float32, ms.float64]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> int_type:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> float_type:</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> float_type:</span><br><span class="line">            shape = Tensor(np.array([<span class="number">2</span>, <span class="number">4</span>]), x)</span><br><span class="line">            rate = Tensor(np.array([<span class="number">5</span>, <span class="number">50</span>, <span class="number">500</span>]), y)</span><br><span class="line">            seed = <span class="number">10</span></span><br><span class="line">            seed2 = <span class="number">20</span></span><br><span class="line">            random_poisson = ops.operations.random_ops.RandomPoisson(seed=seed, seed2=seed2, dtype=z)</span><br><span class="line">            output = random_poisson(shape, rate)</span><br><span class="line">            print(<span class="string">'=====Devided line====='</span>)</span><br><span class="line">            print(output)</span><br><span class="line">            print(output.shape)</span><br><span class="line">            print(output.dtype)</span><br><span class="line"></span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'Process time(s): '</span>, end_time - start_time)</span><br></pre></td></tr></table></figure><p>算子测试结果的部分截图如下：</p><p><img src="images/mindspore/RandomPoisson_test_result.png" alt="测试结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;算子介绍&quot;&gt;&lt;a href=&quot;#算子介绍&quot; class=&quot;headerlink&quot; title=&quot;算子介绍&quot;&gt;&lt;/a&gt;算子介绍&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;泊松分布是一种统计与概率学里常见的离散概率分布，适合描述单位时间内随机事件发生的次数的概率分布，如：某一服务设施在一定时间内受到的服务请求的次数、电话交换机接到呼叫的次数、汽车站台的候车人数等。&lt;/p&gt;&lt;p&gt;泊松分布的函数表达式为：&lt;/p&gt;&lt;p&gt;$$P(X=k) = \frac{e^{-\Lambda}\Lambda^k}{k!}$$&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mindspore" scheme="http://www.fisheryung.top/tags/mindspore/"/>
    
  </entry>
  
  <entry>
    <title>GDB调试入门</title>
    <link href="http://www.fisheryung.top/gdb%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8.html"/>
    <id>http://www.fisheryung.top/gdb调试入门.html</id>
    <published>2022-09-16T11:48:40.000Z</published>
    <updated>2022-09-18T12:25:17.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在写Mindspore算子过程中，由于自己粗心、又或是理解出现了一些偏差，导致项目在编译、运行时会出现错误。对于一些简单的语法错误，语法检查器可以帮助我们纠正错误，但有一部分错误只有在运行时才会暴露出来，这一类错误很难发现，程序崩溃之后只会输出Core dump，使用print大法虽然能知道程序在哪一行Core dump了，而具体是什么原因导致的Core dump还是需要使用调试器进一步分析。这时候，GDB就派上用场了，虽然久仰GDB大名，但真正将GDB调试用到实战中还是第一次，因此必须将这一过程记录下来。</p><a id="more"></a><h1 id="算子介绍"><a href="#算子介绍" class="headerlink" title="算子介绍"></a>算子介绍</h1><p>在真正开始调试之前，首先要介绍一下算子的功能。首先，算子的名字为<code>Sample Distorted Bounding Box V2</code>，算子大致的功能为：为一张图片生成一个随机大小的边框，该边框的长宽比、覆盖面积大小符合给定的要求，用户可以使用该边框对图片进行裁剪、部分随机扭曲，该算子通常用在训练数据的增强中。</p><p>在友商的产品中，该算子只实现了CPU版本，而Mindspore要求实现一个GPU版本的算子，为了发挥CUDA并行计算的优势，我想到的一个实现思路如下：使用CUDA随机生成N个边框，将这些边框的信息从Device端复制到Host端中进行逻辑判断，选取一个符合要求的边框作为结果，将结果从Host端复制到Device端并作为算子的最终结果返回。虽然数据在Host端和Device端反复传输，可能会耗费大量的时间，但是实现了再谈如何去优化吧。</p><p>由于算子前端已经写好，因此只需要写一个GPU Kernel的实现即可，主要分为以下四个源文件，源码比较长，我将其放到本篇最后一个章节：</p><ul><li><code>sample_distorted_bounding_box_v2_gpu_kernel.h</code>: GPU算子的头文件，通过继承GPU Kernel父类，定义算子的具体类。</li><li><code>sample_distorted_bounding_box_v2_gpu_kernel.cc</code>: GPU算子的具体实现，通常包括参数检查、内存分配、算子初始化、算子注册等实现。</li><li><code>sample_distorted_bounding_box_v2_impl.cuh</code>: 算子CUDA实现的头文件，定义CUDA核函数的入口。</li><li><code>sample_distorted_bounding_box_v2_impl.cu</code>: 算子CUDA核函数的具体实现。</li></ul><p>按照这个思路编码完成后，将项目编译成Python包并安装测试，测试过程中遇到的第一个错误是<code>undefined symbol</code>，这个错误通常是因为函数的参数类型没有对齐造成的，使用<code>c++filt</code>可以查看调用的函数，将其参数与源码中函数的定义对比，查看是哪些类型没有对齐，将其对齐即可。</p><p><img src="images/gdb/undefined_symbol_error.png" alt="Undefined symbol error"></p><p><img src="images/gdb/c%2B%2Bfilt.png" alt="c++filt"></p><p>解决上一个错误后，接下来的便是Core dump错误，需要请GDB出场了。</p><h1 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h1><p>首先将当前的目录切换到项目根目录下，因为GDB调试器是基于当前目录启动的，切换到项目根目录下方便等会对源文件打断点。</p><p>接着启动GDB调试器，参数为要调试的命令。比如，我这里要调试的程序是用Python运行的，那么<code>--args</code>后面跟的参数就是Python运行程序的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb --args python ~/pyProject/mindspore-dev/SampleDistortedBoundingBox/test_mindspore.py</span><br></pre></td></tr></table></figure><p><img src="images/gdb/start_gdb.png" alt="Start GDB"></p><p>调试器启动后，找到需要打断点的源文件和对应代码行，将断点打上去。比如，我需要在算子的<code>LaunchKernel</code>函数中，调用CUDA核函数前，查看传递到CUDA核函数中的各个参数是否合法，就需要在函数<code>SampleDistortedBoundingBoxV2</code>前打一个断点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> SampleDistortedBoundingBoxV2GpuKernelMod::LaunchKernel(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;inputs,</span><br><span class="line">                                                            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span><br><span class="line">                                                            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;outputs) &#123;</span><br><span class="line">  <span class="keyword">if</span> (is_null_input_) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  T *image_size_addr = GetDeviceAddress&lt;T&gt;(inputs, kIndex0);</span><br><span class="line">  <span class="keyword">int32_t</span>* workspace_addr = GetDeviceAddress&lt;<span class="keyword">int32_t</span>&gt;(workspace, kIndex0);</span><br><span class="line">  <span class="keyword">void</span> *curandState_addr = GetDeviceAddress&lt;<span class="keyword">void</span> *&gt;(workspace, kIndex1);</span><br><span class="line">  curandState *devStates = <span class="keyword">reinterpret_cast</span>&lt;curandState *&gt;(curandState_addr);</span><br><span class="line">  SampleDistortedBoundingBoxV2(image_size_addr, seed_, seed2_,</span><br><span class="line">                               aspect_ratio_range_[kIndex0], aspect_ratio_range_[kIndex1],</span><br><span class="line">                               area_range_[kIndex0], area_range_[kIndex1],</span><br><span class="line">                               max_attempts_, use_image_if_no_bounding_boxes_,</span><br><span class="line">                               workspace_addr, devStates,</span><br><span class="line">                               <span class="keyword">reinterpret_cast</span>&lt;cudaStream_t&gt;(cuda_stream_));</span><br><span class="line">  SelectBox&lt;T&gt;(inputs, workspace, outputs);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>SampleDistortedBoundingBoxV2</code>对应源文件中是365行，因此在365行处打一个断点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b mindspore/ccsrc/plugin/device/gpu/kernel/other/sample_distorted_bounding_box_v2_gpu_kernel.cc:365</span><br></pre></td></tr></table></figure><p>此时GDB会提示执行程序的源码中没有这个文件，在后面加载动态库时，如果GDB发现该源文件，就会打上对应的断点，输入<code>y</code>。这是因为程序还没开始运行，我们写的算子被编译为动态链接库了，还没有开始加载，GDB不确定你打的这个断点是否能命中，如果该文件对应的动态链接库在未来加载了，GDB就会打上断点，在运行到断点位置时停下来。</p><p>打上断点后，可以输入<code>info br</code>查看断点信息，由于动态链接库未加载，因此地址<code>Address</code>还是<code>&lt;PENDING&gt;</code>状态。</p><p><img src="images/gdb/info_br.png" alt="查看断点"></p><p>接下来输入<code>r</code>运行程序，程序运行到断点处会停下来，此时可以查看断点处的各种变量，输入<code>info args</code>可以查看当前栈帧内的所有变量值，<code>print xxx</code>可以查看某个变量的值，<code>backtrace</code>查看函数调用栈。</p><p><img src="images/gdb/info_args.png" alt="查看变量值"></p><p>在查看变量<code>image_size_addr</code>的值时，我发现这个地址的值永远是<code>0</code>，无法正确获取到输入图片的尺寸。这是因为<code>image_size_addr</code>获取的是Device端地址，也就是说该变量的值实际上储存在GPU中，在Host端直接读取是会产生错误的。</p><p>但是下一个问题就来了，函数<code>SampleDistortedBoundingBoxV2</code>不是写在<code>.cu</code>文件中了吗？CUDA中的函数使用Device端地址获取变量值不是正确的获取方法吗？那就得看看这个函数得源码了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SampleDistortedBoundingBoxV2</span><span class="params">(T* image_size, <span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, <span class="keyword">float</span> ms_min_sample_aspect_ratio,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> ms_max_sample_aspect_ratio,<span class="keyword">float</span> min_area_range,<span class="keyword">float</span> max_area_range ,<span class="keyword">int</span> max_attempts,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">bool</span> use_image_if_no_bounding_boxes,<span class="keyword">int</span>* output,curandState *globalState,cudaStream_t cuda_stream)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ms_original_height = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(image_size[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">int</span> ms_original_width = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(image_size[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> RNG_seed = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::random_device rd;</span><br><span class="line">  <span class="keyword">if</span> (seed2 != <span class="number">0</span>) &#123;</span><br><span class="line">    RNG_seed = seed2;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seed != <span class="number">0</span>) &#123;</span><br><span class="line">    RNG_seed = seed;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    RNG_seed = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(rd());</span><br><span class="line">  &#125;</span><br><span class="line">  GenerateRandomCropKernel&lt;&lt;&lt;GET_BLOCKS(max_attempts), GET_THREADS, <span class="number">0</span>, cuda_stream&gt;&gt;&gt;</span><br><span class="line">               (RNG_seed, globalState,  ms_original_height, ms_original_width,min_area_range, max_area_range,ms_min_sample_aspect_ratio,ms_max_sample_aspect_ratio, output, max_attempts);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咋一看好像没什么问题，但实际上，只有在函数或变量的定义前加上<code>__device__</code>或<code>__global__</code>字段时，该函数或变量才真正在Device端上执行。因此，函数<code>SampleDistortedBoundingBoxV2</code>虽然写在了<code>.cu</code>文件中，但实际上还是在Host端上运行的，这也就导致了函数在获取<code>image_size</code>时出现了非法访存的操作，最终导致Core dump。</p><p>弄明白Core dump的原因后，如何解决它就变得很简单了。将<code>image_size</code>数据从Device端同步到Host端后再使用即可，修改后的<code>LaunchKernel</code>函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> SampleDistortedBoundingBoxV2GpuKernelMod::LaunchKernel(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;inputs,</span><br><span class="line">                                                            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span><br><span class="line">                                                            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;outputs) &#123;</span><br><span class="line">  <span class="keyword">if</span> (is_null_input_) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cudaStream_t stream = <span class="keyword">reinterpret_cast</span>&lt;cudaStream_t&gt;(cuda_stream_);</span><br><span class="line">  T *image_size_addr = GetDeviceAddress&lt;T&gt;(inputs, kIndex0);</span><br><span class="line">  T image_size[kShapeSize3];</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(&amp;image_size, image_size_addr, kShapeSize3 * unit_dtype_size_, cudaMemcpyDeviceToHost, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int32_t</span>* workspace_addr = GetDeviceAddress&lt;<span class="keyword">int32_t</span>&gt;(workspace, kIndex0);</span><br><span class="line">  <span class="keyword">void</span> *curandState_addr = GetDeviceAddress&lt;<span class="keyword">void</span> *&gt;(workspace, kIndex1);</span><br><span class="line">  curandState *devStates = <span class="keyword">reinterpret_cast</span>&lt;curandState *&gt;(curandState_addr);</span><br><span class="line">  SampleDistortedBoundingBoxV2(image_size, seed_, seed2_,</span><br><span class="line">            aspect_ratio_range_[kIndex0], aspect_ratio_range_[kIndex1],</span><br><span class="line">            area_range_[kIndex0], area_range_[kIndex1],</span><br><span class="line">            max_attempts_, use_image_if_no_bounding_boxes_,</span><br><span class="line">            workspace_addr, devStates,</span><br><span class="line">            <span class="keyword">reinterpret_cast</span>&lt;cudaStream_t&gt;(cuda_stream_));</span><br><span class="line">  SelectBox&lt;T&gt;(inputs, workspace, outputs);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>重新编译、安装一次<code>mindspore-gpu</code>包，再次启动GDB，在同样的位置打下断点，程序运行到断点停下来后，查看<code>image_size</code>变量，可以看到GDN正确地输出变量值，并且变量地址也是正确的Host端地址了。</p><p><img src="images/gdb/print_image_size.png" alt="Bug修复后"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这次实战之前，我天真地以为GDB只能调试C/C++程序，并且还以为只能调试可执行的文件，直到这一次实战我才了解到，GDB实际上是一个通用的调试器，功能非常强大。虽然之前用过GDB，但是都是调试<code>Hello world</code>之类的C/C++小程序，只能说是小打小闹，遇到大型项目的调试就无从下手了，要不是这一次print大法实在是不好使了，我还一直不情愿去学习、使用、将GDB真正用到实战中。真正上手使用GDB并解决问题过后，现在的我就觉得GDB可太香辣！</p><p>关于GDB的工作原理，我是一窍不通的，接下来需要花点时间去学习一下GDB到底是如何工作的，进一步提高我对GDB的理解。</p><p>最后贴一个GDB命令速查表，<a href="https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf" target="_blank" rel="noopener">链接</a>在此。</p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><ol><li><code>sample_distorted_bounding_box_v2_gpu_kernel.h</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2022 Huawei Technologies Co., Ltd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MINDSPORE_CCSRC_BACKEND_KERNEL_COMPILER_GPU_SAMPLE_DISTORTED_BOUNDING_BOX_V2_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINDSPORE_CCSRC_BACKEND_KERNEL_COMPILER_GPU_SAMPLE_DISTORTED_BOUNDING_BOX_V2_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curand_kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cuda_runtime_api.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"kernel/common_utils.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mindapi/base/type_id.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/gpu_kernel.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/gpu_kernel_factory.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mindspore &#123;</span><br><span class="line"><span class="keyword">namespace</span> kernel &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Region</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Region() &#123; SetPoint(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); &#125;</span><br><span class="line">  Region(<span class="keyword">int</span> xmin, <span class="keyword">int</span> ymin, <span class="keyword">int</span> xmax, <span class="keyword">int</span> ymax) &#123; SetPoint(xmin, ymin, xmax, ymax); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetPoint</span><span class="params">(<span class="keyword">int</span> xmin, <span class="keyword">int</span> ymin, <span class="keyword">int</span> xmax, <span class="keyword">int</span> ymax)</span> </span>&#123;</span><br><span class="line">    min_x_ = xmin;</span><br><span class="line">    min_y_ = ymin;</span><br><span class="line">    max_x_ = xmax;</span><br><span class="line">    max_y_ = ymax;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">float</span> <span class="title">Area</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;((max_x_ - min_x_) * (max_y_ - min_y_)); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Region <span class="title">Intersect</span><span class="params">(<span class="keyword">const</span> Region &amp;r)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> pmin_x = <span class="built_in">std</span>::max(min_x_, r.min_x_);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> pmin_y = <span class="built_in">std</span>::max(min_y_, r.min_y_);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> pmax_x = <span class="built_in">std</span>::min(max_x_, r.max_x_);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> pmax_y = <span class="built_in">std</span>::min(max_y_, r.max_y_);</span><br><span class="line">    <span class="keyword">if</span> (pmin_x &gt; pmax_x || pmin_y &gt; pmax_y) &#123;</span><br><span class="line">      <span class="keyword">return</span> Region();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Region(pmin_x, pmin_y, pmax_x, pmax_y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> min_x_;</span><br><span class="line">  <span class="keyword">int</span> min_y_;</span><br><span class="line">  <span class="keyword">int</span> max_x_;</span><br><span class="line">  <span class="keyword">int</span> max_y_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleDistortedBoundingBoxV2GpuKernelMod</span> :</span> <span class="keyword">public</span> NativeGpuKernelMod, <span class="keyword">public</span> MatchKernelHelper&lt;SampleDistortedBoundingBoxV2GpuKernelMod&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  SampleDistortedBoundingBoxV2GpuKernelMod() = <span class="keyword">default</span>;</span><br><span class="line">  ~SampleDistortedBoundingBoxV2GpuKernelMod() override = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Launch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;inputs, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;outputs, <span class="keyword">void</span> *cuda_stream)</span> override </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null_input_) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cuda_stream_ = cuda_stream;</span><br><span class="line">    <span class="keyword">return</span> kernel_func_(<span class="keyword">this</span>, inputs, workspace, outputs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> BaseOperatorPtr &amp;base_operator, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;inputs,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;outputs)</span> override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Resize</span><span class="params">(<span class="keyword">const</span> BaseOperatorPtr &amp;base_operator, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;inputs,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;outputs, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">uint32_t</span>, tensor::TensorPtr&gt; &amp;)</span> override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;KernelAttr, KernelRunFunc&gt;&gt; &amp;GetFuncList() <span class="keyword">const</span> override;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">ResetResource</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    bounding_boxes_elements_ = <span class="number">0</span>;</span><br><span class="line">    is_null_input_ = <span class="literal">false</span>;</span><br><span class="line">    input_size_list_.clear();</span><br><span class="line">    output_size_list_.clear();</span><br><span class="line">    workspace_size_list_.clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelAttr&gt; GetOpSupport() override &#123; <span class="keyword">return</span> OpSupport(); &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">SatisfiesOverlapConstraints</span><span class="params">(<span class="keyword">const</span> Region &amp;crop, <span class="keyword">float</span> minimum_object_covered,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Region&gt; &amp;bounding_boxes)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SelectBox</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;kernel::AddressPtr&gt; &amp;inputs, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;kernel::AddressPtr&gt; &amp;outputs)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">LaunchKernel</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;kernel::AddressPtr&gt; &amp;inputs, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;kernel::AddressPtr&gt; &amp;outputs)</span></span>;</span><br><span class="line"></span><br><span class="line">  TypeId dtype_&#123;kTypeUnknown&#125;;</span><br><span class="line">  <span class="keyword">int64_t</span> unit_dtype_size_&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">int64_t</span> bounding_boxes_elements_&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">bool</span> is_null_input_&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">  <span class="keyword">void</span> *cuda_stream_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int64_t</span> seed_&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">int64_t</span> seed2_&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; aspect_ratio_range_;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; area_range_;</span><br><span class="line">  <span class="keyword">int64_t</span> max_attempts_&#123;<span class="number">100</span>&#125;;</span><br><span class="line">  <span class="keyword">bool</span> use_image_if_no_bounding_boxes_&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;   <span class="comment">// namespace kernel</span></span><br><span class="line">&#125;   <span class="comment">// namespace mindspore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MINDSPORE_CCSRC_BACKEND_KERNEL_COMPILER_GPU_SAMPLE_DISTORTED_BOUNDING_BOX_V2_H_</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>sample_distorted_bounding_box_v2_gpu_kernel.cc</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2022 Huawei Technologies Co., Ltd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"kernel/kernel.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ops/sample_distorted_bounding_box_v2.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/hal/device/gpu_common.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/other/sample_distorted_bounding_box_v2_gpu_kernel.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"targets/x86_64-linux/include/cuda_runtime_api.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"targets/x86_64-linux/include/curand_kernel.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"targets/x86_64-linux/include/driver_types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/cuda_impl/cuda_ops/sample_distorted_bounding_box_v2_impl.cuh"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mindspore &#123;</span><br><span class="line"><span class="keyword">namespace</span> kernel &#123;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">using</span> KernelRunFunc = SampleDistortedBoundingBoxV2GpuKernelMod::KernelRunFunc;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD_KERNEL(image_size_dtype, kernel_type)                                 \</span></span><br><span class="line">  &#123;                                                                               \</span><br><span class="line">    KernelAttr()                                                                  \</span><br><span class="line">      .AddInputAttr(image_size_dtype)                                             \</span><br><span class="line">      .AddInputAttr(kNumberTypeFloat32)                                           \</span><br><span class="line">      .AddInputAttr(kNumberTypeFloat32)                                           \</span><br><span class="line">      .AddOutputAttr(image_size_dtype)                                            \</span><br><span class="line">      .AddOutputAttr(image_size_dtype)                                            \</span><br><span class="line">      .AddOutputAttr(kNumberTypeFloat32),                                         \</span><br><span class="line">      &amp;SampleDistortedBoundingBoxV2GpuKernelMod::LaunchKernel&lt;kernel_type&gt;        \</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kOutputSize = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kInputSize = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kIndex0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kIndex1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kIndex2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kIndex3 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kBBoxesDimension = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kShapeSize1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kShapeSize2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kShapeSize3 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kShapeSize4 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> kNumber0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">float</span> kFloatNum0 = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">float</span> kFloatNum1 = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> SampleDistortedBoundingBoxV2GpuKernelMod::Init(<span class="keyword">const</span> BaseOperatorPtr &amp;base_operator,</span><br><span class="line">                                                    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;inputs,</span><br><span class="line">                                                    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;outputs) &#123;</span><br><span class="line">  MS_EXCEPTION_IF_NULL(base_operator);</span><br><span class="line">  kernel_name_ = base_operator-&gt;name();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!MatchKernelFunc(base_operator, inputs, outputs)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> kernel_attr = GetKernelAttrFromTensors(inputs, outputs);</span><br><span class="line">  dtype_ = kernel_attr.GetInputAttr(kIndex0).first;</span><br><span class="line">  unit_dtype_size_ = abstract::TypeIdSize(dtype_);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> kernel_ptr = <span class="built_in">std</span>::make_shared&lt;ops::SampleDistortedBoundingBoxV2&gt;(base_operator-&gt;GetPrim());</span><br><span class="line">  seed_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(GetValue&lt;<span class="keyword">int64_t</span>&gt;(kernel_ptr-&gt;GetAttr(<span class="string">"seed"</span>)));</span><br><span class="line">  seed2_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(GetValue&lt;<span class="keyword">int64_t</span>&gt;(kernel_ptr-&gt;GetAttr(<span class="string">"seed2"</span>)));</span><br><span class="line">  aspect_ratio_range_ = GetValue&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;(kernel_ptr-&gt;GetAttr(<span class="string">"aspect_ratio_range"</span>));</span><br><span class="line">  area_range_ = GetValue&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;(kernel_ptr-&gt;GetAttr(<span class="string">"area_range"</span>));</span><br><span class="line">  max_attempts_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(GetValue&lt;<span class="keyword">int64_t</span>&gt;(kernel_ptr-&gt;GetAttr(<span class="string">"max_attempts"</span>)));</span><br><span class="line">  use_image_if_no_bounding_boxes_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">bool</span>&gt;(GetValue&lt;<span class="keyword">bool</span>&gt;(kernel_ptr-&gt;GetAttr(<span class="string">"use_image_if_no_bounding_boxes"</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; shape_image_size = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt;(inputs.at(kIndex0)-&gt;GetDeviceShapeAdaptively().begin(),</span><br><span class="line">                                                               inputs.at(kIndex0)-&gt;GetDeviceShapeAdaptively().end());</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; shape_bounding_boxes = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt;(inputs.at(kIndex1)-&gt;GetDeviceShapeAdaptively().begin(),</span><br><span class="line">                                                                   inputs.at(kIndex1)-&gt;GetDeviceShapeAdaptively().end());</span><br><span class="line">  <span class="keyword">size_t</span> shape_dim_image_size = shape_image_size.size();</span><br><span class="line">  <span class="keyword">size_t</span> shape_dim_bounding_boxes = shape_bounding_boxes.size();</span><br><span class="line">  <span class="keyword">if</span> (shape_dim_image_size != kShapeSize1) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', image_size must be 1-dimensional, got: ["</span></span><br><span class="line">                      &lt;&lt; shape_dim_image_size &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (shape_image_size[kIndex0] != kShapeSize3) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', image_size must contain 3 elements, got: ["</span></span><br><span class="line">                      &lt;&lt; shape_image_size[kIndex0] &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (shape_dim_bounding_boxes != kBBoxesDimension) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', bounding_boxes must be 3-dimensional"</span></span><br><span class="line">                      &lt;&lt; <span class="string">" [batch, num_boxes, coords], got: ["</span> &lt;&lt; shape_dim_bounding_boxes &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (shape_bounding_boxes[shape_dim_bounding_boxes - <span class="number">1</span>] != kShapeSize4) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', bounding_boxes must have shape [4], got: ["</span></span><br><span class="line">                      &lt;&lt; shape_bounding_boxes[shape_dim_bounding_boxes - <span class="number">1</span>] &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (max_attempts_ &lt;= SizeToLong(kNumber0)) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', max_attempts must be positive: ["</span> &lt;&lt; max_attempts_ &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (aspect_ratio_range_[kIndex1] &lt;= kFloatNum0 || aspect_ratio_range_[kIndex0] &lt;= kFloatNum0) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', aspect_ratio_range must be positive: ["</span></span><br><span class="line">                      &lt;&lt; aspect_ratio_range_[kIndex0] &lt;&lt; <span class="string">"], ["</span> &lt;&lt; aspect_ratio_range_[kIndex1] &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (area_range_[kIndex1] &lt;= kFloatNum0 || area_range_[kIndex0] &lt;= kFloatNum0) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', area_range must be positive: ["</span> &lt;&lt; area_range_[kIndex0] &lt;&lt; <span class="string">"], ["</span></span><br><span class="line">                      &lt;&lt; area_range_[kIndex1] &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (area_range_[kIndex1] &gt; kFloatNum1 || area_range_[kIndex0] &gt; kFloatNum1) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', area_range must be less then or equal to 1.0: ["</span></span><br><span class="line">                      &lt;&lt; area_range_[kIndex0] &lt;&lt; <span class="string">"], ["</span> &lt;&lt; area_range_[kIndex1] &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (aspect_ratio_range_.size() != kShapeSize2) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', aspect_ratio_range field must specify 2 dimensions."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (area_range_.size() != kShapeSize2) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', area_range field must specify 2 dimensions."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SampleDistortedBoundingBoxV2GpuKernelMod::Resize(<span class="keyword">const</span> BaseOperatorPtr &amp;base_operator,</span><br><span class="line">                                                     <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;inputs,</span><br><span class="line">                                                     <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;KernelTensorPtr&gt; &amp;outputs,</span><br><span class="line">                                                     <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">uint32_t</span>, tensor::TensorPtr&gt; &amp;) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> input : inputs) &#123;</span><br><span class="line">    <span class="keyword">auto</span> input_shape = input-&gt;GetShapeVector();</span><br><span class="line">    <span class="keyword">if</span> (!IsValidShape(input_shape)) &#123;</span><br><span class="line">      <span class="keyword">return</span> KRET_UNKNOWN_SHAPE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ResetResource();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; shape_bounding_boxes = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt;(inputs.at(kIndex1)-&gt;GetDeviceShapeAdaptively().begin(),</span><br><span class="line">                                                                   inputs.at(kIndex1)-&gt;GetDeviceShapeAdaptively().end());</span><br><span class="line">  bounding_boxes_elements_ = <span class="built_in">std</span>::accumulate(shape_bounding_boxes.begin(), shape_bounding_boxes.end(), <span class="number">1</span>, <span class="built_in">std</span>::multiplies&lt;<span class="keyword">int64_t</span>&gt;());</span><br><span class="line">  input_size_list_.emplace_back(kShapeSize3 * unit_dtype_size_);    <span class="comment">// input image size</span></span><br><span class="line">  input_size_list_.emplace_back(bounding_boxes_elements_ * abstract::TypeIdSize(kNumberTypeFloat32));   <span class="comment">// input bboxes</span></span><br><span class="line">  input_size_list_.emplace_back(kShapeSize1 * abstract::TypeIdSize(kNumberTypeFloat32));    <span class="comment">// input min object covered</span></span><br><span class="line">  output_size_list_.emplace_back(kShapeSize3 * unit_dtype_size_);   <span class="comment">// output begin</span></span><br><span class="line">  output_size_list_.emplace_back(kShapeSize3 * unit_dtype_size_);   <span class="comment">// output size</span></span><br><span class="line">  output_size_list_.emplace_back(kShapeSize1 * kShapeSize1 * kShapeSize4 * abstract::TypeIdSize(kNumberTypeFloat32));   <span class="comment">// output bboxes</span></span><br><span class="line">  workspace_size_list_.push_back(kShapeSize1 * kShapeSize1 * kShapeSize4 * max_attempts_ * <span class="keyword">sizeof</span>(<span class="keyword">int32_t</span>));  <span class="comment">// number of boxes</span></span><br><span class="line">  workspace_size_list_.push_back(kShapeSize1 * kShapeSize1 * kShapeSize4 * max_attempts_ * <span class="keyword">sizeof</span>(curandState));  <span class="comment">// number of boxes</span></span><br><span class="line">  <span class="keyword">return</span> KRET_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> SampleDistortedBoundingBoxV2GpuKernelMod::SatisfiesOverlapConstraints(<span class="keyword">const</span> Region &amp;crop,</span><br><span class="line">                                                                           <span class="keyword">float</span> minimum_object_covered,</span><br><span class="line">                                                                           <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Region&gt; &amp;bounding_boxes) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">float</span> kMinArea = <span class="number">1.0</span>;</span><br><span class="line">  <span class="keyword">if</span> (crop.Area() &lt; kMinArea) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> is_object_covered = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;bbox : bounding_boxes) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span> object_area = bbox.Area();</span><br><span class="line">    <span class="keyword">if</span> (object_area &lt; kMinArea) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span> object_covered = object_area != <span class="number">0</span> ? crop.Intersect(bbox).Area() / object_area : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (object_covered &gt;= minimum_object_covered) &#123;</span><br><span class="line">      is_object_covered = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> is_object_covered;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> SampleDistortedBoundingBoxV2GpuKernelMod::SelectBox(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;inputs,</span><br><span class="line">                                                         <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span><br><span class="line">                                                         <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;outputs) &#123;</span><br><span class="line">  cudaStream_t stream = <span class="keyword">reinterpret_cast</span>&lt;cudaStream_t&gt;(cuda_stream_);</span><br><span class="line"></span><br><span class="line">  T *image_size_addr = GetDeviceAddress&lt;T&gt;(inputs, kIndex0);</span><br><span class="line">  T image_size[kShapeSize3];</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(&amp;image_size, image_size_addr, kShapeSize3 * unit_dtype_size_, cudaMemcpyDeviceToHost, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  <span class="keyword">float</span> *bounding_boxes_addr = GetDeviceAddress&lt;<span class="keyword">float</span>&gt;(inputs, kIndex1);</span><br><span class="line">  <span class="keyword">float</span> bounding_boxes[bounding_boxes_elements_];</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(&amp;bounding_boxes, bounding_boxes_addr, bounding_boxes_elements_ * abstract::TypeIdSize(kNumberTypeFloat32), cudaMemcpyDeviceToHost, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  <span class="keyword">float</span> *min_object_covered_addr = GetDeviceAddress&lt;<span class="keyword">float</span>&gt;(inputs, kIndex2);</span><br><span class="line">  <span class="keyword">float</span> min_object_covered[kShapeSize1];</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(&amp;min_object_covered, min_object_covered_addr, kShapeSize1 * abstract::TypeIdSize(kNumberTypeFloat32), cudaMemcpyDeviceToHost, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  <span class="comment">//size_t boxes_elements_count = kShapeSize1 * kShapeSize1 * kShapeSize4 * max_attempts_;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int32_t</span> *workspace_ptr = GetDeviceAddress&lt;<span class="keyword">int32_t</span>&gt;(workspace, kIndex0);</span><br><span class="line">  <span class="keyword">size_t</span> boxes_elements_count = kShapeSize1 * kShapeSize1 * kShapeSize4 * max_attempts_;</span><br><span class="line">  <span class="keyword">int32_t</span> generated_boxes[boxes_elements_count];</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(&amp;generated_boxes, workspace_ptr, boxes_elements_count * <span class="keyword">sizeof</span>(<span class="keyword">int32_t</span>), cudaMemcpyDeviceToHost, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  </span><br><span class="line">  T *begin_addr = GetDeviceAddress&lt;T&gt;(outputs, kIndex0);</span><br><span class="line">  T begin[kShapeSize3];</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(&amp;begin, begin_addr, kShapeSize3 * unit_dtype_size_, cudaMemcpyDeviceToHost, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  T *size_addr = GetDeviceAddress&lt;T&gt;(outputs, kIndex1);</span><br><span class="line">  T size[kShapeSize3];</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(&amp;size, size_addr, kShapeSize3 * unit_dtype_size_, cudaMemcpyDeviceToHost, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  <span class="keyword">float</span> *bboxes_addr = GetDeviceAddress&lt;<span class="keyword">float</span>&gt;(outputs, kIndex2);</span><br><span class="line">  <span class="keyword">size_t</span> bboxes_elements_count = kShapeSize1 * kShapeSize1 * kShapeSize4;</span><br><span class="line">  <span class="keyword">float</span> bboxes[bboxes_elements_count];</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(&amp;bboxes, bboxes_addr, bboxes_elements_count * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), cudaMemcpyDeviceToHost, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int32_t</span> height = <span class="keyword">static_cast</span>&lt;<span class="keyword">int32_t</span>&gt;(image_size[kIndex0]);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int32_t</span> width = <span class="keyword">static_cast</span>&lt;<span class="keyword">int32_t</span>&gt;(image_size[kIndex1]);</span><br><span class="line">  <span class="keyword">if</span> (!(height &gt; <span class="number">0</span> &amp;&amp; width &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', image height and width must be positive, got: ["</span> &lt;&lt; height</span><br><span class="line">                      &lt;&lt; <span class="string">"] and ["</span> &lt;&lt; width &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">float</span> min_object_covered_val = <span class="number">0.0</span>;</span><br><span class="line">  min_object_covered_val = *min_object_covered;</span><br><span class="line">  <span class="keyword">if</span> (min_object_covered_val &lt; <span class="number">0.0</span> || min_object_covered_val &gt; <span class="number">1.0</span>) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', min_object_covered must be in [0.0, 1.0], got: ["</span></span><br><span class="line">                      &lt;&lt; min_object_covered_val &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Region&gt; boxes;</span><br><span class="line">  <span class="keyword">size_t</span> size_bounding_boxes = inputs[kIndex1]-&gt;size / <span class="keyword">sizeof</span>(<span class="keyword">float</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> b = <span class="number">0</span>; b &lt; size_bounding_boxes / kShapeSize4; ++b) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; kShapeSize4; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bounding_boxes[b * kShapeSize4 + i] &lt; <span class="number">0.0</span> || bounding_boxes[b * kShapeSize4 + i] &gt; <span class="number">1.0</span>) &#123;</span><br><span class="line">        MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', all bounding box coordinates must in [0.0, 1.0], got: ["</span></span><br><span class="line">                          &lt;&lt; bounding_boxes[b * kShapeSize4 + i] &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(bounding_boxes[b * kShapeSize4 + kIndex1] &lt; bounding_boxes[b * kShapeSize4 + kIndex3])) &#123;</span><br><span class="line">      MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', x_min of bounding box must be less than x_max, got: ["</span></span><br><span class="line">                        &lt;&lt; bounding_boxes[b * kShapeSize4 + kIndex1] &lt;&lt; <span class="string">"] and ["</span></span><br><span class="line">                        &lt;&lt; bounding_boxes[b * kShapeSize4 + kIndex3] &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(bounding_boxes[b * kShapeSize4 + kIndex0] &lt; bounding_boxes[b * kShapeSize4 + kIndex2])) &#123;</span><br><span class="line">      MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', y_min of bounding box must be less than y_max, got: ["</span></span><br><span class="line">                        &lt;&lt; bounding_boxes[b * kShapeSize4 + kIndex0] &lt;&lt; <span class="string">"] and ["</span></span><br><span class="line">                        &lt;&lt; bounding_boxes[b * kShapeSize4 + kIndex2] &lt;&lt; <span class="string">"]."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> x_min = <span class="keyword">static_cast</span>&lt;<span class="keyword">int32_t</span>&gt;(bounding_boxes[b * kShapeSize4 + <span class="number">1</span>] * width );</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> y_min = <span class="keyword">static_cast</span>&lt;<span class="keyword">int32_t</span>&gt;(bounding_boxes[b * kShapeSize4 + <span class="number">0</span>] * height );</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> x_max = <span class="keyword">static_cast</span>&lt;<span class="keyword">int32_t</span>&gt;(bounding_boxes[b * kShapeSize4 + <span class="number">3</span>] * width );</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> y_max = <span class="keyword">static_cast</span>&lt;<span class="keyword">int32_t</span>&gt;(bounding_boxes[b * kShapeSize4 + <span class="number">2</span>] * height);</span><br><span class="line">    boxes.push_back(Region(x_min, y_min, x_max, y_max));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> Region <span class="title">ms_image_rect</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, width, height)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (boxes.empty()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!use_image_if_no_bounding_boxes_) &#123;</span><br><span class="line">      MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_</span><br><span class="line">                        &lt;&lt; <span class="string">"', no bounding boxes provided as input. One must enable use_image_if_no_bounding_boxes "</span></span><br><span class="line">                           <span class="string">"if you wish to not provide any bounding boxes."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boxes.push_back(ms_image_rect);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Region ms_crop_rect;</span><br><span class="line">  <span class="keyword">bool</span> ms_sample_generated = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; LongToSize(max_attempts_); ++i) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> x_min = generated_boxes[i * kShapeSize4 + <span class="number">0</span>] ;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> y_min = generated_boxes[i * kShapeSize4 + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> x_max = generated_boxes[i * kShapeSize4 + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> y_max = generated_boxes[i * kShapeSize4 + <span class="number">3</span>];</span><br><span class="line">    ms_crop_rect.SetPoint(x_min, y_min, x_max, y_max);</span><br><span class="line">    <span class="keyword">if</span> (SatisfiesOverlapConstraints(ms_crop_rect, min_object_covered_val, boxes)) &#123;</span><br><span class="line">      ms_sample_generated = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!ms_sample_generated) &#123;</span><br><span class="line">    ms_crop_rect = ms_image_rect;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> target_width = ms_crop_rect.max_x_ - ms_crop_rect.min_x_;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> target_height = ms_crop_rect.max_y_ - ms_crop_rect.min_y_;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> offset_width = ms_crop_rect.min_x_;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> offset_height = ms_crop_rect.min_y_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (width &lt; target_width + offset_width) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', width must be &gt;= target_width + offset_width: ["</span> &lt;&lt; width</span><br><span class="line">                      &lt;&lt; <span class="string">"] vs ["</span> &lt;&lt; target_width &lt;&lt; <span class="string">"] + ["</span> &lt;&lt; offset_width &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (height &lt; target_height + offset_height) &#123;</span><br><span class="line">    MS_LOG(EXCEPTION) &lt;&lt; <span class="string">"For '"</span> &lt;&lt; kernel_name_ &lt;&lt; <span class="string">"', height must be &gt;= target_height + offset_height: ["</span> &lt;&lt; height</span><br><span class="line">                      &lt;&lt; <span class="string">"] vs ["</span> &lt;&lt; target_height &lt;&lt; <span class="string">"] + ["</span> &lt;&lt; offset_height &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  begin[kIndex0] = <span class="keyword">static_cast</span>&lt;T&gt;(offset_height);</span><br><span class="line">  size[kIndex0] = <span class="keyword">static_cast</span>&lt;T&gt;(target_height);</span><br><span class="line">  begin[kIndex1] = <span class="keyword">static_cast</span>&lt;T&gt;(offset_width);</span><br><span class="line">  size[kIndex1] = <span class="keyword">static_cast</span>&lt;T&gt;(target_width);</span><br><span class="line"></span><br><span class="line">  bboxes[kIndex0] = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(ms_crop_rect.min_y_) / <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(height);</span><br><span class="line">  bboxes[kIndex1] = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(ms_crop_rect.min_x_) / <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(width);</span><br><span class="line">  bboxes[kIndex2] = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(ms_crop_rect.max_y_) / <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(height);</span><br><span class="line">  bboxes[kIndex3] = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(ms_crop_rect.max_x_) / <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(width);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  begin[kIndex2] = <span class="keyword">static_cast</span>&lt;T&gt;(<span class="number">0</span>);</span><br><span class="line">  size[kIndex2] = <span class="keyword">static_cast</span>&lt;T&gt;(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(begin_addr, &amp;begin, kShapeSize3 * unit_dtype_size_, cudaMemcpyHostToDevice, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(size_addr, &amp;size, kShapeSize3 * unit_dtype_size_, cudaMemcpyHostToDevice, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(bboxes_addr, &amp;bboxes, boxes_elements_count * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), cudaMemcpyHostToDevice, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> SampleDistortedBoundingBoxV2GpuKernelMod::LaunchKernel(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;inputs,</span><br><span class="line">                                                            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;workspace,</span><br><span class="line">                                                            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AddressPtr&gt; &amp;outputs) &#123;</span><br><span class="line">  <span class="keyword">if</span> (is_null_input_) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cudaStream_t stream = <span class="keyword">reinterpret_cast</span>&lt;cudaStream_t&gt;(cuda_stream_);</span><br><span class="line">  T *image_size_addr = GetDeviceAddress&lt;T&gt;(inputs, kIndex0);</span><br><span class="line">  T image_size[kShapeSize3];</span><br><span class="line">  CHECK_CUDA_RET_WITH_EXCEPT_NOTRACE(</span><br><span class="line">    cudaMemcpyAsync(&amp;image_size, image_size_addr, kShapeSize3 * unit_dtype_size_, cudaMemcpyDeviceToHost, stream),</span><br><span class="line">    <span class="string">"cudaMemcpy failed."</span>);</span><br><span class="line">  <span class="keyword">int32_t</span>* workspace_addr = GetDeviceAddress&lt;<span class="keyword">int32_t</span>&gt;(workspace, kIndex0);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *curandState_addr = GetDeviceAddress&lt;<span class="keyword">void</span> *&gt;(workspace, kIndex1);</span><br><span class="line">  curandState *devStates = <span class="keyword">reinterpret_cast</span>&lt;curandState *&gt;(curandState_addr);</span><br><span class="line">  SampleDistortedBoundingBoxV2(image_size, seed_, seed2_, aspect_ratio_range_[kIndex0],</span><br><span class="line">            aspect_ratio_range_[kIndex1],</span><br><span class="line">            area_range_[kIndex0],area_range_[kIndex1] ,max_attempts_, use_image_if_no_bounding_boxes_,workspace_addr,</span><br><span class="line">            devStates, <span class="keyword">reinterpret_cast</span>&lt;cudaStream_t&gt;(cuda_stream_));</span><br><span class="line">  SelectBox&lt;T&gt;(inputs, workspace, outputs);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;KernelAttr, KernelRunFunc&gt;&gt; &amp;SampleDistortedBoundingBoxV2GpuKernelMod::GetFuncList() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;KernelAttr, KernelRunFunc&gt;&gt; func_list = &#123;</span><br><span class="line">    ADD_KERNEL(kNumberTypeUInt8, <span class="keyword">uint8_t</span>),</span><br><span class="line">    ADD_KERNEL(kNumberTypeInt8, <span class="keyword">int8_t</span>),</span><br><span class="line">    ADD_KERNEL(kNumberTypeInt16, <span class="keyword">int16_t</span>),</span><br><span class="line">    ADD_KERNEL(kNumberTypeInt32, <span class="keyword">int32_t</span>),</span><br><span class="line">    ADD_KERNEL(kNumberTypeInt64, <span class="keyword">int64_t</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> func_list;</span><br><span class="line">&#125;</span><br><span class="line">MS_KERNEL_FACTORY_REG(NativeGpuKernelMod, SampleDistortedBoundingBoxV2, SampleDistortedBoundingBoxV2GpuKernelMod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>sample_distorted_bounding_box_v2_impl.cuh</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020 Huawei Technologies Co., Ltd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MINDSPORE_CCSRC_PLUGIN_DEVICE_GPU_KERNEL_CUDA_IMPL_CUDA_OPS_SAMPLE_DISTORTED_BOUNDING_BOX_V2_IMPL_CUH_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINDSPORE_CCSRC_PLUGIN_DEVICE_GPU_KERNEL_CUDA_IMPL_CUDA_OPS_SAMPLE_DISTORTED_BOUNDING_BOX_V2_IMPL_CUH_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curand_kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cuda_runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/cuda_impl/cuda_ops/cuda_device_info.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/cuda_impl/cuda_ops/cuda_common.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SampleDistortedBoundingBoxV2</span><span class="params">(T* image_size , <span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, <span class="keyword">float</span> ms_min_sample_aspect_ratio,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> ms_max_sample_aspect_ratio,<span class="keyword">float</span> min_area_range,<span class="keyword">float</span> max_area_range ,<span class="keyword">int</span> max_attempts, </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">bool</span> use_image_if_no_bounding_boxes, <span class="keyword">int</span> *output,curandState *globalState,cudaStream_t cuda_stream)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MINDSPORE_CCSRC_PLUGIN_DEVICE_GPU_KERNEL_CUDA_IMPL_CUDA_OPS_SAMPLE_DISTORTED_BOUNDING_BOX_V2_IMPL_CUH_</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>sample_distorted_bounding_box_v2_impl.cu</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020 Huawei Technologies Co., Ltd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/cuda_impl/cuda_ops/util.cuh"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plugin/device/gpu/kernel/cuda_impl/cuda_ops/sample_distorted_bounding_box_v2_impl.cuh"</span></span></span><br><span class="line"></span><br><span class="line">__device__ <span class="keyword">bool</span> dev_error_res = <span class="literal">false</span>;</span><br><span class="line">__<span class="function">global__ <span class="keyword">void</span> <span class="title">GenerateRandomCropKernel</span><span class="params">(<span class="keyword">int</span> seed, curandState *globalState, <span class="keyword">int</span> ms_original_height,<span class="keyword">int</span> ms_original_width,</span></span></span><br><span class="line"><span class="function"><span class="params">       <span class="keyword">float</span> min_area_range, <span class="keyword">float</span> max_area_range,<span class="keyword">float</span> ms_min_sample_aspect_ratio, <span class="keyword">float</span> ms_max_sample_aspect_ratio, <span class="keyword">int</span>* output, <span class="keyword">int</span> max_attempt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">float</span> ms_bias = <span class="number">0.5</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">float</span> ms_min_area = min_area_range * ms_original_width * ms_original_height;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">float</span> ms_max_area = max_area_range * ms_original_width * ms_original_height;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = blockIdx.x * blockDim.x + threadIdx.x; i &lt; (max_attempt); i += blockDim.x * gridDim.x) &#123;</span><br><span class="line">    curand_init(seed, i, <span class="number">0</span>, &amp;globalState[i]);</span><br><span class="line">    <span class="keyword">float</span> sample_aspect_ratio = curand_uniform(&amp;globalState[i])* (ms_max_sample_aspect_ratio - ms_min_sample_aspect_ratio) + ms_min_sample_aspect_ratio;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> min_height =<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(ms_original_height*min_area_range);</span><br><span class="line">    <span class="keyword">int</span> max_height =<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(ms_original_height*max_area_range);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max_width = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(max_height*sample_aspect_ratio);</span><br><span class="line">    <span class="keyword">if</span>(max_width &gt; ms_original_width)&#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">float</span> kEps = <span class="number">0.0000001</span>;</span><br><span class="line">      max_height = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;((ms_original_width + ms_bias - kEps) / sample_aspect_ratio);</span><br><span class="line">      <span class="keyword">if</span> ((max_height * sample_aspect_ratio) &gt; ms_original_width) &#123;</span><br><span class="line">        max_height -= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    max_height = min(max_height, ms_original_height);</span><br><span class="line">    min_height = min(min_height, max_height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (min_height &lt; max_height) &#123;</span><br><span class="line">        min_height += <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(curand_uniform(&amp;globalState[i])*(max_height-min_height));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(min_height*sample_aspect_ratio);</span><br><span class="line">    <span class="keyword">float</span> area = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(width * min_height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (area &lt; ms_min_area) &#123;</span><br><span class="line">      min_height += <span class="number">1</span>;</span><br><span class="line">      width = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(min_height * sample_aspect_ratio);</span><br><span class="line">      area = width * min_height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (area &gt; ms_max_area) &#123;</span><br><span class="line">      min_height -= <span class="number">1</span>;</span><br><span class="line">      width = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(min_height * sample_aspect_ratio);</span><br><span class="line">      area = width * min_height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (area &lt; ms_min_area || area &gt; ms_max_area || width &gt; ms_original_width || min_height &gt; ms_original_height ||</span><br><span class="line">      width &lt;= <span class="number">0</span> || min_height &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (min_height &lt; ms_original_height) &#123;</span><br><span class="line">      y = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(curand_uniform(&amp;globalState[i])*(ms_original_height-min_height));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (width &lt; ms_original_width) &#123;</span><br><span class="line">      x = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(curand_uniform(&amp;globalState[i])*(ms_original_width-width));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> left_x = i*<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> left_y = i*<span class="number">4</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> right_x = i*<span class="number">4</span>+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> right_y = i*<span class="number">4</span>+<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    output[left_x] = x;</span><br><span class="line">    output[left_y] = y;</span><br><span class="line">    output[right_x] = x+width;</span><br><span class="line">    output[right_y] = y+min_height;</span><br><span class="line">  &#125;</span><br><span class="line">  dev_error_res = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SampleDistortedBoundingBoxV2</span><span class="params">(T* image_size, <span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, <span class="keyword">float</span> ms_min_sample_aspect_ratio,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> ms_max_sample_aspect_ratio,<span class="keyword">float</span> min_area_range,<span class="keyword">float</span> max_area_range ,<span class="keyword">int</span> max_attempts,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">bool</span> use_image_if_no_bounding_boxes,<span class="keyword">int</span>* output,curandState *globalState,cudaStream_t cuda_stream)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ms_original_height = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(image_size[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">int</span> ms_original_width = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(image_size[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">int</span> RNG_seed = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::random_device rd;</span><br><span class="line">  <span class="keyword">if</span> (seed2 != <span class="number">0</span>) &#123;</span><br><span class="line">    RNG_seed = seed2;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seed != <span class="number">0</span>) &#123;</span><br><span class="line">    RNG_seed = seed;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    RNG_seed = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(rd());</span><br><span class="line">  &#125;</span><br><span class="line">  GenerateRandomCropKernel&lt;&lt;&lt;GET_BLOCKS(max_attempts), GET_THREADS, <span class="number">0</span>, cuda_stream&gt;&gt;&gt;</span><br><span class="line">               (RNG_seed, globalState,  ms_original_height, ms_original_width,min_area_range, max_area_range,ms_min_sample_aspect_ratio,ms_max_sample_aspect_ratio, output, max_attempts);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> CUDA_LIB_EXPORT <span class="keyword">void</span> SampleDistortedBoundingBoxV2&lt;<span class="keyword">uint8_t</span>&gt;(<span class="keyword">uint8_t</span>* image_size, <span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, <span class="keyword">float</span> ms_min_sample_aspect_ratio,</span><br><span class="line">            <span class="keyword">float</span> ms_max_sample_aspect_ratio,<span class="keyword">float</span> min_area_range,<span class="keyword">float</span> max_area_range ,<span class="keyword">int</span> max_attempts,</span><br><span class="line">            <span class="keyword">bool</span> use_image_if_no_bounding_boxes,<span class="keyword">int</span>* output,curandState *globalState,cudaStream_t cuda_stream);</span><br><span class="line"><span class="keyword">template</span> CUDA_LIB_EXPORT <span class="keyword">void</span> SampleDistortedBoundingBoxV2&lt;<span class="keyword">int8_t</span>&gt;(<span class="keyword">int8_t</span>* image_size, <span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, <span class="keyword">float</span> ms_min_sample_aspect_ratio,</span><br><span class="line">            <span class="keyword">float</span> ms_max_sample_aspect_ratio,<span class="keyword">float</span> min_area_range,<span class="keyword">float</span> max_area_range ,<span class="keyword">int</span> max_attempts,</span><br><span class="line">            <span class="keyword">bool</span> use_image_if_no_bounding_boxes,<span class="keyword">int</span>* output,curandState *globalState,cudaStream_t cuda_stream);</span><br><span class="line"><span class="keyword">template</span> CUDA_LIB_EXPORT <span class="keyword">void</span> SampleDistortedBoundingBoxV2&lt;<span class="keyword">int16_t</span>&gt;(<span class="keyword">int16_t</span>* image_size, <span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, <span class="keyword">float</span> ms_min_sample_aspect_ratio,</span><br><span class="line">            <span class="keyword">float</span> ms_max_sample_aspect_ratio,<span class="keyword">float</span> min_area_range,<span class="keyword">float</span> max_area_range ,<span class="keyword">int</span> max_attempts,</span><br><span class="line">            <span class="keyword">bool</span> use_image_if_no_bounding_boxes,<span class="keyword">int</span>* output,curandState *globalState,cudaStream_t cuda_stream);</span><br><span class="line"><span class="keyword">template</span> CUDA_LIB_EXPORT <span class="keyword">void</span> SampleDistortedBoundingBoxV2&lt;<span class="keyword">int32_t</span>&gt;(<span class="keyword">int32_t</span>* image_size, <span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, <span class="keyword">float</span> ms_min_sample_aspect_ratio,</span><br><span class="line">            <span class="keyword">float</span> ms_max_sample_aspect_ratio,<span class="keyword">float</span> min_area_range,<span class="keyword">float</span> max_area_range ,<span class="keyword">int</span> max_attempts,</span><br><span class="line">            <span class="keyword">bool</span> use_image_if_no_bounding_boxes,<span class="keyword">int</span>* output,curandState *globalState,cudaStream_t cuda_stream);</span><br><span class="line"><span class="keyword">template</span> CUDA_LIB_EXPORT <span class="keyword">void</span> SampleDistortedBoundingBoxV2&lt;<span class="keyword">int64_t</span>&gt;(<span class="keyword">int64_t</span>* image_size, <span class="keyword">int</span> seed, <span class="keyword">int</span> seed2, <span class="keyword">float</span> ms_min_sample_aspect_ratio,</span><br><span class="line">            <span class="keyword">float</span> ms_max_sample_aspect_ratio,<span class="keyword">float</span> min_area_range,<span class="keyword">float</span> max_area_range ,<span class="keyword">int</span> max_attempts,</span><br><span class="line">            <span class="keyword">bool</span> use_image_if_no_bounding_boxes,<span class="keyword">int</span>* output,curandState *globalState,cudaStream_t cuda_stream);</span><br></pre></td></tr></table></figure><ol start="5"><li>test.py</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mindspore <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> mindspore <span class="keyword">import</span> Tensor</span><br><span class="line"><span class="keyword">import</span> mindspore.ops <span class="keyword">as</span> ops</span><br><span class="line"></span><br><span class="line">ms.set_context(device_target=<span class="string">"GPU"</span>)</span><br><span class="line"></span><br><span class="line">image_size = Tensor([<span class="number">640</span>,<span class="number">480</span>,<span class="number">3</span>], ms.int32)</span><br><span class="line">bounding_boxes = Tensor([[[<span class="number">0.38</span>, <span class="number">0.17</span>, <span class="number">0.95</span>, <span class="number">0.40</span>]]], ms.float32)</span><br><span class="line">min_object_covered = Tensor([<span class="number">0.8</span>], ms.float32)</span><br><span class="line">sample_distorted_bounding_box_v2 = ops.operations.other_ops.SampleDistortedBoundingBoxV2(seed=<span class="number">10</span>, seed2=<span class="number">20</span>,</span><br><span class="line">                                        aspect_ratio_range=(<span class="number">0.9</span>, <span class="number">1.1</span>), area_range=(<span class="number">0.1</span>,<span class="number">1.0</span>), max_attempts=<span class="number">100</span>,</span><br><span class="line">                                        use_image_if_no_bounding_boxes=<span class="keyword">False</span>)</span><br><span class="line">output = sample_distorted_bounding_box_v2(image_size, bounding_boxes, min_object_covered)</span><br><span class="line">begin, size, bboxes = output[<span class="number">0</span>], output[<span class="number">1</span>], output[<span class="number">2</span>]</span><br><span class="line">print(begin)</span><br><span class="line">print(size)</span><br><span class="line">print(bboxes)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在写Mindspore算子过程中，由于自己粗心、又或是理解出现了一些偏差，导致项目在编译、运行时会出现错误。对于一些简单的语法错误，语法检查器可以帮助我们纠正错误，但有一部分错误只有在运行时才会暴露出来，这一类错误很难发现，程序崩溃之后只会输出Core dump，使用print大法虽然能知道程序在哪一行Core dump了，而具体是什么原因导致的Core dump还是需要使用调试器进一步分析。这时候，GDB就派上用场了，虽然久仰GDB大名，但真正将GDB调试用到实战中还是第一次，因此必须将这一过程记录下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Debug" scheme="http://www.fisheryung.top/tags/debug/"/>
    
      <category term="GDB" scheme="http://www.fisheryung.top/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>为没有80、443端口的域名申请SSL证书</title>
    <link href="http://www.fisheryung.top/%E4%B8%BA%E6%B2%A1%E6%9C%8980%E3%80%81443%E7%AB%AF%E5%8F%A3%E7%9A%84%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7ssl%E8%AF%81%E4%B9%A6.html"/>
    <id>http://www.fisheryung.top/为没有80、443端口的域名申请ssl证书.html</id>
    <published>2022-08-06T02:57:52.000Z</published>
    <updated>2022-08-06T07:37:25.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于现在没有云服务器的学生优惠，我申请了家里宽带的公网IP，买了个域名并且配置了DDNS（已记录在博客中，<a href="/openwrt的ddns配置.html">链接</a>），在家里用一台旧笔记本架了一台服务器，实测平均功耗30w，一个月下来也用不了多少电费，配置还比阿里云高很多，是个性价比很高的选择。接下来要做的是用<code>certbot</code>为域名申请SSL证书，并配置证书自动更新。</p><a id="more"></a><h1 id="安装Certbot"><a href="#安装Certbot" class="headerlink" title="安装Certbot"></a>安装Certbot</h1><p>Ubuntu下安装<code>certbot</code>很简单，使用<code>snap</code>安装即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install --classic certbot</span><br><span class="line">sudo ln -s /snap/bin/certbot /usr/bin/certbot</span><br></pre></td></tr></table></figure></p><h1 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h1><p>接下来进入主题，开始SSL证书的申请。</p><h2 id="运行Certbot命令"><a href="#运行Certbot命令" class="headerlink" title="运行Certbot命令"></a>运行Certbot命令</h2><p>首先是运行<code>certbot</code>的证书申请命令，需要注意的点是验证模式要用<code>DNS-TXT</code>的方式，<code>-d</code>后面跟要申请的域名，我这里申请的是泛域名。<br>命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot certonly --preferred-challenges dns -d <span class="string">"*.fisheryung.top"</span> --manual</span><br></pre></td></tr></table></figure></p><p><img src="images/nginx/certbot_auth.png" alt="验证域名"></p><p>这时<code>certbot</code>会提醒你在域名DNS解析记录中添加记录，登录阿里云DNS解析，点击添加记录，记录类型选择<code>TXT</code>，将域名和值填进去。添加记录条目后，点击终端中提供的Dig网址，如果解析结果和<code>certbot</code>提供的值相同，则表示添加记录成功。</p><p>返回到终端，回车继续验证，没问题的话，<code>certbot</code>会提示这个证书不会自动更新（因为是手动申请的）。此时证书已经申请成功了，存放在<code>/etc/letsencrypt/live/fisheryung.top</code>中。</p><p><img src="images/nginx/dig_result.png" alt="验证域名结果"></p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>找到Nginx中https server的配置代码块，添加如下字段：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSL</span></span><br><span class="line"><span class="attribute">ssl_certificate</span>         /etc/letsencrypt/live/fisheryung.top/fullchain.pem;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span>     /etc/letsencrypt/live/fisheryung.top/privkey.pem;</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSL config</span></span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure></p><p>重新加载Nginx配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx reload</span><br></pre></td></tr></table></figure></p><p>刷新一下博客，就能看到已经是安全的HTTPS连接了。</p><p><img src="images/nginx/https_result.png" alt="HTTPS效果"></p><h1 id="配置证书自动续期"><a href="#配置证书自动续期" class="headerlink" title="配置证书自动续期"></a>配置证书自动续期</h1><p>证书每隔3个月就需要续期一次，每次都要手动续期的话略显麻烦，因此配置一下自动续期是很有必要的。阿里云的自动更新插件在GitHub中可以找到，链接<a href="https://github.com/tengattack/certbot-dns-aliyun" target="_blank" rel="noopener">在此</a>。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>跟着插件中的README操作即可，最后一条命令可以列出<code>certbot</code>已经安装的插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install certbot-dns-aliyun</span><br><span class="line">sudo snap <span class="built_in">set</span> certbot trust-plugin-with-root=ok</span><br><span class="line">sudo snap connect certbot:plugin certbot-dns-aliyun</span><br><span class="line">sudo certbot plugins</span><br></pre></td></tr></table></figure></p><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>前往阿里云的RAM访问控制，点击<a href="https://ram.console.aliyun.com/" target="_blank" rel="noopener">这里</a>，创建一个操作账号，步骤如下：</p><ol><li>点击<code>身份管理-&gt;用户</code>，点击<code>创建用户</code>按钮</li><li>为账号设定<code>登录名称</code>和<code>显示名称</code>，勾选<code>Open API调用访问</code>，确定创建账号</li><li>记录下此时页面显示的<code>AccessKey ID</code>和<code>AccessKey Secret</code>，这是该账号的登录ID和密码</li><li>点击<code>返回</code>，点击进入账号详情，点击<code>权限管理</code></li><li>点击<code>新增权限</code>，在系统策略中选择<code>AliyunDNSFullAccess</code>后点击确认</li></ol><p>此时操作账号已经创建完毕。接下来回到服务器中进行配置。</p><p>在服务器中新建一个<code>credentials.ini</code>文件，将<code>AccessKey ID</code>和<code>AccessKey Secret</code>填入到文件中，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">certbot_dns_aliyun:dns_aliyun_access_key = 12345678</span><br><span class="line">certbot_dns_aliyun:dns_aliyun_access_key_secret = 1234567890abcdef1234567890abcdef</span><br></pre></td></tr></table></figure></p><p>保存文件并将其权限改为<code>600</code>，同时记住该文件存放的位置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /path/to/credentials.ini</span><br></pre></td></tr></table></figure></p><h2 id="为证书续期"><a href="#为证书续期" class="headerlink" title="为证书续期"></a>为证书续期</h2><p>接下来运行<code>certbot</code>的证书申请命令，与上面不同的是，这次我们取消手动<code>--manual</code>选项，改用插件自动完成。</p><p>以下命令以我的<code>www</code>域名为例子进行证书续期，注意插件配置文件的路径需要修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot certonly -a certbot-dns-aliyun:dns-aliyun \</span><br><span class="line">    --certbot-dns-aliyun:dns-aliyun-credentials /path/to/credentials.ini \</span><br><span class="line">    --preferred-challenges dns \</span><br><span class="line">    -d <span class="string">"www.fisheryung.top"</span></span><br></pre></td></tr></table></figure></p><p>成功续期的截图如下：</p><p><img src="images/nginx/certbot_renew.png" alt="证书续期"></p><p>注意：通过这种方式续期的证书都将会自动续期，<code>certbot</code>会自动建立一个定时任务。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>整个操作过程的参考文档和用到的工具链接如下：</p><ul><li>Certbot安装：官网<a href="https://certbot.eff.org/" target="_blank" rel="noopener">链接</a></li><li>Certbot文档：官方<a href="https://eff-certbot.readthedocs.io/en/stable/intro.html" target="_blank" rel="noopener">文档</a></li><li>Certbot阿里云DNS插件：Github<a href="https://github.com/tengattack/certbot-dns-aliyun" target="_blank" rel="noopener">地址</a></li><li>阿里云DNS控制台：<a href="https://dns.console.aliyun.com/" target="_blank" rel="noopener">地址</a></li><li>阿里云RAM访问控制台：<a href="https://ram.console.aliyun.com/" target="_blank" rel="noopener">地址</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于现在没有云服务器的学生优惠，我申请了家里宽带的公网IP，买了个域名并且配置了DDNS（已记录在博客中，&lt;a href=&quot;/openwrt的ddns配置.html&quot;&gt;链接&lt;/a&gt;），在家里用一台旧笔记本架了一台服务器，实测平均功耗30w，一个月下来也用不了多少电费，配置还比阿里云高很多，是个性价比很高的选择。接下来要做的是用&lt;code&gt;certbot&lt;/code&gt;为域名申请SSL证书，并配置证书自动更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器配置" scheme="http://www.fisheryung.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Nginx配置" scheme="http://www.fisheryung.top/tags/nginx%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Git合并多个Commit</title>
    <link href="http://www.fisheryung.top/git%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit.html"/>
    <id>http://www.fisheryung.top/git合并多个commit.html</id>
    <published>2022-07-25T06:36:02.000Z</published>
    <updated>2022-07-25T08:40:29.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在项目开发的过程中，我们通常会在一个分支上做许多操作，有时候几次commit就为了完成一个小功能点。功能开发完成后，面对凌乱的commit记录，便诞生了合并多个commit的需求。Git当然也考虑到了这种需求，并对此设计了<code>git rebase</code>这个命令，该命令第一次用起来会感觉很复杂，但其实将Git的注释说明都看完并按照指示操作之后，就会觉得这个命令可太好用啦，接下来我以OSPP项目为例，展示如何合并某两次commit。</p><a id="more"></a><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="暂存工作区"><a href="#暂存工作区" class="headerlink" title="暂存工作区"></a>暂存工作区</h2><p>进行一切操作之前，记得先暂存当前工作区的改动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash -m <span class="string">"xxx"</span></span><br></pre></td></tr></table></figure></p><h2 id="分析commit记录"><a href="#分析commit记录" class="headerlink" title="分析commit记录"></a>分析commit记录</h2><p>首先是要分析commit记录，判断哪几次commit是需要合并的。如下图所示，在我参与的OSPP项目中，我对<code>tests</code>测试用例文件有着两次commit记录，我需要将这两次commit记录合并为一个。那么，接下来需要做的事情是获得一个<strong>“基础坐标”</strong>，这个坐标通常是要合并的所有commits更前一次commit，其代表的意思是：我要以此commit为起点，修改后面提交的commit。在本次操作中，这个坐标便是<code>cpu/arm: implement cpu compare function ...</code>，获取这个commit的SHA值并复制。</p><p><img src="images/ospp/commit_history.png" alt="Commit记录图"></p><h2 id="rebase开启时光穿梭"><a href="#rebase开启时光穿梭" class="headerlink" title="rebase开启时光穿梭"></a>rebase开启时光穿梭</h2><p>在上一步中，我们获得了基础坐标的SHA值，接下来使用以下命令，让仓库暂时性地“穿梭”回基础坐标的那一次提交：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i fda427e2e50086248244c57e005484616bfc60b1</span><br></pre></td></tr></table></figure></p><p>此时终端会打开一个文本编辑器，如下图所示，仔细观察可以看到以下几点现象：</p><ol><li>目前，我们已经穿梭回基础坐标这一次commit上</li><li>我们可以看到前三行是“未来”的几次提交，每一行每个字段对应的意思是: Git操作、SHA、Commit message</li><li>看下面的注释，我们有几种操作可以做，默认是<code>pick</code>操作，也就是原封不动提交回去</li><li>要达到合并的目的，我们使用<code>squash</code>操作，根据注释的意思，标记了<code>squash</code>的commit记录会合并到前一个<code>pick</code>的提交中</li></ol><p><img src="images/ospp/git_rebase.png" alt="Rebase命令效果"></p><p>根据我的需求，我需要将上图中第二行的提交合并到第一行的提交中。因此，我的操作就是将第二行的<code>pick</code>改为<code>squash</code>，然后保存退出。</p><h2 id="修改commit信息"><a href="#修改commit信息" class="headerlink" title="修改commit信息"></a>修改commit信息</h2><p>在上一步保存退出后，终端会打开第二个文本编辑器，第二个文本编辑器的功能是修改commit信息。在这一步我们需要将两次commit的信息合并起来，如下图所示，由于我第二次commit仅仅是修复一个本不该出现的bug，因此我不打算修改第一次commit的信息，只需要将第二次commit的信息注释掉即可。</p><p><img src="images/ospp/edit_msg.png" alt="Commit信息修改"></p><p>修改完成后保存并退出，Git会自动处理剩余的提交，然后重新回到HEAD commit中。</p><p>至此，rebase时光穿梭之旅已经结束，再次查看commit log，可以发现改为<code>squash</code>操作的那一次commit已经不见了，因为这一次commit已经被合并了。</p><h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><p>相同的操作将所有要合并的commit都合并完之后，便可以将当前分支推送到远程分支上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin xxx</span><br></pre></td></tr></table></figure></p><p>如果之前已经推送过，则会出现提交记录不一致的情况，再三确认本地分支的修改正确无误后，可以将其强制推送到远程分支上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin xxx</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>合并commit的操作大致可以总结为以下几个步骤：</p><ol><li>分析需要合并的commit，确定rebase的基础坐标</li><li>使用rebase命令穿梭到基础坐标，修改要合并commit的操作类型</li><li>修改commit信息（可能需要解决冲突）</li></ol><p>Git真厉害！在此推荐个VSCode插件<code>GITLENS</code>，超级厉害！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在项目开发的过程中，我们通常会在一个分支上做许多操作，有时候几次commit就为了完成一个小功能点。功能开发完成后，面对凌乱的commit记录，便诞生了合并多个commit的需求。Git当然也考虑到了这种需求，并对此设计了&lt;code&gt;git rebase&lt;/code&gt;这个命令，该命令第一次用起来会感觉很复杂，但其实将Git的注释说明都看完并按照指示操作之后，就会觉得这个命令可太好用啦，接下来我以OSPP项目为例，展示如何合并某两次commit。&lt;/p&gt;
    
    </summary>
    
    
      <category term="GIT" scheme="http://www.fisheryung.top/tags/git/"/>
    
      <category term="OSPP" scheme="http://www.fisheryung.top/tags/ospp/"/>
    
  </entry>
  
  <entry>
    <title>OSPP之旅（四）</title>
    <link href="http://www.fisheryung.top/ospp%E4%B9%8B%E6%97%85%EF%BC%88%E5%9B%9B%EF%BC%89.html"/>
    <id>http://www.fisheryung.top/ospp之旅（四）.html</id>
    <published>2022-07-17T02:05:11.000Z</published>
    <updated>2022-08-17T08:47:49.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在做OSPP项目的过程中，导师问我要不顺便参加OpenEuler的开源实习，正好<code>libvirt</code>有几个开源实习的任务，让我顺便一起做了。本来我就已经参加了这个活动，待在MindSpore社区，现在正好在OpenEuler社区也领一些任务做，涨涨积分。看了一下virt-sig组的任务之后，我选择先做<code>libvirt 6.2.0支持vhostuser类型磁盘</code>这个任务。</p><a id="more"></a><h1 id="任务分析"><a href="#任务分析" class="headerlink" title="任务分析"></a>任务分析</h1><p>目前的<code>libvirt 6.2.0</code>版本不支持<code>vhostuser</code>类型的磁盘，而最新版已经支持该特性，因此该特性应该在更高的版本中支持的，所以我们需要定位其最初支持的那个版本。定位的方法很简单，就是查询官网上面的<code>Release Changes</code>，地址在<a href="https://libvirt.org/news.html" target="_blank" rel="noopener">这里</a>，通过搜索可以了解到，该特性最初在<code>libvirt 7.1.0</code>版本中支持。</p><p>了解到该特性最初支持的版本之后，使用Git将仓库切换到<code>v7.1.0</code>版本，搜索提交日志，将支持该特性相关的commits找出来，与当前<code>v6.2.0</code>版本的代码进行对比，观察代码的变化，确定哪些是需要进行修改的，哪些是可以保留的。在我一页页翻着Git logs时，导师发了一个<code>bugzilla</code>的<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1884659" target="_blank" rel="noopener">链接</a>过来，里面包含了支持<code>vhostuser</code>类型磁盘相关的所有commits，使一筹莫展的我醍醐灌顶，根据链接中提到的commits分析，随后回合即可。</p><h1 id="回合过程"><a href="#回合过程" class="headerlink" title="回合过程"></a>回合过程</h1><h2 id="流程简介"><a href="#流程简介" class="headerlink" title="流程简介"></a>流程简介</h2><p>我的回合流程有以下几个步骤：</p><ol><li><code>git cherry-pick</code>将相关commits合并到当前分支</li><li>解决<code>cherry-pick</code>过程中产生的代码冲突，尚不清楚功能的新代码和新文件倾向于保留</li><li>尝试编译，遇到错误根据错误日志解决问题，直至编译成功</li><li>运行测试，根据测试结果寻找相应错误地方，并将错误解决</li><li>删去多余的代码，<code>cherry-pick</code>过程中不可避免的拉取了一些多余的代码，将其删去，保证代码精简</li></ol><h2 id="问题一：代码冲突"><a href="#问题一：代码冲突" class="headerlink" title="问题一：代码冲突"></a>问题一：代码冲突</h2><p><code>cherry-pick</code>过程中不可避免地会产生代码冲突，尤其是跨了一个大版本的库，因此我采取的策略如下：</p><ol><li>对于<code>Makefile</code>冲突文件，均采取舍弃的策略。由于<code>6.2.0</code>的构建系统为<code>make</code>，而<code>7.1.0</code>版本的构建系统更换为<code>meson</code>，因此有关<code>meson.build</code>的新增文件一律舍弃，并做好文件变动记录，手动在<code>Makefile</code>中添加需要编译的文件。</li><li>对于代码发生移动的更改，均采取舍弃的策略。在<code>7.1.0</code>版本中，许多代码从原本的文件中抽离出来，使得代码和文件结构更加模块化，而在<code>6.2.0</code>版本中，由于移动代码涉及到的变动非常大，包括：头文件、函数名、Makefile等均需要做出改动，因此只能采取舍弃的策略。</li><li>对于代码发生冲突的区域，分析代码的变动，在保证函数功能不发生变化的情况下合入更改。由于发生改动的函数可能被很多其他模块所使用，因此在合入更改的适合需要分析更改是否会影响到函数本身的功能，避免其他模块出现不可预测的错误。</li></ol><p>将有关commits全部合入之后，检查发生变动的所有文件，检查是否存在明显的语法错误，检查完毕后便可以尝试手动编译。</p><h2 id="问题二：编译错误"><a href="#问题二：编译错误" class="headerlink" title="问题二：编译错误"></a>问题二：编译错误</h2><p>下面这张图很好地说明了我在编译过程中遇到的问题</p><p><img src="images/ospp/compile_errors.png" alt="编译错误"></p><p>错误日志提供的信息还是很详细的，按照日志定位到错误的地方，解决对应的问题就可以了。我在编译过程中遇到的问题主要是<code>枚举类缺少相应枚举字段</code>以及<code>switch分支缺少对应case</code>，将其补充上即可。同时需要注意的是，<code>6.2.0</code>到<code>7.1.0</code>中间支持了很多其他特性，这些特性在<code>cherry-pick</code>的过程中同时写入到了枚举类中，但实际上并没有对应的代码支持这些特性，因此需要将这些“假支持”的特性给删掉。</p><p>解决完以上问题后，编译就能成功了，编译成功也意味着合入的代码在编译链接的过程中是没有错误了，剩余的工作就要测试验证功能是否正常工作。</p><h2 id="问题三：枚举顺序引发的惨案"><a href="#问题三：枚举顺序引发的惨案" class="headerlink" title="问题三：枚举顺序引发的惨案"></a>问题三：枚举顺序引发的惨案</h2><p>由于我没有<code>Jenkins</code>之类的自动化测试环境，我只能手动地去跑一些跟本次任务相关的测试用例，待导师上班之后再问问他如何自动化运行所有测试。</p><p>因为在代码回合的过程中发现修改的测试数据都集中在<code>qemucapabilitiesdata</code>这个文件夹中，因此跟本次任务相关的单元测试主要是<code>build/tests/*cap*</code>相关的测试。运行一下测试就会发现报错，并提示运行一个更为详细的debug命令，运行该命令后会得到一个详细的错误报告，提示出现错误的地方。</p><p><img src="images/ospp/test_errors_by_enums.jpg" alt="枚举引发的错误"></p><p>从上图可以看到，预期输出应为<code>vhost-user-blk</code>，而实际输出为<code>object.qapified</code>，这个错误是由枚举类的顺序错误引起的，我将这两个字段顺序放反了，却并没有注意到。这个小错误卡浪费了我一堆时间，最终在对比<code>7.1.0</code>版本中的文件历史记录时发现并想起这个问题。这也说明枚举类中的字段是按顺序编号的，顺序弄反之后输出的结果也是相反的。</p><p>最终，将顺序改正之后再编译一次，再次运行测试，就能全部通过了。</p><p><img src="images/ospp/test_success.png" alt="测试通过"></p><h2 id="回合总结"><a href="#回合总结" class="headerlink" title="回合总结"></a>回合总结</h2><p>回合的过程就是一个<code>Code review</code>的过程，需要我们去了解每段代码的功能，解决产生的冲突，回合的过程中需要注意的点就是尽量不影响其他代码模块的功能。同时，做好Git commit的记录，操作的步骤切分的详细一点，在出现问题后回滚便会十分方便。</p><h1 id="生成补丁"><a href="#生成补丁" class="headerlink" title="生成补丁"></a>生成补丁</h1><p>测试确认功能没问题后，就能够使用<code>git format-patch</code>命令根据commit记录生成Patch补丁，再将补丁应用到<code>libvirt-rpm</code>制品仓中，构建新版本的软件包，并最终测试功能。</p><h2 id="Format-patch"><a href="#Format-patch" class="headerlink" title="Format-patch"></a>Format-patch</h2><p>在项目根目录下创建一个文件夹，用于存放生成的Patch文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir patches</span><br><span class="line">git format-patch master -o patches</span><br></pre></td></tr></table></figure></p><p>此时会生成很多补丁文件，由于旧的补丁文件在制品仓中已经存在，我们只要用自己的Commit制作的Patches即可。</p><h2 id="构建软件包"><a href="#构建软件包" class="headerlink" title="构建软件包"></a>构建软件包</h2><p>将制品仓的补丁和自己制作的补丁都移动到<code>~/rpmbuild/SOURCES/</code>中，同时编辑<code>libvirt.spec</code>文件，将自己制作的补丁文件按照顺序写到补丁列表中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Patch0141: 0142-src-add-missing-virstoragefile.h-includes.patch</span><br><span class="line">Patch0142: 0143-virstoragefile-properly-include-virstoragefile.h-hea.patch</span><br><span class="line">Patch0143: 0144-virstoragefile-change-virStorageSource-drv-to-void-p.patch</span><br><span class="line">Patch0144: 0145-qemu_alias-introduce-qemuDomainGetVhostUserAlias-hel.patch</span><br><span class="line">Patch0145: 0146-docs-introduces-new-vhostuser-disk-type.patch</span><br><span class="line">Patch0146: 0147-conf-implement-support-for-vhostuser-disk.patch</span><br><span class="line">Patch0147: 0148-qemu_capabilities-introduce-vhost-user-blk-capabilit.patch</span><br><span class="line">Patch0148: 0149-qemu-implement-vhost-user-blk-support.patch</span><br><span class="line">Patch0149: 0150-qemu-capabilities-Introduce-QEMU_CAPS_VIRTIO_BLK_SCS.patch</span><br><span class="line">Patch0150: 0151-Set-QEMU_CAPS_VIRTIO_BLK_SCSI_DEFAULT_DISABLED-when-.patch</span><br></pre></td></tr></table></figure></p><p>然后运行构建命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/rpmbuild</span><br><span class="line">rpmbuild -ba SPECS/libvirt.spec</span><br></pre></td></tr></table></figure></p><p>构建完成后覆盖安装升级<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh RPMS/x86_64/libvirt*</span><br></pre></td></tr></table></figure></p><h2 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h2><p>由于SELinux的特性会使得<code>vhost-user-blk</code>的Socket没有连接权限，因此我们需要先将SELinux关掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo setenforce 0</span><br></pre></td></tr></table></figure></p><p>接下来创建一个<code>qcow2</code>硬盘文件，然后用<code>qemu-storage-daemon</code>创建一个<code>vhost-user-blk</code>类型的Socket。有几种不同类型的<code>vhostuser</code>硬盘，具体如何创建Socket可以参考QEMU的<a href="https://qemu-project.gitlab.io/qemu/tools/qemu-storage-daemon.html" target="_blank" rel="noopener">文档</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 share-disk.qcow2 1G</span><br><span class="line"></span><br><span class="line">qemu-storage-daemon \</span><br><span class="line">    --blockdev driver=file,node-name=share-file,filename=share-disk.qcow2 \</span><br><span class="line">    --blockdev driver=qcow2,node-name=share-disk,file=share-file \</span><br><span class="line">    --<span class="built_in">export</span> <span class="built_in">type</span>=vhost-user-blk,id=share-disk,addr.type=unix,addr.path=share-disk.sock,node-name=share-disk,writable=on</span><br></pre></td></tr></table></figure></p><p>此时在目录下能够看到一个名为<code>share-disk.sock</code>的Socket文件，虚拟机硬盘配置中就可以使用这个文件了。</p><p>接下来编写一个虚拟机配置文件，从欧拉的文档中复制一份下来即可，将其命名为<code>openEuler.xml</code>。需要注意的是，<code>vhost-user-blk</code>类型磁盘要求内存的类型是共享的，需要在XML中配置一下<code>memoryBacking</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span> <span class="attr">type</span>=<span class="string">'qemu'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>openEuler<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">'GiB'</span>&gt;</span>2<span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">memoryBacking</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">'memfd'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">access</span> <span class="attr">mode</span>=<span class="string">'shared'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">memoryBacking</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vcpu</span>&gt;</span>2<span class="tag">&lt;/<span class="name">vcpu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span> <span class="attr">arch</span>=<span class="string">'aarch64'</span> <span class="attr">machine</span>=<span class="string">'virt'</span>&gt;</span>hvm<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loader</span> <span class="attr">readonly</span>=<span class="string">'yes'</span> <span class="attr">type</span>=<span class="string">'pflash'</span>&gt;</span>/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw<span class="tag">&lt;/<span class="name">loader</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nvram</span>&gt;</span>/var/lib/libvirt/qemu/nvram/openEulerVM.fd<span class="tag">&lt;/<span class="name">nvram</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">features</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">acpi</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gic</span> <span class="attr">version</span>=<span class="string">'3'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">features</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">topology</span> <span class="attr">sockets</span>=<span class="string">'1'</span> <span class="attr">cores</span>=<span class="string">'2'</span> <span class="attr">threads</span>=<span class="string">'1'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iothreads</span>&gt;</span>1<span class="tag">&lt;/<span class="name">iothreads</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">clock</span> <span class="attr">offset</span>=<span class="string">'utc'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">on_poweroff</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_poweroff</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">on_reboot</span>&gt;</span>restart<span class="tag">&lt;/<span class="name">on_reboot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">on_crash</span>&gt;</span>restart<span class="tag">&lt;/<span class="name">on_crash</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">emulator</span>&gt;</span>/usr/libexec/qemu-kvm<span class="tag">&lt;/<span class="name">emulator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">'vhostuser'</span> <span class="attr">device</span>=<span class="string">'disk'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">'qemu'</span> <span class="attr">type</span>=<span class="string">'qcow2'</span> <span class="attr">queues</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">'unix'</span> <span class="attr">path</span>=<span class="string">'/root/vm/share-disk.sock'</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">'vda'</span> <span class="attr">bus</span>=<span class="string">'virtio'</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">boot</span> <span class="attr">order</span>=<span class="string">'2'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">'file'</span> <span class="attr">device</span>=<span class="string">'cdrom'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">'qemu'</span> <span class="attr">type</span>=<span class="string">'raw'</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">'/root/vm/openEuler-22.03-LTS-aarch64-dvd.iso'</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readonly</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">'sdb'</span> <span class="attr">bus</span>=<span class="string">'scsi'</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">boot</span> <span class="attr">order</span>=<span class="string">'1'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">'bridge'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">bridge</span>=<span class="string">'br0'</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">model</span> <span class="attr">type</span>=<span class="string">'virtio'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">type</span>=<span class="string">'pty'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">model</span> <span class="attr">type</span>=<span class="string">'virtio'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">controller</span> <span class="attr">type</span>=<span class="string">'scsi'</span> <span class="attr">index</span>=<span class="string">'0'</span> <span class="attr">model</span>=<span class="string">'virtio-scsi'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">controller</span> <span class="attr">type</span>=<span class="string">'usb'</span> <span class="attr">model</span>=<span class="string">'ehci'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'tablet'</span> <span class="attr">bus</span>=<span class="string">'usb'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'keyboard'</span> <span class="attr">bus</span>=<span class="string">'usb'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">graphics</span> <span class="attr">type</span>=<span class="string">'vnc'</span> <span class="attr">port</span>=<span class="string">'5900'</span> <span class="attr">listen</span>=<span class="string">'0.0.0.0'</span> <span class="attr">passwd</span>=<span class="string">'n8VfjbFK'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">seclabel</span> <span class="attr">type</span>=<span class="string">'dynamic'</span> <span class="attr">model</span>=<span class="string">'dac'</span> <span class="attr">relabel</span>=<span class="string">'yes'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>定义并启动虚拟机，使用VNC连接虚拟机屏幕，观察虚拟机是否启动成功，硬盘是否正确地挂载，能够正确地读写文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh define openEuler.xml</span><br><span class="line">virsh start openEuler</span><br></pre></td></tr></table></figure></p><p><img src="images/ospp/vhostuser_vm_start.jpg" alt="启动虚拟机"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在做OSPP项目的过程中，导师问我要不顺便参加OpenEuler的开源实习，正好&lt;code&gt;libvirt&lt;/code&gt;有几个开源实习的任务，让我顺便一起做了。本来我就已经参加了这个活动，待在MindSpore社区，现在正好在OpenEuler社区也领一些任务做，涨涨积分。看了一下virt-sig组的任务之后，我选择先做&lt;code&gt;libvirt 6.2.0支持vhostuser类型磁盘&lt;/code&gt;这个任务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OSPP" scheme="http://www.fisheryung.top/tags/ospp/"/>
    
      <category term="操作系统" scheme="http://www.fisheryung.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="开源" scheme="http://www.fisheryung.top/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="虚拟化" scheme="http://www.fisheryung.top/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>OSPP之旅（三）</title>
    <link href="http://www.fisheryung.top/ospp%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%89%EF%BC%89.html"/>
    <id>http://www.fisheryung.top/ospp之旅（三）.html</id>
    <published>2022-06-22T08:51:34.000Z</published>
    <updated>2022-06-22T09:02:39.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本机源码编译没问题之后，下一步就是构建RPM包了。由于<code>libvirt 8.2.0</code>版本将构建系统从<code>make</code>换成了<code>meson</code>，因此旧版的SPEC文件参考的价值不高，好在Fedora系统的<code>libvirt</code>是最新版的，我们可以参考Fedora RPM仓库中的SPEC文件。编写完SPEC文件后使用RPM构建工具打包，生成RPM包后再安装到本机上并进行测试。</p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>安装RPM打包工具包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install rpmdevtools</span><br></pre></td></tr></table></figure></p><p>初始化RPM打包工作区，命令会在用户根目录下创建一个<code>rpmbuild</code>目录，作为打包的根目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpmdev-setuptree</span><br></pre></td></tr></table></figure></p><p>其他依赖：推荐是先安装<code>libvirt 6.2.0</code>版本，能自动解决绝大多数依赖问题，构建完之后再卸载掉即可</p><p>参考链接：</p><ul><li>RPM Red Hat文档，点击<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/packaging_and_distributing_software/index" target="_blank" rel="noopener">这里</a></li><li><code>libvirt</code>源码打包归档，点击<a href="https://libvirt.org/sources/" target="_blank" rel="noopener">这里</a></li><li>Fedora系统<code>libvirt</code>RPM包仓库，点击<a href="https://src.fedoraproject.org/rpms/libvirt" target="_blank" rel="noopener">这里</a></li></ul><h1 id="编写SPEC文件"><a href="#编写SPEC文件" class="headerlink" title="编写SPEC文件"></a>编写SPEC文件</h1><h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><p>SPEC文件的头部一般都是一些关于系统架构和依赖的宏定义，用于定义是否在某些系统架构上启用某个组件，将欧拉的SPEC文件与Fedora的SPEC文件对比可以发现有许多不同的地方：</p><ul><li>Fedora的SPEC文件首先定义了关键组件所支持的架构，方便在以后某些架构支持某个组件后，直接修改这里就能启用对应架构的组件支持，这种写法结构很清晰，我也打算使用这种写法</li><li>Fedora的SPEC文件中定义了Fedora和RHEL两种系统版本宏，在欧拉中不需要定义，因此将这些宏去掉</li><li>由于部分组件在欧拉系统中尚未支持，如：<code>zfs</code>。因此在宏中直接定义为禁用</li><li><code>bash_completion</code>包在新版中去掉了，变成了一个编译参数，因此需要修改对应宏定义，同时增加对应编译参数</li></ul><h2 id="包定义"><a href="#包定义" class="headerlink" title="包定义"></a>包定义</h2><p>宏定义后紧跟的是软件包的定义，包括软件包名称、版本、描述、补丁列表、依赖等，这里大部分都可以参考Fedora的SPEC文件，需要注意的地方有以下几点：</p><ul><li>欧拉官方源中尚未支持<code>mdevctl</code>，因此在<code>daemon-driver-nodedev</code>包中需要把对应的依赖注释掉</li><li>欧拉系统中的<code>qemu-kvm</code>组件集成到了<code>qemu</code>中，因此在<code>daemon-kvm</code>包中把对应依赖包名称修改一下</li></ul><h2 id="构建脚本"><a href="#构建脚本" class="headerlink" title="构建脚本"></a>构建脚本</h2><p>随后是RPM包的构建脚本，脚本中定义了软件包的编译选项，同时定义了整个安装过程，这里基本都是从Fedora的SPEC文件中复制过来的</p><h2 id="更改日志"><a href="#更改日志" class="headerlink" title="更改日志"></a>更改日志</h2><p>SPEC文件的修改日志，每次软件包有补丁更新都需要在这里描述补丁信息</p><h1 id="构建、安装、测试"><a href="#构建、安装、测试" class="headerlink" title="构建、安装、测试"></a>构建、安装、测试</h1><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>将<code>libvirt.spec</code>文件放到<code>~/rpmbuild/SPECS/</code>中，将<code>libvirt-8.2.0.tar.xz</code>文件放到<code>~/rpmbuild/SOURCES/</code>中，<code>rpmbuild</code>文件夹下的目录结构应该如下图所示</p><p><img src="images/ospp/rpmbuild_tree.png" alt="目录结构"></p><p>使用以下命令构建RPM包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/rpmbuild/</span><br><span class="line">rpmbuild -ba SPECS/libvirt.spec</span><br></pre></td></tr></table></figure></p><p>构建和过程和源码编译的过程差不多，不同的地方是RPM会进行安装测试，确保没有错误后再打包为RPM包，以下是构建完成后的输出</p><p><img src="images/ospp/rpmbuild_ba.png" alt="RPM包构建完成"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>从上图右侧目录可以看到<code>RPMS/x86_64</code>文件夹中会有很多生成rpm包文件，将这些RPM包都安装到本机上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh RPMS/x86_64/libvirt-*.rpm</span><br></pre></td></tr></table></figure></p><p>这时候可能会出现非常多的依赖报错问题，没关系问题不大，打开这个网站按照依赖的名字一个一个搜，就能找到包名然后安装了，网址点击<a href="https://rpmfind.net/linux/rpm2html/search.php" target="_blank" rel="noopener">这里</a></p><p>一顿猛排查下来，发现欧拉官方源少了三个包：<code>mdevctl</code>，<code>zfs-utils</code>，<code>qemu-kvm</code>。再看看旧版的SPEC文件，解决方法是把ZFS屏蔽掉，其他两个依赖在旧版中不存在，应该是后续版本中新加上去的依赖。</p><p>跟导师简单地讨论下当前的情况之后，导师给出的解决方法有两个：</p><ul><li>从源码编译安装缺少的依赖包，然后再尝试安装</li><li>在SPEC文件中屏蔽掉对应的依赖，就当什么事都没发生</li></ul><p>于是我便尝试先解决<code>mdevctl</code>包依赖的问题，源码编译过程如下。首先是<code>mdevctl</code>，安装<code>cargo</code>构建工具，随后从GitHub上clone源码下来，最后编译并安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y cargo</span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/mdevctl/mdevctl.git</span><br><span class="line"><span class="built_in">cd</span> mdevctl</span><br><span class="line">cargo build</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>安装完成后再次尝试运行RPM包安装命令，发现仍然提示缺少<code>mdevctl</code>这个包，但我在命令行中是能够正常使用<code>mdevctl</code>相关命令的，我严重怀疑这个RPM包依赖分析是只从YUM、RPM等包管理命令中获取软件包是否安装的信息，而不是从系统的环境变量中获取，因此只能先放弃解决<code>mdevctl</code>包的依赖问题，在SPEC文件中屏蔽掉对应依赖。关于<code>zfs-utils</code>包，这个包在欧拉官方源中没有，因此也只能暂时屏蔽掉了。关于<code>qemu-kvm</code>包，在欧拉官方源中，这个包集成到<code>qemu</code>包中了，在SPEC文件中将依赖修改为<code>qemu</code>即可。</p><p>SPEC文件修改完成后，再次重新构建RPM包，构建完成后安装，此时应该就没有依赖问题了</p><p><img src="images/ospp/install.png" alt="安装RPM包"></p><p>RPM安装完成后，记得启动<code>libvirtd</code>服务，命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service libvirtd start</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行<code>virsh</code>，随便敲点命令，尝试创建一个虚拟机，观察虚拟机是否运行正常</p><p>命令行验证版本</p><p><img src="images/ospp/virsh_version.png" alt="验证版本"></p><p><code>virsh</code>测试</p><p><img src="images/ospp/virsh_cmd.png" alt="virsh命令行"></p><p>虚拟机测试</p><p><img src="images/ospp/virsh_test.png" alt="虚拟机运行"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本机源码编译没问题之后，下一步就是构建RPM包了。由于&lt;code&gt;libvirt 8.2.0&lt;/code&gt;版本将构建系统从&lt;code&gt;make&lt;/code&gt;换成了&lt;code&gt;meson&lt;/code&gt;，因此旧版的SPEC文件参考的价值不高，好在Fedora系统的&lt;code&gt;libvirt&lt;/code&gt;是最新版的，我们可以参考Fedora RPM仓库中的SPEC文件。编写完SPEC文件后使用RPM构建工具打包，生成RPM包后再安装到本机上并进行测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OSPP" scheme="http://www.fisheryung.top/tags/ospp/"/>
    
      <category term="操作系统" scheme="http://www.fisheryung.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="开源" scheme="http://www.fisheryung.top/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="虚拟化" scheme="http://www.fisheryung.top/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>OSPP之旅（二）</title>
    <link href="http://www.fisheryung.top/ospp%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://www.fisheryung.top/ospp之旅（二）.html</id>
    <published>2022-06-21T07:42:04.000Z</published>
    <updated>2022-06-21T08:49:45.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开工的第一步当然是要搭建好工作环境。根据任务的描述，我们需要编译构建出<code>libvirt 8.2.0</code>RPM包，因此工作环境首先是要顺利完成源码编译的任务。因此本篇博客中，我们需要新建一个虚拟机，在虚拟机中安装<code>openEuler 22.03 LTS</code>，拉取<code>libvirt</code>库，根据<code>libvirt</code>的文档手动编译出<code>8.2.0</code>版本。</p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>以下是编译前需要准备的东西，由于过于简单，就不详细说明如何搭建的：</p><ul><li>操作系统：<code>openEuler 22.03 LTS</code>，在虚拟机中安装，流程几乎和<code>CentOS</code>一样</li><li><code>Meson</code>：<code>libvirt 8.2.0</code>的构建工具，可以使用命令<code>sudo pip3 install meson</code>安装</li><li><code>Ninja</code>：<code>libvirt 8.2.0</code>的构建系统，可以使用命令<code>sudo pip3 install ninja</code>安装</li><li><code>Clangd</code>：<code>LLVM</code>推出的语法分析工具，使用<code>compile_commands.json</code>文件分析项目代码，配合VSCode的Clangd插件使用起来很舒服，照着官方文档安装即可，文档地址在<a href="https://clangd.llvm.org/installation" target="_blank" rel="noopener">这里</a></li><li><code>libvirt</code>其他依赖：好像还有xml什么的依赖，<code>meson build</code>检查依赖的时候会有日志的，提示缺什么包用<code>pip</code>照着安装就行了</li></ul><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h2 id="准备源码"><a href="#准备源码" class="headerlink" title="准备源码"></a>准备源码</h2><p>在Gitee上Fork<code>libvirt</code>仓库，地址在<a href="https://gitee.com/openeuler/libvirt" target="_blank" rel="noopener">这里</a>，并拉取到本地：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> git@gitee.com:wengyu1/libvirt.git</span><br></pre></td></tr></table></figure></p><p>从<code>8.2.0</code>的Tag创建新的分支，命名为<code>libvirt-8.2.0</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> libvirt</span><br><span class="line">git branch libvirt-8.2.0 v8.2.0</span><br></pre></td></tr></table></figure></p><h2 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h2><p>官方的编译文档在<a href="https://libvirt.org/compiling.html" target="_blank" rel="noopener">这里</a>。由于我们不需要安装，因此我们直接编译构建即可，编译选项直接默认即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meson build</span><br><span class="line">ninja -C build</span><br></pre></td></tr></table></figure></p><p>顺利编译完成，速度还挺快的</p><p><img src="images/ospp/compile.png" alt="编译完成"></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>将<code>build</code>文件夹中的<code>compile_commands.json</code>链接到项目根目录，<code>clangd</code>就会自动分析项目代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s `<span class="built_in">pwd</span>`/build/compile_commands.json `<span class="built_in">pwd</span>`</span><br></pre></td></tr></table></figure></p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>验证下编译的效果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build/tools</span><br><span class="line">./virsh --version</span><br></pre></td></tr></table></figure></p><p>效果如下图</p><p><img src="images/ospp/virsh.png" alt="运行效果"></p><p>至此，<code>libvirt</code>的源码编译完成了，下一步可以编写RPM spec文件，使用<code>rpmbuild</code>工具构建RPM包</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开工的第一步当然是要搭建好工作环境。根据任务的描述，我们需要编译构建出&lt;code&gt;libvirt 8.2.0&lt;/code&gt;RPM包，因此工作环境首先是要顺利完成源码编译的任务。因此本篇博客中，我们需要新建一个虚拟机，在虚拟机中安装&lt;code&gt;openEuler 22.03 LTS&lt;/code&gt;，拉取&lt;code&gt;libvirt&lt;/code&gt;库，根据&lt;code&gt;libvirt&lt;/code&gt;的文档手动编译出&lt;code&gt;8.2.0&lt;/code&gt;版本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OSPP" scheme="http://www.fisheryung.top/tags/ospp/"/>
    
      <category term="操作系统" scheme="http://www.fisheryung.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="开源" scheme="http://www.fisheryung.top/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="虚拟化" scheme="http://www.fisheryung.top/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>OSPP之旅（一）</title>
    <link href="http://www.fisheryung.top/ospp%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.fisheryung.top/ospp之旅（一）.html</id>
    <published>2022-06-18T03:08:14.000Z</published>
    <updated>2022-06-21T07:42:47.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>世界上有能够学到技术、提升协作能力、拿丰厚奖金这种“三全其美”的事情吗？在以前我是不相信的，但自从师兄介绍了开源之夏（OSPP）这种活动之后，我第一次知道世界上还有这样一种顶级的活动，鱼和熊掌二者竟可得兼！</p><p>简单地介绍下OSPP吧，这是一个由中科院软件研究所“开源软件供应链点亮计划”发起并长期支持的一项暑期开源活动，旨在鼓励在校学生积极参与开源软件的开发维护，促进优秀开源软件社区的蓬勃发展，培养和发掘更多优秀的开发者。官网地址点<a href="https://summer-ospp.ac.cn/#/homepage" target="_blank" rel="noopener">这里</a>。</p><a id="more"></a><h1 id="申请过程"><a href="#申请过程" class="headerlink" title="申请过程"></a>申请过程</h1><h2 id="选定项目"><a href="#选定项目" class="headerlink" title="选定项目"></a>选定项目</h2><p>首先肯定是要选择自己想做的项目了，选择的角度可以有很多，每个人的情况不同，根据自己的情况自行选择，以下是我选取项目所考虑到的部分角度：</p><ul><li>以后想做什么：这肯定是首先要考虑的因素，我想要做一些更偏向于底层的东西，因为偏向于底层的东西更有技术挑战性。克服一个个困难，实现一个个新功能，这样的开发过程很有意思。</li><li>项目技术与自身的切合度：如果选取一个自己完全陌生的项目，从零开始学习，那么项目做起来的难度肯定是非常大的，所以需要考虑下自己目前所掌握的知识和技术，判断下学习某个项目大概需要的时间，难度是否能够接受。</li><li>社区情况：社区的情况同样也很重要，如果某个社区非常活跃，导师也非常渴望新鲜血液的加入，那么这个社区肯定是值得加入的。</li></ul><p>经过筛选后，我选择了<code>为openEuler操作系统引入libvirt 8.2.0版本</code>这个项目，该项目属于<code>openEuler</code>社区。欧拉社区可以说是国内非常活跃的开源社区了，各种高校活动、比赛、社区活动、开源活动源源不断。社区主要负责开发和维护国产操作系统<code>openEuler</code>，本来就对开发操作系统比较感兴趣的我，与欧拉社区可以算是完美切合了。</p><h2 id="简要了解项目内容"><a href="#简要了解项目内容" class="headerlink" title="简要了解项目内容"></a>简要了解项目内容</h2><p>根据项目简介和项目产出要求，可以得知该项目的简要工作内容是兼容适配新版本的<code>libvirt</code>，当前<code>openEuler</code>使用的<code>libvirt</code>版本为<code>6.2.0</code>，随着<code>qemu</code>、<code>kvm</code>等包的新功能引入，旧版本的<code>libvirt</code>不能很好地适配这些新功能，<code>libvirt</code>也是时候升级一下了。项目的任务就是适配<code>libvirt 8.2.0</code>版本，将<code>6.2.0</code>版本中添加的、欧拉系统独有的功能特性继续在<code>8.2.0</code>版本中支持。</p><p>项目的产出要求如下：</p><ul><li>基于<code>openEuler</code>操作系统构建<code>libvirt 8.2.0</code>RPM包</li><li>将<code>6.2.0</code>版本中的补丁回合到<code>8.2.0</code>版本中</li></ul><p>对于项目的评价：</p><ul><li>涉及到操作系统的虚拟化技术，我对此比较感兴趣</li><li>主要内容是分析补丁并适配，工作量不会很大</li><li>虽然工作量不大，但需要熟悉项目和对应的技术，是个学习新技术的好机会</li><li>涉及到了打补丁的操作，这也是Linux内核维护常用的方式</li><li>C语言项目经验+1</li></ul><h2 id="联系导师"><a href="#联系导师" class="headerlink" title="联系导师"></a>联系导师</h2><p>在对项目进行简要了解之后，接下来就是联系导师了，在给导师发的第一封邮件中，我问了几个关于项目的问题。下午5点发的邮件，当天晚上7点多导师就回信了，不得不说导师的回复效率还是很高的，给导师点个赞！导师详细地回答了我提问的几个问题，同时附上了微信号，我也是马上就加了导师的微信。导师在微信中提供了很多相关的学习资料和文档，让我获益匪浅。</p><p>当然，导师也是很忙的，我们不能稍微有点小问题就去问导师，导师日常工作是很忙的。学习过程中遇到问题后，首先要尝试问问搜索引擎，要善于运用搜索引擎。实在是找不到相关解答的，再去问导师。</p><h2 id="撰写申请书"><a href="#撰写申请书" class="headerlink" title="撰写申请书"></a>撰写申请书</h2><p>撰写申请书是项目申请过程中最关键的一环了，前期联系交流的再愉快，最终还是要看申请书的质量的，关于申请书怎么写，OSPP委员会给出了一些指导意见，我们照着指导意见来写就基本没有问题了。参考链接点<a href="https://summer-ospp.ac.cn/help/proj_apply/" target="_blank" rel="noopener">这里</a>，此外今年中选的项目申请书都公示了，想要看看别人的写的申请书可以去官网项目列表中看。</p><p>我的项目书结构如下：</p><ul><li>标题</li><li>目录</li><li>项目简要描述</li><li>实现方案</li><li>开发计划</li><li>未来期望</li></ul><p>申请书写完之后就可以发给导师看看，让导师给出一些修改的建议，导师说基本没有问题之后，就可以等着提交到系统中了。</p><h1 id="申请结果"><a href="#申请结果" class="headerlink" title="申请结果"></a>申请结果</h1><p>6月5日申请书提交截至，6月15日晚公布结果，这10天毫无疑问就是折磨。但好事多磨，公布中选名单之后，邮箱第一时间就收到了邮件，不负所望，正式中选！</p><p><img src="images/ospp/selected.png" alt="中选邮件"></p><p>接下来就是正式开工前的准备了，跟导师开个线上会议，讨论接下来需要做的工作，确认工作内容后，就可以愉快地开工咯。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;世界上有能够学到技术、提升协作能力、拿丰厚奖金这种“三全其美”的事情吗？在以前我是不相信的，但自从师兄介绍了开源之夏（OSPP）这种活动之后，我第一次知道世界上还有这样一种顶级的活动，鱼和熊掌二者竟可得兼！&lt;/p&gt;&lt;p&gt;简单地介绍下OSPP吧，这是一个由中科院软件研究所“开源软件供应链点亮计划”发起并长期支持的一项暑期开源活动，旨在鼓励在校学生积极参与开源软件的开发维护，促进优秀开源软件社区的蓬勃发展，培养和发掘更多优秀的开发者。官网地址点&lt;a href=&quot;https://summer-ospp.ac.cn/#/homepage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OSPP" scheme="http://www.fisheryung.top/tags/ospp/"/>
    
      <category term="操作系统" scheme="http://www.fisheryung.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="开源" scheme="http://www.fisheryung.top/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="虚拟化" scheme="http://www.fisheryung.top/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建CSGO服务器</title>
    <link href="http://www.fisheryung.top/docker%E6%90%AD%E5%BB%BAcsgo%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
    <id>http://www.fisheryung.top/docker搭建csgo服务器.html</id>
    <published>2022-05-26T11:05:26.000Z</published>
    <updated>2022-05-26T11:29:14.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久之前在简书上写过几篇博客，内容就是搭建属于自己的CSGO服务器，点击<a href="https://www.jianshu.com/u/a23466842ccc" target="_blank" rel="noopener">这里</a>可以进行考古。但是纯命令行的搭建方式有着以下几种缺点：</p><ul><li>搭建步骤繁琐：全程直接使用命令行搭建服务器，对于不熟悉Linux环境的新手并不友好</li><li>插件切换繁琐：想要服务器能够快速地切换不同的插件（回防、Multi 1v1、跑图、KZ等），每次手动操作Addons文件夹中的插件极其令人烦躁</li><li>硬盘空间珍贵：同样是插件切换繁琐引起的问题，当时用的是阿里云最便宜的云服务器，只有40G的硬盘，只能存一份服务器游戏文件，没有足够的空间存多份服务器游戏文件然后多开</li></ul><a id="more"></a><p>后来也尝试写了一个CSGO服务器一键安装脚本，但是效果也不好，不能从根本上解决快速切换插件的问题。最后经过了解并尝试使用Docker，终于解决了上述问题，服务器目前稳定使用了几个月，用起来非常愉快，是时候分享给有着同样需求的小伙伴了，Github仓库地址在<a href="https://github.com/FisherWY/Docker-CSGO" target="_blank" rel="noopener">这里</a>，懂哥可以直接看仓库README开始搭建，萌新建议还是看这篇博客，有些细节和README并不相同（如：没有使用pwd命令等）。目前本容器有着以下几个特点：</p><ul><li>一个容器关联一种插件：Docker可以创建不同的容器，将CSGO服务器的插件分别挂载到不同的容器中。通过容器的启动和停止，达到快速切换插件的目的</li><li>不影响服务器游戏文件：容器只向<code>csgo/cfg</code>文件夹中添加插件的配置文件，不涉及到其他文件的改动，插件配置出问题后直接删除容器，重新创建即可</li><li>（理论上）同时启动多个服务器：每个容器都是相对独立的运行环境，Mod从文件中加载后不会重新加载，也就是说启动一个容器后可以更换Mod去启动另一个容器，因此可以同时启动多个运行不同插件的服务器</li></ul><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>实现的核心思路主要是以下两点：挂载、软链接。如下图所示，服务器游戏文件、Steamcmd和Mod文件夹均挂载到容器中，容器在启动时将Mod文件夹中的<code>addons</code>文件夹链接到服务器游戏文件夹中的<code>csgo/addons</code>，相当于创建一个快捷方式，服务器在启动时就会从这个软连接跳转到对应的Mod文件夹中，去加载对应的插件，完成服务器的启动。</p><p><img src="images/csgo/docker/arch.png" alt="实现思路"></p><p>通过控制容器的启动和停止，我们能够快速地切换到不同功能的服务器，在高效地管理Mod的同时不影响到原本的游戏服务器文件。接下来的搭建教程分为简单的三步：Steamcmd和服务器的安装、Mod的下载解压和CFG文件夹链接、容器的启动。</p><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><p>在开始之前，首先需要做以下准备：</p><ul><li><code>docker</code>和<code>docker-compose</code>：可以通过官网的文档安装（不用docker-compose也可以直接使用命令行创建和启动容器，仓库中的README有对应命令）</li><li>端口：每家的云服务器端口管理方案不同，需要开启27015端口的TCP和UDP，否则会出现服务器没有响应或无法连接等问题</li><li>系统：Ubuntu 20.04（其他发行版也可以，但是本人没有测试过）</li><li>Steam服务器登录令牌：服务器登录Steam所需要的令牌，没有令牌的话，启动的服务器不会显示在服务器列表中，可以点击<a href="https://steamcommunity.com/dev/managegameservers" target="_blank" rel="noopener">这里</a>申请令牌（CSGO的APPID为740）</li><li>Steam网页API：加载创意工坊地图需要使用的API密钥，可以点击<a href="http://steamcommunity.com/dev/apikey" target="_blank" rel="noopener">这里</a>注册一个</li><li>储备知识：默认小伙伴们会使用SSH连接服务器，并且懂得如何使用Vim、Linux基本命令，明白相对路径、绝对路径、用户权限的概念</li></ul><h1 id="安装Steamcmd和CSGO服务器"><a href="#安装Steamcmd和CSGO服务器" class="headerlink" title="安装Steamcmd和CSGO服务器"></a>安装Steamcmd和CSGO服务器</h1><ol><li>首先是拉取安装器镜像  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull registry.cn-shenzhen.aliyuncs.com/fisheryung/docker-csgo:installer</span><br></pre></td></tr></table></figure></li></ol><p><img src="images/csgo/docker/get_installer.png" alt="拉取安装器镜像"></p><ol start="2"><li>创建和启动安装器的容器<br>将Steamcmd和CSGO服务器的安装文件夹挂载到容器中，容器会自动将Steamcmd和CSGO服务器安装到挂载的文件夹中，同时将一些基本配置写入到服务器配置文件<code>csgo/cfg/server.cfg</code>中，写入的配置有以下几种：</li></ol><ul><li><code>STEAMACCOUNT</code>: Steam服务器登录令牌，参见准备阶段的描述</li><li><code>SERVER_HOSTNAME</code>: CSGO服务器名称，该名称显示在服务器列表中</li><li><code>RCON_PASSWORD</code>: CSGO服务器远程控制台连接密码，默认为<code>12345678</code></li><li><code>SV_PASSWORD</code>: CSGO服务器房间密码，默认为<code>12345678</code></li></ul><p>创建用于储存Steamcmd和CSGO服务器文件的挂载文件夹（文件夹路径和名称可以自定义，但需要记住路径）。个人习惯，本人喜欢把游戏相关的文件放到games文件夹中，由于我的用户名是<code>fisher</code>，所以我的steamcmd路径为<code>/home/fisher/games/steamcmd</code>，CSGO服务器路径为<code>/home/fisher/games/csgo-server</code>，这些路径都需要记住，等会挂载文件夹中需要用到。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir games &amp;&amp; <span class="built_in">cd</span> games</span><br><span class="line">mkdir steamcmd</span><br><span class="line">mkdir csgo-server</span><br></pre></td></tr></table></figure></p><p>创建一个<code>docker-compose</code>配置文件，用于配置将要创建的安装器容器，我将这份配置文件命名为<code>docker-csgo-installer.yaml</code>，储存路径为<code>home/fisher/games/docker-csgo-installer.yaml</code>。配置项如下，需要注意的地方有两个。第一个要注意的地方是<code>volumes</code>，表示要挂载的文件夹，需要将上面刚刚创建的两个文件夹路径写到冒号的前面。第二个要注意的地方是<code>environment</code>，也就是上面所说的服务器配置，根据自己的情况修改。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件名: docker-csgo-installer.yaml</span></span><br><span class="line"><span class="comment"># docker-csgo:installer 的示例配置文件</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  csgo-installer:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">csgo-installer</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">registry.cn-shenzhen.aliyuncs.com/fisheryung/docker-csgo:installer</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/fisher/games/steamcmd:/steamcmd</span> <span class="comment"># 冒号前的挂载路径需要根据自己的配置改变，可以使用pwd命令查看当前路径</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/fisher/games/csgo-server:/csgo-server</span>   <span class="comment"># 挂载路径配置同上</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">STEAMACCOUNT=xxxxxxxxxx</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVER_HOSTNAME=CSGOSERVER</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RCON_PASSWORD=12345678</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SV_PASSWORD=12345678</span></span><br></pre></td></tr></table></figure></p><p>使用<code>docker-compose</code>创建和启动容器（注意：仓库README中使用了<code>-d</code>参数，使容器在后台运行，在此不用<code>-d</code>参数的目的是让萌新能看到Steamcmd和CSGO服务器的安装进度），随后便能够看到安装进度，耐心等待容器运行结束并自动退出即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose -f docker-csgo-installer.yaml up</span><br></pre></td></tr></table></figure></p><p><img src="images/csgo/docker/installer_up.png" alt="安装进度"></p><p><strong>注意：服务器在下载过程中可能会跑满带宽，导致SSH连接卡住不动或者直接断开连接，不用担心，容器还是在后台运行中的，耐心等待就可以了。</strong><br>如果有跟我一样断开SSH连接的小伙伴，可以重新连接并使用<code>sudo docker ps -a</code>命令查看所有容器状态，如下图所示，STATUS为UP表示容器正在运行中。可以使用命令<code>sudo docker logs csgo-installer --tail=50</code>查看容器最新的日志，下图中可以看到下载的进度。</p><p><img src="images/csgo/docker/installer_status.png" alt="安装器状态和日志"></p><h1 id="创建和启动无Mod的CSGO服务器"><a href="#创建和启动无Mod的CSGO服务器" class="headerlink" title="创建和启动无Mod的CSGO服务器"></a>创建和启动无Mod的CSGO服务器</h1><p>如果需要创建和启动有Mod的CSGO服务器，直接跳到下一节。  </p><ol><li>首先是拉取无Mod的CSGO服务器容器镜像  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull registry.cn-shenzhen.aliyuncs.com/fisheryung/docker-csgo:origin</span><br></pre></td></tr></table></figure></li></ol><p><img src="images/csgo/docker/get_origin.png" alt="拉取无Mod版本镜像"></p><ol start="2"><li>创建和启动无Mod的CSGO服务器<br>同样将Steamcmd和CSGO服务器文件夹挂载到容器中，同时需要自定义一些启动参数，目前支持的参数有以下几种：</li></ol><ul><li><code>PORT</code>: 服务器端口，默认为<code>27015</code>，本样例中没有设置该参数(懂的可自行修改，同时需要设置容器的端口映射)</li><li><code>TICKRATE</code>: 服务器的Tickrate，可以设置为<code>64</code>或<code>128</code>，默认为<code>128</code></li><li><code>GAMETYPE</code>: 游戏类型和游戏模式设置(休闲、竞技、死斗)，默认为<code>0</code>，想要启动其他模式可以参考<a href="https://developer.valvesoftware.com/wiki/Counter-Strike:_Global_Offensive_Dedicated_Servers#Starting_the_Server" target="_blank" rel="noopener">这里</a></li><li><code>GAMEMODE</code>: 游戏类型和游戏模式设置(休闲、竞技、死斗)，默认为<code>0</code>，想要启动其他模式可以参考<a href="https://developer.valvesoftware.com/wiki/Counter-Strike:_Global_Offensive_Dedicated_Servers#Starting_the_Server" target="_blank" rel="noopener">这里</a></li><li><code>MAPGROUP</code>: 游戏地图组设置，默认为<code>mg_active</code></li><li><code>MAP</code>: 游戏地图设置，默认为<code>de_dust2</code></li></ul><p>创建<code>docker-compose</code>配置文件，用于配置将要启动的CSGO服务器，我将这份配置文件命名为<code>docker-origin.yaml</code>，储存路径为<code>/home/fisher/games/docker-origin.yaml</code>。<code>volumes</code>的配置与上面的安装器配置文件一致，<code>environment</code>是服务器的启动参数，可以根据自己的需要进行修改。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件名: docker-origin.yaml</span></span><br><span class="line"><span class="comment"># docker-csgo:origin 的示例配置文件</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  csgo-origin:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">csgo-origin</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">registry.cn-shenzhen.aliyuncs.com/fisheryung/docker-csgo:origin</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">host</span>  <span class="comment"># 需要多开的伙伴可以指定端口映射</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/fisher/games/steamcmd:/steamcmd</span> <span class="comment"># 冒号前的挂载路径需要根据自己的配置改变，可以使用pwd命令查看当前路径</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/fisher/games/csgo-server:/csgo-server</span>   <span class="comment"># 同上</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">TICKRATE=128</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">GAMETYPE=0</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">GAMEMODE=0</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MAPGROUP=mg_active</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MAP=de_mirage</span></span><br></pre></td></tr></table></figure></p><p>使用<code>docker-compose</code>创建和启动容器，此时容器将在后台启动。关于如何连接服务器、更新服务器和停止服务器，跳转到最后一节。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose -f docker-origin.yaml up -d</span><br></pre></td></tr></table></figure></p><p><img src="images/csgo/docker/start_origin.png" alt="启动无MOD的CSGO服务器"></p><h1 id="创建和启动有Mod的CSGO服务器"><a href="#创建和启动有Mod的CSGO服务器" class="headerlink" title="创建和启动有Mod的CSGO服务器"></a>创建和启动有Mod的CSGO服务器</h1><p>在此以<a href="https://github.com/splewis/csgo-multi-1v1" target="_blank" rel="noopener">Multi-1v1</a>插件为例子，同时使用到了插件和创意工坊地图，在使用创意工坊地图之前，首先要去获取一个Steam网页API密钥，详细参见准备阶段。</p><ol><li>首先是拉取有Mod的CSGO服务器容器镜像  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull registry.cn-shenzhen.aliyuncs.com/fisheryung/docker-csgo:mods</span><br></pre></td></tr></table></figure></li></ol><p><img src="images/csgo/docker/get_mods.png" alt="拉取有Mod版本镜像"></p><ol start="2"><li><p>创建插件文件夹，下载所需要的插件<br>需要的插件有：<code>mmsource</code>，<code>sourcemod</code>，<code>multi-1v1</code>。注意，该操作依旧是在<code>/home/fisher/games</code>文件夹中，小伙伴们需要注意自己的当前的路径，做出相应的修改。注意，有些小伙伴下载速度可能会很慢，可能需要配合上网技巧。同时，有些插件的压缩包格式为zip，需要注意这些后缀。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir mods &amp;&amp; <span class="built_in">cd</span> mods</span><br><span class="line">mkdir 1v1 &amp;&amp; <span class="built_in">cd</span> 1v1</span><br><span class="line">wget --no-check-certificate -O mmsource.tar.gz https://mms.alliedmods.net/mmsdrop/1.11/mmsource-1.11.0-git1145-linux.tar.gz</span><br><span class="line">wget --no-check-certificate -O sourcemod.tar.gz https://sm.alliedmods.net/smdrop/1.10/sourcemod-1.10.0-git6537-linux.tar.gz</span><br><span class="line">wget --no-check-certificate -O plugin.zip https://github.com/splewis/csgo-multi-1v1/releases/download/1.1.10/multi1v1_1.1.10.zip</span><br></pre></td></tr></table></figure></li><li><p>链接CSGO服务器的CFG文件夹<br><strong>注意：这是关键一步。</strong><br>在解压刚刚下载的所有插件之前，我们需要先将服务器中的CFG文件夹链接到插件文件夹中，保证随后解压的插件配置文件都解压到服务器的CFG文件夹中。注意链接的路径需要根据自己的情况修改，链接之后在1v1文件夹中可以看到一个cfg的软链接，该软链接指向CSGO服务器文件夹中的CFG文件夹，表示操作成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/fisher/games/csgo-server/csgo/cfg/ /home/fisher/games/mods/1v1/cfg</span><br></pre></td></tr></table></figure></li></ol><p><img src="images/csgo/docker/link.png" alt="查看软链接"></p><ol start="4"><li>解压插件<br>注意此时的工作路径应为：<code>/home/fisher/games/mods/1v1</code>，有些插件压缩包格式为zip，需要使用unzip解压。解压后的Mod文件夹结构如下图所示，插件的CFG配置文件均解压到CSGO服务器文件夹中。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxkf mmsource.tar.gz</span><br><span class="line">tar zxkf sourcemod.tar.gz</span><br><span class="line">unzip -o plugin.zip</span><br></pre></td></tr></table></figure></li></ol><p><img src="images/csgo/docker/unzip.png" alt="解压完成"></p><ol start="5"><li>创建和启动有Mod的CSGO服务器<br>与无Mod的CSGO服务器镜像不同，有Mod的CSGO服务器镜像有部分不同的意义的参数：</li></ol><ul><li><code>MAPGROUP</code>: 创意工坊地图合集，管理游戏结束后投票下一张地图的菜单，想用官方地图组可以直接改为<code>mg_active</code>或其他</li><li><code>MAP</code>: 创意工坊地图ID，想用官方图可以直接改为<code>de_dust2</code>或其他</li><li><code>AUTHKEY</code>: Steam网页API密钥，使用创意工坊地图时要用，如果只需要启动官方地图，则设置为<code>NONE</code>即可</li></ul><p>返回到路径<code>/home/fisher/games</code>。创建<code>docker-compose</code>配置文件，用于配置将要启动的CSGO服务器，我将这份配置文件命名为<code>docker-1v1.yaml</code>，储存路径为<code>/home/fisher/games/docker-1v1.yaml</code>。<code>volumes</code>的配置除了挂载Steamcmd和CSGO服务器文件夹外，还需要挂载Mod文件夹，<code>environment</code>是服务器的启动参数，可以根据自己的需要进行修改。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件名: docker-1v1.yaml</span></span><br><span class="line"><span class="comment"># docker-csgo:mods 的示例配置文件</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  csgo-1v1:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">csgo-1v1</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">registry.cn-shenzhen.aliyuncs.com/fisheryung/docker-csgo:mods</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">host</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/fisher/steamcmd:/steamcmd</span> <span class="comment"># 冒号前的挂载路径需要根据自己的配置改变，可以使用pwd命令查看当前路径</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/fisher/csgo-server:/csgo-server</span>   <span class="comment"># 同上</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/fisher/1v1:/mod</span>   <span class="comment"># 注意这里把要启动的插件对应的文件夹挂载上</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">TICKRATE=128</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">GAMETYPE=0</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">GAMEMODE=0</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MAPGROUP=279177557</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MAP=279708083</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AUTHKEY=xxxxxxxxxx</span></span><br></pre></td></tr></table></figure></p><p>使用<code>docker-compose</code>创建和启动容器，此时容器将在后台启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose -f docker-1v1.yaml up -d</span><br></pre></td></tr></table></figure></p><p><img src="images/csgo/docker/start_mods.png" alt="启动有Mod的CSGO服务器"></p><h1 id="连接、启动、停止、切换服务器"><a href="#连接、启动、停止、切换服务器" class="headerlink" title="连接、启动、停止、切换服务器"></a>连接、启动、停止、切换服务器</h1><ol><li>连接服务器<br>我建议小伙伴们将服务器添加到自己的收藏夹中，方便每次连接，并且这种方法不区分国服或国际服。<br>打开Steam，点击左上角的<code>查看</code>，点击<code>服务器</code>，将会弹出一个服务器列表窗口，点击窗口中的<code>收藏夹</code>，点击右下角的<code>添加服务器</code>。</li></ol><p><img src="images/csgo/docker/servers.png" alt="将服务器添加到收藏夹"></p><p>将自己的服务器IP地址填入或者将自己的域名填入，点击<code>在此地址上寻找游戏</code>，如果你的服务器端口不是默认的27015，则需要加上端口号再寻找游戏，点击<code>将选定的游戏服务器添加至收藏夹</code>，就能在收藏夹中收藏自己的服务器了，双击服务器连接，输入服务器密码就能进入服务器了。</p><p><img src="images/csgo/docker/add_server.png" alt="将服务器添加到收藏夹"></p><ol start="2"><li>启动、停止、切换服务器<br>使用Docker启动、停止、切换服务器非常简单。首先使用命令<code>sudo docker ps -a</code>查看目前启动了哪一个服务器，如下图所示，我启动的是带有1v1插件的单挑服务器。切换到储存有<code>docker-compose</code>配置文件的文件夹，我的文件夹路径是<code>/home/fisher/games</code>，然后使用命令<code>sudo docker-compose -f docker-1v1.yaml down</code>停止容器，容器停止后会自动移除，再次使用<code>sudo docker ps -a</code>查看就看不到csgo-1v1的容器存在了。</li></ol><p><img src="images/csgo/docker/stop_server.png" alt="停止服务器"></p><p>然后启动服务器的方法和上面一样，我这里启动的是原版无Mod的服务器，命令为<code>sudo docker-compose -f docker-origin.yaml up -d</code>。服务器列表中会暂时显示服务器无响应，等一阵子服务器启动好之后，就能连接进入了。</p><p><img src="images/csgo/docker/start_server.png" alt="启动服务器"></p><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol><li><p>如何判断<code>docker-csgo:installer</code>正确完成了安装？<br>查看<code>steamcmd</code>和<code>csgo-server</code>文件夹中是否有文件，如果有文件且安装器容器已经停止，可以认为正确完成了安装。查看安装过程中容器的日志可以使用命令<code>sudo docker logs csgo-installer --tail=50</code></p></li><li><p>如何更改服务器的名称、密码、RCON密码等其他配置？<br>可以编辑<code>server.cfg</code>文件，容器只配置了部分启动参数，更多的参数可以通过这个文件配置，以我的配置，文件路径为: <code>/home/fisher/games/csgo-server/csgo/cfg/server.cfg</code></p></li><li><p>使用创意工坊地图后，服务器启动速度很慢？<br>使用创意工坊地图和创意工坊地图合集后，服务器启动时需要下载这些地图，这需要看服务器所在的地区，某些地区需要使用特殊方式才能下载成功</p></li><li><p>服务器空闲一段时间后，重新连接很慢？<br>服务器中没有玩家后，一段时间后会挂起，此时客户端重新连接，服务器需要重新启动一次，耐心等待即可</p></li><li><p>连接服务器后马上回弹到主界面，控制台显示<code>server is running on an older version</code>？<br>服务器运行的还是旧版CSGO，重新启动容器就能自动更新了。命令行重启: <code>sudo docker restart csgo-origin</code>，<code>docker-compose</code>重启: <code>sudo docker-compose -f docker-csgo-origin.yaml restart -d</code></p></li><li><p>可以同时启动多个容器吗？<br>理论上，使用不同的端口是可以同时启动多个容器的，但可能存在一个Steam Account(固定在<code>server.cfg</code>中，并没有使用参数化启动的配置)只能启动一个服务器的限制。由于本仓库的初衷是一份服务器游戏文件+多份Mod的快捷切换和管理，因此本人没有尝试过同时启动多个容器，有兴趣的朋友可以试一下</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很久之前在简书上写过几篇博客，内容就是搭建属于自己的CSGO服务器，点击&lt;a href=&quot;https://www.jianshu.com/u/a23466842ccc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;可以进行考古。但是纯命令行的搭建方式有着以下几种缺点：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;搭建步骤繁琐：全程直接使用命令行搭建服务器，对于不熟悉Linux环境的新手并不友好&lt;/li&gt;
&lt;li&gt;插件切换繁琐：想要服务器能够快速地切换不同的插件（回防、Multi 1v1、跑图、KZ等），每次手动操作Addons文件夹中的插件极其令人烦躁&lt;/li&gt;
&lt;li&gt;硬盘空间珍贵：同样是插件切换繁琐引起的问题，当时用的是阿里云最便宜的云服务器，只有40G的硬盘，只能存一份服务器游戏文件，没有足够的空间存多份服务器游戏文件然后多开&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://www.fisheryung.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="服务器配置" scheme="http://www.fisheryung.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Docker" scheme="http://www.fisheryung.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Git同步开发机与开发服务器的代码</title>
    <link href="http://www.fisheryung.top/%E4%BD%BF%E7%94%A8git%E5%90%8C%E6%AD%A5%E5%BC%80%E5%8F%91%E6%9C%BA%E4%B8%8E%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BB%A3%E7%A0%81.html"/>
    <id>http://www.fisheryung.top/使用git同步开发机与开发服务器的代码.html</id>
    <published>2021-12-25T02:06:08.000Z</published>
    <updated>2021-12-25T02:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发机上开发完成一个小版本的开发之后，需要将代码部署到开发服务器上，但由于代码仍在测试中，可能需要频繁修改代码，每次打包都会显得很麻烦，而每次手动将修改的代码复制到服务器上更是低效的做法，因此想到了用Git的钩子来解决这个痛点，下面是具体的操作。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先是在开发机和服务器上都安装Git，我使用的Git版本如下：</p><a id="more"></a><ul><li>Windows开发机：<code>git version 2.33.0.windows.2</code></li><li>Linux开发服务器：<code>git version 2.17.1</code></li></ul><p>其次是配置本机的SSH密钥，生成密钥的命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa<span class="comment"># 一路回车即可</span></span><br></pre></td></tr></table></figure><p>然后将公钥复制到服务器的<code>~/.ssh/authorized_keys</code>文件上，当SSH连接服务器不需要输入密码时，表示这项配置成功，具体是怎么配置的这里就不说明了，上网查查大把教程。</p><h1 id="服务器的配置"><a href="#服务器的配置" class="headerlink" title="服务器的配置"></a>服务器的配置</h1><p>首先是建立一个Git裸库，用于保存提交信息，仓库建立的位置和名字可以自行修改，但需要记住，等会要用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git init --bare repo.git</span><br></pre></td></tr></table></figure><p>接着建立一个空文件夹，用于存放从开发机同步过来的代码，文件夹创建的位置和名字可自行修改，但需要记住，也是要用的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir code</span><br></pre></td></tr></table></figure><p>然后编写Git的Hooks脚本，这里用的是<code>post-receive</code>脚本，该脚本在仓库发生提交后自动执行，我们使用该脚本将仓库中最新的代码同步到代码文件夹中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/repo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>将以下语句写入钩子文件中，其中的两个路径，第一个是同步代码的文件夹所在位置，第二个是仓库的位置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/home/fisher/code --git-dir=/home/fisher/repo.git checkout -f</span><br></pre></td></tr></table></figure><p>保存退出vim后，赋予该脚本执行权限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /home/fisher/repo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>至此，服务器端的配置完成，接下来是开发机的配置。</p><h1 id="开发机的配置"><a href="#开发机的配置" class="headerlink" title="开发机的配置"></a>开发机的配置</h1><p>如果开发机的项目不是Git项目，则需要进入项目的根目录，执行以下命令初始化为Git项目并提交一下，如果已经是Git项目，则这一步跳过，直接添加远程仓库地址即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commmit -m <span class="string">"Initial commit"</span></span><br></pre></td></tr></table></figure><p>接着添加远程仓库地址，其中<code>USER</code>表示你在服务器上使用的用户，<code>ADDRESS</code>表示服务器的地址，<code>:</code>接服务器上仓库的地址。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin USER@ADDRESS:/home/fisher/repo.git</span><br></pre></td></tr></table></figure><p>使用以下命令查看远程仓库地址的添加是否成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>添加远程仓库地址之后，将代码提交到仓库中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>至此，开发机的配置也完成了，需要同步的时候，就用Git将代码提交到远程仓库即可。</p><h1 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h1><p>提交代码之后，在服务器的<code>~/code/</code>文件夹中应该能看到与开发机项目相同的目录结构，这时候就能够直接在服务器上部署测试的代码了，当本地开发机代码修改之后，使用Git提交到远程仓库，开发服务器上的代码也会同步修改了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在开发机上开发完成一个小版本的开发之后，需要将代码部署到开发服务器上，但由于代码仍在测试中，可能需要频繁修改代码，每次打包都会显得很麻烦，而每次手动将修改的代码复制到服务器上更是低效的做法，因此想到了用Git的钩子来解决这个痛点，下面是具体的操作。&lt;/p&gt;&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;p&gt;首先是在开发机和服务器上都安装Git，我使用的Git版本如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器配置" scheme="http://www.fisheryung.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
      <category term="学习总结" scheme="http://www.fisheryung.top/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>将SVN托管的SSH项目导入到IDEA中——以Scholat为例</title>
    <link href="http://www.fisheryung.top/%E5%B0%86svn%E6%89%98%E7%AE%A1%E7%9A%84ssh%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E5%88%B0idea%E4%B8%AD.html"/>
    <id>http://www.fisheryung.top/将svn托管的ssh项目导入到idea中.html</id>
    <published>2021-12-23T14:42:33.000Z</published>
    <updated>2021-12-23T15:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于要整合Scholat主站和Scholat+站点的资源，汤老师向我们提出了做单点登录的需求，因此需要对主站的登录功能部分做出改动。但主站项目是一个老项目，用的是SSH架构，没有Maven包管理，代码托管在SVN上，老师兄们用的都是MyEclipse开发，对于我这种人来说绝对忍不了，一定要用Intelij IDEA开发。经过一晚上的摸爬滚打和师兄的指点迷津后，现将导入的过程记录为文档，为以后师弟师妹的开发维护铺平道路。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先需要准备以下的工具和对应的版本：</p><ul><li>Intelij IDEA Ultimate Edition 2021.2.1（旗舰版IDE，功能齐全，相比于师兄的旧版IDEA，导入过程中多了一些自动配置项，方便一些，下载地址点<a href="https://www.jetbrains.com/zh-cn/idea/download/#section=windows" target="_blank" rel="noopener">这里</a>）</li><li>Tortoise Subversion（SVN工具，下载地址点<a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="noopener">这里</a>）</li><li>Apache Tomcat 7.0.82（Web容器，与主站使用的版本对应，8以上的不兼容JDK6，建议直接用这个版本，下载地址点<a href="https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.82/bin/" target="_blank" rel="noopener">这里</a>）</li><li>Java JDK6（需要注册一个Oracle账号，下载地址点<a href="https://www.oracle.com/java/technologies/javase-java-archive-javase6-downloads.html" target="_blank" rel="noopener">这里</a>）</li></ul><p>以上工具下载完成后安装，记住自己选择的安装路径。</p><h1 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h1><p>打开IDEA，在欢迎界面右上角点击<code>Get from VCS</code>。</p><p><img src="images/idea/get_from_vcs.png" alt="Get From VCS"></p><p>版本控制工具选<code>Subversion</code>，点击下面<code>+</code>号，输入仓库地址，账号密码找华哥要，<strong>选择记住账号密码</strong>（一定要记住账号密码，否则跑不起来的，项目会检查SVN配置），添加之后就能看到下图中的一个仓库地址了。</p><p><img src="images/idea/svn.png" alt="SVN"></p><p>点击<code>Check out</code>后，选择一个项目的存放地址，就开始拉取源码了。代码拉取完成后IDEA会自动打开项目，并提示发现了一个IDEA的配置文件，是否重复使用，这里我们点否，毕竟是别人的配置文件，这里我们不能照搬使用。</p><p>等项目索引完之后，关闭项目，打开项目存放的文件夹，将文件夹中的<code>.idea和trunk.iml</code>删掉，并将该项目从IDEA中移除（不是删除项目文件夹）。</p><p><img src="images/idea/delete_profile.png" alt="删除配置文件"></p><p><img src="images/idea/delete_project.png" alt="删除项目"></p><p>随便打开另外一个项目，在左上角选择<code>File -&gt; New -&gt; Project from Existing Sources</code>，导入刚刚拉取的代码。</p><p><img src="images/idea/import_project.png" alt="导入项目"></p><p>第一步直接选择<code>Create project from existing sources</code>，然后Next。</p><p><img src="images/idea/step1.png" alt="第一步"></p><p>第二步也不用改，除非想换个项目名称，然后Next。</p><p><img src="images/idea/step2.png" alt="第二步"></p><p>第三步，接着IDEA会扫描项目，并自动标记项目文件夹的类型，聪明的IDEA一般不会标记错的，这里选择<code>Mark All</code>，然后Next。</p><p><img src="images/idea/step3.png" alt="第三步"></p><p>第四步，IDEA会扫描依赖库文件夹，并自动添加为依赖库，如果这里搞不懂项目用到了哪些依赖的话，建议全部勾选，然后Next。</p><p><img src="images/idea/step4.png" alt="第四步"></p><p>第五步，也是跟项目依赖有关，直接按照IDEA给出的意见即可，点击Next。</p><p><img src="images/idea/step5.png" alt="第五步"></p><p>第六步，选择项目使用的JDK，这里我们选择刚刚安装JDK6，然后点Next。</p><p><img src="images/idea/step6.png" alt="第六步"></p><p>第七步，IDEA会扫描项目使用的框架，然后标记框架的配置文件，这里全部勾选即可，然后点Finish。</p><p><img src="images/idea/step7.png" alt="第七步"></p><p>到此，项目的导入部分到此完成，下一节中将介绍如何配置项目。</p><h1 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h1><h2 id="配置Project-Structure"><a href="#配置Project-Structure" class="headerlink" title="配置Project Structure"></a>配置Project Structure</h2><p>点击<code>File -&gt; Project Structure</code>，打开项目配置。</p><p>在Project页面确认使用的JDK版本为6，编译语言等级与JDK版本一致为6。</p><p><img src="images/idea/project.png" alt="Project配置"></p><p>在Modules页面，将conf文件夹标记为源码文件夹。</p><p><img src="images/idea/modules_sources.png" alt="Mudules页面"></p><p>在Libraries页面，将Tomcat中的<code>js-api.jar和servlet-api.jar</code>包添加到依赖库中，这两个包在Tomcat7安装路径的<code>./lib</code>目录下。</p><p><img src="images/idea/libraries.png" alt="Libraries页面"></p><p>在Facts页面，正常情况下，IDEA在导入时就已经自动配置好了，如果没有看到<code>Web</code>这项配置可以手动添加一下，因为还没有创建Artifacts，所以有个警告也是正常的。</p><p><img src="images/idea/facts.png" alt="Facts页面"></p><p>在Artifacts页面，点击<code>+ -&gt; WebApplication:Exploded -&gt; From modules...</code>，选择本项目配置好的Modules，点击OK。</p><p><img src="images/idea/Artifacts.png" alt="Artifacts页面"></p><p>项目有关的配置到此为止，接下来时配置启动项目的容器Tomcat</p><h2 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h2><p>点击IDEA界面右上角的<code>Add Configuration</code>，打开运行配置</p><p>在Server页面中点击<code>+ -&gt; Tomcat Server -&gt; Local</code>，名字自定义一个，点击Application server右边的Configure按钮，选择准备工作中下载的Tomcat7的解压位置。</p><p><img src="images/idea/tomcat1.png" alt="Tomcat配置1"></p><p>继续在Server页面中找到VM options，填入以下参数：<code>-Xms1024m -Xmx4096m -XX:PermSize=4096m -XX:MaxPermSize=4096m</code>。该参数防止Tomcat内存太小导致项目跑不起来。</p><p><img src="images/idea/tomcat2.png" alt="Tomcat配置2"></p><p>在Deployment页面中，点击<code>+ -&gt; Artifact</code>，将项目添加到容器中，同时Application context一定要改为<code>/scholat</code>。</p><p><img src="images/idea/tomcat3.png" alt="Tomcat配置3"></p><p>至此，所有的配置工作均已完成，尝试编译运行一下。</p><h1 id="跑起来"><a href="#跑起来" class="headerlink" title="跑起来"></a>跑起来</h1><p>点击小锤子编译，看看有没有编译出错等问题，如果没有问题，点击运行跑起来看看效果。</p><p><img src="images/idea/button.png" alt="按钮"></p><p>如果电脑配置不是很好的话，需要耐心等待一下，毕竟这项目还挺大的。</p><p><img src="images/idea/build.png" alt="编译"></p><p>编译没有错误的话，就可以启动容器看看能不能跑起来了，跑起来也需要耐心等待一下，要启动的东西还挺多的。</p><p><img src="images/idea/deploy.png" alt="运行"></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>如果Tomcat运行输出的是乱码，则需要修改一下Tomcat的日志输出编码，打开Tomcat目录中的<code>conf/logging.properties</code>文件，将所有<code>UTF-8</code>全部改为<code>GBK</code>即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于要整合Scholat主站和Scholat+站点的资源，汤老师向我们提出了做单点登录的需求，因此需要对主站的登录功能部分做出改动。但主站项目是一个老项目，用的是SSH架构，没有Maven包管理，代码托管在SVN上，老师兄们用的都是MyEclipse开发，对于我这种人来说绝对忍不了，一定要用Intelij IDEA开发。经过一晚上的摸爬滚打和师兄的指点迷津后，现将导入的过程记录为文档，为以后师弟师妹的开发维护铺平道路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.fisheryung.top/tags/java/"/>
    
      <category term="学习总结" scheme="http://www.fisheryung.top/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt的DDNS配置</title>
    <link href="http://www.fisheryung.top/openwrt%E7%9A%84ddns%E9%85%8D%E7%BD%AE.html"/>
    <id>http://www.fisheryung.top/openwrt的ddns配置.html</id>
    <published>2021-08-06T03:27:28.000Z</published>
    <updated>2021-08-06T06:01:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近着手改造家里的网络，买了一个D2550软路由，把家里的光猫由拨号改成了桥接，并使用D2550拨号和管理家里的网络。很久之前就向电信申请了公网IP，一直没用上，此次趁着网络改造，顺带给这个公网IP配置DDNS，利用起来并为后续NAS的搭建提供外网访问的环境。</p><h1 id="域名解析配置"><a href="#域名解析配置" class="headerlink" title="域名解析配置"></a>域名解析配置</h1><p>首先是需要有一个域名，在阿里云购买一个域名非常简单，填写实名制模版，使用模版购买域名即可，现在好像不需要背景布拍照上传手持身份证的照片了，跟以前相比简直太方便了，这里就不详细描述如何购买域名和实名制认证了。</p><a id="more"></a><p>打开阿里云的<code>云解析DNS</code>，点击需要修改解析设置的域名，点击<code>添加记录</code>，每项的配置如下：</p><ul><li>记录类型：<code>A</code>（如果需要解析IPv6地址就选择<code>AAAA</code>）</li><li>主机记录：<code>myhome</code>（修改为自己想要的三级域名，留空则不使用三级域名）</li><li>解析线路：<code>默认</code>（一般默认即可）</li><li>记录值：<code>xx.xxx.xx.xx</code>（填入D2550的wan口IP地址）</li><li>TTL：<code>10分钟</code>（一般默认即可）</li></ul><p>点击添加后，看到页面记录显示解析状态正常，域名解析配置就完成了。</p><p><img src="images/router/D2550_Aliyun_DNS.png" alt="云解析配置"></p><h1 id="访问控制配置"><a href="#访问控制配置" class="headerlink" title="访问控制配置"></a>访问控制配置</h1><p>接下来需要配置的是云解析DNS的访问控制，配置访问控制的目的是让D2550获得更改解析记录的权限。</p><p>打开阿里云的<code>访问控制/RAM访问控制</code>，打开<code>身份管理</code>中的<code>用户</code>，点击<code>创建用户</code>，<code>登录名称</code>和<code>显示名称</code>自定，勾选<code>Open API调用访问</code>。</p><p>创建用户后，阿里云会提供该用户的<code>AccessKey ID</code>和<code>AccessKey Secret</code>，将其记录下来，页面关闭后就不再显示Secret了。点击用户操作选项中的<code>添加权限</code>，在系统策略中找到<code>管理云解析DNS的权限</code>，选择添加并确定。</p><p><img src="images/router/D2550_Aliyun_RAM.png" alt="访问控制配置"></p><p>这一步完成后，云端的配置工作就完成了。</p><h1 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h1><p>打开D2550的管理界面，打开<code>动态DNS</code>服务页面，添加一份配置，配置如下：</p><ul><li>启用：☑️</li><li>查询主机名：<code>myhome.fisheryung.top</code>（填入在域名解析配置中设置的域名）</li><li>IP地址版本：<code>IPv4地址</code>（如果用IPv6则改成v6地址）</li><li>DDNS服务提供商：<code>aliyun.com</code></li><li>域名：<code>myhome.fisheryung.top</code>（同查询主机名）</li><li>用户名：<code>AccessKey ID</code>（访问控制配置中提供的ID）</li><li>密码：<code>AccessKey Secret</code>（访问控制配置中提供的Secret）</li></ul><p>保存并应用，过一段时间查看日志，如果有定时检查并更新IP地址，则表示配置成功。</p><p><img src="images/router/D2550_DDNS.png" alt="DDNS"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>给D2550配置端口转发，在本地启动Hexo博客，用手机流量尝试进行访问，可以看到访问成功，自此DDNS配置完成。</p><p><img src="images/router/D2550_DDNS_test.png" alt="测试" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近着手改造家里的网络，买了一个D2550软路由，把家里的光猫由拨号改成了桥接，并使用D2550拨号和管理家里的网络。很久之前就向电信申请了公网IP，一直没用上，此次趁着网络改造，顺带给这个公网IP配置DDNS，利用起来并为后续NAS的搭建提供外网访问的环境。&lt;/p&gt;&lt;h1 id=&quot;域名解析配置&quot;&gt;&lt;a href=&quot;#域名解析配置&quot; class=&quot;headerlink&quot; title=&quot;域名解析配置&quot;&gt;&lt;/a&gt;域名解析配置&lt;/h1&gt;&lt;p&gt;首先是需要有一个域名，在阿里云购买一个域名非常简单，填写实名制模版，使用模版购买域名即可，现在好像不需要背景布拍照上传手持身份证的照片了，跟以前相比简直太方便了，这里就不详细描述如何购买域名和实名制认证了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://www.fisheryung.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://www.fisheryung.top/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>小米路由器4千兆版刷OpenWrt</title>
    <link href="http://www.fisheryung.top/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A84%E5%8D%83%E5%85%86%E7%89%88%E5%88%B7openwrt.html"/>
    <id>http://www.fisheryung.top/小米路由器4千兆版刷openwrt.html</id>
    <published>2021-07-08T08:53:37.000Z</published>
    <updated>2021-07-14T13:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在家用了一段时间的小米路由器4千兆版，使用一段时间之后就会发生网络不稳定，甚至无法连接网络等情况，怀疑是官方固件的问题。同时也有一些插件上的需求，于是就开始动手把OpenWrt固件刷入到小米路由器4千兆版中。</p><h1 id="刷机环境"><a href="#刷机环境" class="headerlink" title="刷机环境"></a>刷机环境</h1><ul><li>刷机使用的系统：macOS 11.4</li><li>编译OpenWrt使用的系统：Ubuntu 21.04</li><li>小米路由器4千兆版固件版本：MiWiFi 稳定版 2.28.58</li></ul><a id="more"></a><h1 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h1><p>开启路由器的SSH需要用到<a href="https://github.com/acecilia/OpenWRTInvasion" target="_blank" rel="noopener">OpenWRTInvasion</a>，首先克隆仓库，安装依赖。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/acecilia/OpenWRTInvasion.git</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="built_in">cd</span> OpenWRTInvasion/</span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><p>接下来打开路由器管理界面，获取<code>stok</code>，<code>stok</code>在路由器的地址栏处，如下图所示，<code>stok=xxxx</code>一直到<code>/</code>前，那么<code>stok</code>就是<code>ff43b68c8e20a6bcd3d33377c0c889dd</code>。</p><p><img src="images/router/Mi4G_stok.png" alt="Stok"></p><p>运行<code>OpenWRTInvasion</code>中的<code>remote_command_execution_vulnerability.py</code>，输入路由器<code>IP地址</code>和<code>stok</code>，脚本会执行命令并开启SSH、Telnet和FTP。如果出现如下图提示，表示开启成功。</p><p><img src="images/router/Mi4G_ssh.png" alt="开启SSH成功"></p><p><strong>如果等了很久都没有反应，则有可能是下载<code>busybox</code>和<code>dropbear</code>时遇到了网络问题，此时需要手动修改一下<code>busybox</code>和<code>dropbear</code>的下载地址</strong>。</p><p>打开<code>OpenWRTInvasion</code>文件夹中的<code>script.sh</code>文件，找到<code>setup_busybox()</code>函数和<code>start_ssh()</code>函数中的<code>curl</code>命令，将其中的下载地址进行修改，这里我使用自己的服务器提供下载。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup_busybox函数</span></span><br><span class="line"><span class="comment"># Rationale for using --insecure: https://github.com/acecilia/OpenWRTInvasion/issues/31#issuecomment-690755250</span></span><br><span class="line">curl -L <span class="string">"https://fisher.lazybone.xyz/downloads/busybox-mipsel"</span> --insecure --output busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># start_ssh函数</span></span><br><span class="line"><span class="comment"># Donwload dropbear static mipsel binary</span></span><br><span class="line">curl -L <span class="string">"https://fisher.lazybone.xyz/downloads/dropbearStaticMipsel.tar.bz2"</span> --output dropbear.tar.bz2</span><br></pre></td></tr></table></figure><p>再次运行<code>OpenWRTInvasion</code>，网络状态良好的情况下能够正常开启ssh了。复制执行脚本给出的ssh命令，输入密码<code>root</code>，就能够ssh登录到路由器中了。</p><p><img src="images/router/Mi4G_login.png" alt="SSH登录"></p><h1 id="刷入Breed"><a href="#刷入Breed" class="headerlink" title="刷入Breed"></a>刷入Breed</h1><p>ssh登录路由器后，使用Curl下载Breed，将其重命名为breed.bin并进行md5校验，md5一致后才能刷Breed。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/</span><br><span class="line">curl -o breed.bin https://breed.hackpascal.net/breed-mt7621-pbr-m1.bin</span><br><span class="line">md5sum breed.bin</span><br></pre></td></tr></table></figure><p>使用mtd将Breed刷入Bootloader分区中，此时路由器会自动重启。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd -r write /tmp/breed.bin Bootloader</span><br></pre></td></tr></table></figure><p><img src="images/router/Mi4G_breed.png" alt="刷入Breed"></p><p>使用网线连接路由器，待网卡正确获取到IP为<code>192.168.1.x</code>的地址后，路由器电源指示灯为淡紫色，表示正常进入Breed中了。</p><p><img src="images/router/Mi4G_breedindex.png" alt="进入Breed"></p><h1 id="编译OpenWrt"><a href="#编译OpenWrt" class="headerlink" title="编译OpenWrt"></a>编译OpenWrt</h1><p>如果从网上下载别人编译好的固件，这一步就可以省略了，下面说说我在编译固件时踩过的坑。</p><ul><li>首先是直接使用coolsnowwolf的<a href="https://github.com/coolsnowwolf/lede" target="_blank" rel="noopener">LEDE</a>编译出来的固件，用Breed刷入后是无法正常引导的，这里需要修改一下内存分区的源码，具体操作流程可参考恩山大佬的<a href="https://www.right.com.cn/forum/thread-4052254-1-1.html" target="_blank" rel="noopener">帖子</a>。</li><li>接着是编译后的固件没有2.4g无线网卡的驱动，这个需要在编译配置中勾选<code>kmod-mt7603</code>，以支持小米路由器4千兆版的2.4g无线网卡。</li></ul><h1 id="刷入OpenWrt"><a href="#刷入OpenWrt" class="headerlink" title="刷入OpenWrt"></a>刷入OpenWrt</h1><p>打开Breed的固件更新页面，选择要刷入的Openwrt固件，直接刷入即可。</p><p><img src="images/router/Mi4G_overview.png" alt="OpenWrt"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在家用了一段时间的小米路由器4千兆版，使用一段时间之后就会发生网络不稳定，甚至无法连接网络等情况，怀疑是官方固件的问题。同时也有一些插件上的需求，于是就开始动手把OpenWrt固件刷入到小米路由器4千兆版中。&lt;/p&gt;&lt;h1 id=&quot;刷机环境&quot;&gt;&lt;a href=&quot;#刷机环境&quot; class=&quot;headerlink&quot; title=&quot;刷机环境&quot;&gt;&lt;/a&gt;刷机环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;刷机使用的系统：macOS 11.4&lt;/li&gt;
&lt;li&gt;编译OpenWrt使用的系统：Ubuntu 21.04&lt;/li&gt;
&lt;li&gt;小米路由器4千兆版固件版本：MiWiFi 稳定版 2.28.58&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://www.fisheryung.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://www.fisheryung.top/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SCNU校园网IPv6配置</title>
    <link href="http://www.fisheryung.top/scnu%E6%A0%A1%E5%9B%AD%E7%BD%91ipv6%E9%85%8D%E7%BD%AE.html"/>
    <id>http://www.fisheryung.top/scnu校园网ipv6配置.html</id>
    <published>2021-06-24T03:03:47.000Z</published>
    <updated>2021-06-24T04:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因教育网IPv6不限速，使用清华TUNA的开源镜像站下载资源能够跑满带宽，体验非常好，所以就有了给路由器配置IPv6的想法。之前使用极路由官方固件时有官方的教育网插件可以用（使用6relay），但换了Openwrt后使用的是odhcpd，需要自己重新配置一下。这篇博客纪录了我的配置过程，其中参考了恩山论坛的<a href="https://www.right.com.cn/forum/thread-316405-1-1.html" target="_blank" rel="noopener">这篇</a>帖子。</p><a id="more"></a><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><ol><li>本次配置使用的硬件设备：极路由3（HC5861、MT7620）</li><li>本次配置使用的固件：Lean’s Openwrt R21.6.22</li><li>本次配置使用的Mentohust：<a href="https://github.com/KyleRicardo/MentoHUST-OpenWrt-ipk" target="_blank" rel="noopener">Mentohust-ipk</a>、<a href="https://github.com/BoringCat/luci-app-mentohust" target="_blank" rel="noopener">Luci-App-Mentohust</a></li></ol><p>Lean’s Openwrt中内核模块默认勾选了NAT6功能，因此编译时只需要勾选编译Mentohust相关的软件包即可，编译的过程在此就不赘述了。</p><h1 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h1><p>刷入固件后，先不要连接路由器的WAN口，待电脑DHCP获取到由路由器分发的IP地址后，再将网线连接到WAN口。（如果一直连接WAN口，电脑会首先获取到校园网DHCP的IP地址，此时需要断开并重启电脑与路由器的连接）</p><h2 id="WAN6接口配置"><a href="#WAN6接口配置" class="headerlink" title="WAN6接口配置"></a>WAN6接口配置</h2><p>在基本设置中，各项配置如下：</p><ul><li>协议：DHCPv6客户端</li><li>请求IPv6地址：try</li><li>请求指定长度的IPv6前缀：自动</li></ul><p>在高级设置中，各项配置如下：</p><ul><li>使用内置的IPv6管理：不勾选</li><li>使用对端通告的 DNS 服务器：不勾选（SCNU校园网不分发IPv6的DNS服务器地址，IPv6的地址解析全都是用v4的DNS服务器，因此需要自行指定）</li><li>使用自定义的DNS服务器：<code>2001:da8::666</code></li></ul><p>保存并应用，可以看到WAN口同时获得了IPv4和IPv6的地址，接下来可以进行Mentohust的配置了。</p><p><img src="images/router/ipv6_wan6.png" alt="WAN口状态"></p><h2 id="Mentohust配置"><a href="#Mentohust配置" class="headerlink" title="Mentohust配置"></a>Mentohust配置</h2><p>打开<code>服务-MentoHUST</code>，在常规设置中进行如下配置：</p><ul><li>用户名和密码：填入自己的校园网用户名和密码</li><li>接口：选择WAN口网卡，我的路由器是WAN口是<code>eth0.2</code></li><li>Ping主机：如果需要掉线检测功能，就填入一个公网IP地址，我使用了自己的云服务器IP地址</li></ul><p>在高级设置中进行如下配置，其他无需修改：</p><ul><li>验证失败等待时间：5</li><li>DHCP设置：认证前</li><li>DHCP的脚本：<code>udhcpc -i eth0.2</code></li></ul><p>最后在常规设置中勾选启用，保存并应用，查看日志，试试能否登录成功。</p><p><img src="images/router/ipv6_mentohust.png" alt="Mentohust日志"></p><p>确认能够连上互联网后，ssh连接路由器，尝试ping一下IPv6的地址，验证路由器是否正确获取IPv6地址并连接成功，以下是ping6的命令和执行结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping6 -c 4 bt.byr.cn</span><br></pre></td></tr></table></figure><p><img src="images/router/ipv6_ping6.png" alt="Ping结果"></p><h2 id="LAN口配置"><a href="#LAN口配置" class="headerlink" title="LAN口配置"></a>LAN口配置</h2><p>在<code>接口</code>页面，找到<code>全局网络选项</code>，修改<code>IPv6 ULA前缀</code>：</p><ul><li>将地址的首位改为<code>d</code>（你喜欢改什么都行），我从<code>fd73:1f1d:a603::/48</code>改为了<code>dd73:1f1d:a603::/48</code></li></ul><p>编辑LAN口配置，找到<code>DHCP服务器</code>，修改<code>IPv6</code>设置：</p><ul><li>路由通告服务：服务器模式</li><li>DHCPv6服务：服务器模式</li><li>NDP代理：已禁用</li><li>DHCPv6模式：无状态的+有状态的</li><li>总是通告默认路由：取消勾选</li></ul><p>保存并等待一段时间，此时电脑应该获取到了路由器自行分发的IPv6地址，LAN口也有自己的IPv6地址。</p><p><img src="images/router/ipv6_interface.png" alt="接口配置"></p><h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><p>打开防火墙的<code>自定义规则</code>，添加如下一行规则并点击重启防火墙，开启IPv6数据包的转发。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip6tables -t nat -A POSTROUTING -o eth0.2 -j MASQUERADE</span><br></pre></td></tr></table></figure><h2 id="网关配置"><a href="#网关配置" class="headerlink" title="网关配置"></a>网关配置</h2><p>首先ssh登录路由器，查看当前IPv6的默认路由</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip -6 route | grep default</span><br></pre></td></tr></table></figure><p>可以看到有2条路由配置</p><p><img src="images/router/ipv6_route.png" alt="默认路由"></p><p>复制这个<code>fe80</code>开头的IPv6地址，将当前的默认网关添加到默认路由中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route -A inet6 add default gw fe80::274:9cff:fe80:dc7d dev eth0.2</span><br></pre></td></tr></table></figure><p>再次查看当前的默认路由，可以看到有3条记录</p><p><img src="images/router/ipv6_route1.png" alt="默认路由"></p><p>重启网络服务，验证局域网设备能否连上IPv6网络（重启后记得手动重启Mentohust服务）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure><p>由于默认路由重启后会重置，因此需要添加一个脚本，让路由器开机自动添加默认路由</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hotplug.d/iface/90-ipv6</span><br></pre></td></tr></table></figure><p>添加如下内容，其中的默认路由地址修改为自己的默认路由</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">[ <span class="string">"<span class="variable">$ACTION</span>"</span> = ifup ] || <span class="built_in">exit</span> 0</span><br><span class="line">route -A inet6 add default gw fe80::274:9cff:fe80:dc7d dev eth0.2</span><br></pre></td></tr></table></figure><p>保存退出后，赋予执行权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/hotplug.d/iface/90-ipv6</span><br></pre></td></tr></table></figure><h1 id="IPv6测试"><a href="#IPv6测试" class="headerlink" title="IPv6测试"></a>IPv6测试</h1><p>打开<a href="http://ipv6-test.com/" target="_blank" rel="noopener">http://ipv6-test.com/</a></p><p><img src="images/router/ipv6_test2.png" alt="测试结果"></p><p>打开<a href="http://test-ipv6.com/" target="_blank" rel="noopener">http://test-ipv6.com/</a></p><p><img src="images/router/ipv6_test1.png" alt="测试结果"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于SCNUNET，一开始我使用的IPv6方案为全中继的模式，路由器局域网设备IPv6地址全由上级路由器分发，局域网设备的确是获得了公网IPv6的地址，但是这个地址是上不了网的，而路由器的IPv6地址却使用正常，个人猜测是因为这些IPv6地址没有登录校园网，因此也无法使用。</p><p>既然在中继IPv6的方案下不可行，那就只能使用NAT6的方法了。在参考了许多篇配置的文章后，终于是配置成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因教育网IPv6不限速，使用清华TUNA的开源镜像站下载资源能够跑满带宽，体验非常好，所以就有了给路由器配置IPv6的想法。之前使用极路由官方固件时有官方的教育网插件可以用（使用6relay），但换了Openwrt后使用的是odhcpd，需要自己重新配置一下。这篇博客纪录了我的配置过程，其中参考了恩山论坛的&lt;a href=&quot;https://www.right.com.cn/forum/thread-316405-1-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇&lt;/a&gt;帖子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://www.fisheryung.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="路由器" scheme="http://www.fisheryung.top/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>从High Sierra升级到Big Sur</title>
    <link href="http://www.fisheryung.top/%E4%BB%8Ehigh-sierra%E5%8D%87%E7%BA%A7%E5%88%B0big-sur.html"/>
    <id>http://www.fisheryung.top/从high-sierra升级到big-sur.html</id>
    <published>2021-05-30T03:52:26.000Z</published>
    <updated>2021-05-30T09:26:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看着Dock栏的图标一个个变成了正方形，软件慢慢开始不支持High Sierra系统，我也按耐不住想要升级系统了。但插在主板上的GTX1060告诉我，升级了系统之后就再也用不了它了，并且升级后的系统也不知道能不能正常使用。为了解决显卡这个问题，我去网上查了许多资料，研究了几种不同的解法，最终在不变动当前配置的情况下成功升级到Big Sur，Windows系统也毫无影响，付出的代价有2个：一是Big Sur下GTX1060无法使用；二是需要频繁插拔HDMI线，想要切换到Windows系统并使用GTX1060，需要把HDMI线从板载HDMI口拔下并插到显卡HDMI口上。</p><a id="more"></a><h1 id="升级思路"><a href="#升级思路" class="headerlink" title="升级思路"></a>升级思路</h1><p>升级系统的思路主要有以下几种：</p><ul><li>只用集显的方法，这是最简单的一种方法了，把GTX1060拔了，舍弃独显，重新配置机型，全新安装Big Sur。这种方法最简单，但是Windows下只能用UHD630，游戏没法好好玩了。</li><li>显卡置换的方法，把GTX1060卖了之后换免驱的A卡，前一个星期我都在观察RX560和R9 Nano，想要入手一张。奈何是ITX机箱，A卡的ITX卡存量较少，价格较高，没舍得采用这种方案。</li><li>系统分开使用显卡的方法，在Big Sur中只用UHD630集显，在Windows中使用GTX1060。这种方法的好处是机器不需要对配置进行任何改动，但想要启动Windows打游戏的时候，需要把HDMI线插到独显上，想要启动Big Sur干活的时候，需要把HDMI线插到板载HDMI口上。</li></ul><p>最终，我使用了第三种方法，虽然频繁插拔HDMI线麻烦了一点，但是不需要花钱，也不需要动硬件，也算是一种比较省心的方法了。</p><h1 id="Bios设置"><a href="#Bios设置" class="headerlink" title="Bios设置"></a>Bios设置</h1><p>本次升级中，Bios设置主要集中在北桥中，设置如下：</p><ul><li>首选显卡：CPU Graphics</li><li>iGPU：Disable（启用后，主板会将板载和独显的HDMI口当成两个屏幕的输出，这样子就无法做输出区分了）</li><li>DVMT Pre-Allocated：128M（网上资料说：分配显存过小可能会出现花屏和黑屏，具体我没验证过）</li><li>RC6：Auto</li></ul><p><img src="images/hackintosh/bigsur_bios.png" alt="Bios设置"></p><h1 id="系统下载"><a href="#系统下载" class="headerlink" title="系统下载"></a>系统下载</h1><p>由于百度云没会员实在是太慢了，我使用了<a href="https://github.com/munki/macadmin-scripts" target="_blank" rel="noopener">macadmin-scripts</a>脚本下载系统，该脚本的使用方法很简单，下载的镜像也是官方的纯净镜像。</p><ul><li>拉取仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Desktop/</span><br><span class="line">git clone https://github.com/munki/macadmin-scripts.git</span><br><span class="line">cd macadmin-scripts/</span><br></pre></td></tr></table></figure><ul><li>以管理员身份运行脚本，如果提示缺少依赖，使用pip3安装对应依赖即可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 ./installinstallmacos.py</span><br></pre></td></tr></table></figure><ul><li>在更新资源目录之后，脚本会询问想要下载哪个版本的镜像，这里我直接选择最新版的Big Sur，序号是18</li></ul><p><img src="images/hackintosh/downloadimage.png" alt="选择需要下载的镜像"></p><ul><li>接着脚本就会自动下载镜像，下载完成之后在文件夹中会自动生成一个dmg文件，该文件就是系统镜像了</li></ul><p>提示：如果下载过程中由于网络波动等原因导致下载失败，没有关系，重新运行脚本并选择相同的镜像序号，脚本会自动从下载失败的地方继续下载。</p><h1 id="OpenCore配置"><a href="#OpenCore配置" class="headerlink" title="OpenCore配置"></a>OpenCore配置</h1><p>这一步中，我们需要准备一个U盘，往里面放一份当前系统的EFI配置，然后进行修改。接下来的升级安装过程中全程使用这一份配置来引导系统。</p><p>由于之前的OpenCore配置文件中启用了独立显卡并指定为N卡，我们需要修改一下，将独显禁用并添加核显配置参数。如有需要，还要更换机型配置。（我从iMac18,2更换到Macmini8,1）</p><ul><li>首先是添加对集显的支持，我的集显是UHD630，添加的参数配置如下，其他型号的集显可以在各种黑苹果论坛查对应的键值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>PciRoot(0x0)/Pci(0x2,0x0)<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>AAPL,ig-platform-id<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>BwCbPg==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>AAPL,slot-name<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Internal@0,2,0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>device-id<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>mz4AAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>device_type<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>VGA compatible controller<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>dpcd-max-link-rate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>FAAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>enable-dpcd-max-link-rate-fix<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>enable-hdmi20<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>enable-lspcon-support<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con0-busid<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AgAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con0-enable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con0-has-lspcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con0-index<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AgAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con0-pipe<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>CgAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con0-type<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AAgAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con1-enable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con1-has-lspcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con1-index<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AwAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con1-pipe<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>CAAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con1-type<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AAgAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con2-busid<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con2-enable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con2-index<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-con2-pipe<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>CQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-patch-enable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AQAAAA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>framebuffer-unifiedmem<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span>&gt;</span>AAAAgA==<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>hda-gfx<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>onboard-1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>model<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Intel UHD Graphics 630<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加后的OC配置如下图所示</p><p><img src="images/hackintosh/ocdeviceproperties_update_bigsur.png" alt="集显配置"></p><ul><li>接下来是禁用Intel网卡和蓝牙的驱动，因为不同系统版本有对应编译的驱动，升级完系统后还需要对这两个驱动升级，最后才能启用这两个驱动</li><li>同时，对于我的主板（Asus B360i），我还需要勾选<code>DisableRtcChecksum</code>，否则升级系统后每次开机主板都会进入安全模式</li></ul><p><img src="images/hackintosh/ockernel_update_bigsur.png" alt="禁用驱动"></p><ul><li>随后是启动参数的修改，清空之前的所有参数，填入以下参数：<ul><li><code>-v</code>：启动Debug模式，出问题时方便排查</li><li><code>debug=0x100</code>：显示更多的Debug信息</li><li><code>keepsyms=1</code>：出现问题后不自动重启，而是卡住并保持输出Debug信息</li><li><code>alcid=7</code>：声卡驱动ID注入</li><li><code>igfxfw=2</code>：使用核显启动</li><li><code>igfxonln=1</code>：修复视频线热插拔问题</li><li><code>-wegnoegpu</code>：禁用独立显卡</li></ul></li></ul><p><img src="images/hackintosh/ocnvram_update_bigsur.png" alt="启动参数的修改"></p><ul><li>最后是机型的修改（可选），由于我之前的机型参数<code>iMac18,2</code>使用的是7代酷睿，因此在Hackintool中CPU架构显示为<code>???</code>。本次升级顺带将机型参数也更换掉，更换为配置更接近的<code>Macmini8,1</code></li><li>具体操作在OCC的PlatformInfo中选择对应机型，检查序列号，确定该序列号无效后即可</li></ul><h1 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h1><p>本次升级中，我曾尝试制作U盘启动盘，然后从<code>安装Big Sur</code>中启动并升级系统，但是升级到一大半就会提示该镜像已损坏，请重新下载的提醒。没办法，我只好放弃从U盘启动盘中升级系统。</p><p>随后我在硬盘EFI中删除<code>nvda_drv=1</code>，添加<code>-wegnoegpu</code>参数禁用独立显卡，将HDMI线接到板载HDMI接口，启动系统，此时系统是没有显卡驱动的。直接双击打开镜像然后点击升级，当系统自动重启时，转成使用U盘EFI进行引导，并在随后的启动中都使用U盘EFI进行引导。没想到这种方法居然升级成功了，因为不确定是否会成功，所以没有拍什么图片，只有下面这一张。</p><p><img src="images/hackintosh/bigsur_update.png" alt="升级成功"></p><p>值得注意的是，刚刚升级成功后电脑非常的卡，以至于在系统初始化设置界面，每点一次下一步都要等很久，这是正常现象，慢慢等就好了。</p><h1 id="完成升级"><a href="#完成升级" class="headerlink" title="完成升级"></a>完成升级</h1><p>进入系统之后，首先提醒的是N卡的WebDriver不再使用于本系统，直接卸载就可以了。</p><p>接下来更新驱动，把OC中能更新的驱动全部更新，注意Intel的Wi-Fi和蓝牙驱动要下载Big Sur版本的，在配置文件中重新勾选启用这两个驱动，保存重启测试，确认能够正常启动之后，我们就可以将新版的EFI从U盘覆盖到硬盘中了。</p><p>注意：这次升级之后我还遇到了一个问题是USB驱动问题，刚开机的时候鼠标和键盘非常卡，并且蓝牙驱动不会加载，这很明显就是USB定制驱动的问题，需要重新定制一次。重新定制之后，蓝牙驱动能够正常加载了，但是开机速度慢了很多，通过Debug的日志可以看到，蓝牙驱动一直在循环等待<code>IO USB Controller</code>这个控制器启动，而这个控制器的启动速度慢的离谱，具体解决方案目前还没有。如果你知道这个问题的解决方法，请在<a href="https://github.com/FisherWY/Asus-B360i-Hackintosh-EFI" target="_blank" rel="noopener">我的仓库</a>中提issue，非常感谢。</p><p>至此，一次系统的升级终于完成，可以开始好好体验Big Sur的新功能了。</p><p><img src="images/hackintosh/bigsur_version.png" alt="升级完成"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看着Dock栏的图标一个个变成了正方形，软件慢慢开始不支持High Sierra系统，我也按耐不住想要升级系统了。但插在主板上的GTX1060告诉我，升级了系统之后就再也用不了它了，并且升级后的系统也不知道能不能正常使用。为了解决显卡这个问题，我去网上查了许多资料，研究了几种不同的解法，最终在不变动当前配置的情况下成功升级到Big Sur，Windows系统也毫无影响，付出的代价有2个：一是Big Sur下GTX1060无法使用；二是需要频繁插拔HDMI线，想要切换到Windows系统并使用GTX1060，需要把HDMI线从板载HDMI口拔下并插到显卡HDMI口上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hackintosh" scheme="http://www.fisheryung.top/tags/hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>从Clover迁移到OpenCore</title>
    <link href="http://www.fisheryung.top/%E4%BB%8Eclover%E8%BF%81%E7%A7%BB%E5%88%B0opencore.html"/>
    <id>http://www.fisheryung.top/从clover迁移到opencore.html</id>
    <published>2021-04-11T01:48:59.000Z</published>
    <updated>2021-04-11T04:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前，OpenCore Bootloader已经开发了相当一段时间，已经趋近于稳定。OpenCore的启动方式更接近于原生macOS电脑，对系统的注入更少，越来越多的驱动都基于OpenCore适配开发。因此，将Bootloader从Clover迁移到OpenCore也是时候提上日程了。以下博客记录了我的迁移过程，并向大家分享一下我的迁移方法。不同于网上的纯ProperTree手动配置、纯OpenCore Configurator图形配置或OC Gen-X直接生成，我同时用到了以上三种工具，节省了迁移成本的同时，也避免遇到了很多错误。</p><a id="more"></a><h1 id="硬件信息"><a href="#硬件信息" class="headerlink" title="硬件信息"></a>硬件信息</h1><p>首先介绍的是我的硬件信息，如下表所示。</p><table><thead><tr><th style="text-align:center">硬件类型</th><th style="text-align:center">型号</th></tr></thead><tbody><tr><td style="text-align:center">主板</td><td style="text-align:center">Asus Rog Strix B360-i Mini ITX</td></tr><tr><td style="text-align:center">处理器</td><td style="text-align:center">Intel Core i5-8500</td></tr><tr><td style="text-align:center">内存</td><td style="text-align:center">Crucial By Micron DDR4 2666MHz 8GB + Corsair LPX DDR4 3000MHz 8GB(运行在2666MHz)</td></tr><tr><td style="text-align:center">显卡</td><td style="text-align:center">Nvidia GeForce GTX 1060 3GB</td></tr><tr><td style="text-align:center">硬盘</td><td style="text-align:center">Asgard AN2 NVMe 250GB</td></tr><tr><td style="text-align:center">网卡</td><td style="text-align:center">板载Intel AC 9560</td></tr></tbody></table><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><p>整个配置的过程需要用到以下的工具包，均可以从GitHub下载，注意工具对应的OC版本需要一致，否则极大概率会出错。</p><ul><li>OpenCore（版本0.6.8正式版），地址在<a href="https://github.com/acidanthera/OpenCorePkg" target="_blank" rel="noopener">这里</a></li><li>OC Gen-X（版本3.0.2），地址在<a href="https://github.com/Pavo-IM/OC-Gen-X" target="_blank" rel="noopener">这里</a></li><li>OpenCore Configurator（版本2.33.1.2），GitHub地址在<a href="https://github.com/notiflux/OpenCore-Configurator" target="_blank" rel="noopener">这里</a>，软件下载地址在<a href="https://www.macwk.com/soft/opencore-configurator" target="_blank" rel="noopener">这里</a></li></ul><p>将OpenCore解压，安装OC Gen-X，安装OpenCore Configurator。至此，工具的准备工作完成。</p><h1 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h1><p>首先我们需要准备一份适合本机配置的配置文件，如果使用OCC或ProperTree纯手动配置的话，需要手动填入很多参数，费时又容易出错。因此我们使用OC Gen-X直接生成一份简单的配置文件，然后再基于这份配置文件进行修改。</p><p>打开OC Gen-X，首先确认系统架构。因为我使用的是第八代酷睿，因此在System Type选择<code>Intel Consumer</code>的<code>Coffee Lake</code>。</p><p><img src="images/hackintosh/genxsystemtype.png" alt="系统架构"></p><p>接下来在Kext中进行如下列表的勾选，图比较多我就只放<code>Essential</code>中的一张了</p><ul><li>Essential，勾选：Lilu和VirtualSMC</li><li>VirtualSMC Plugins，勾选：SMCProcessor、SMCSuperIO和SMCLightSensor</li><li>Graphics，勾选：WhateverGreen（Boot Args留空），AGPMInjector（显卡节能用，选择你目前的仿冒型号和GPU，我的选择是<code>iMac18,2</code>和<code>GTX1060</code>）</li><li>Audio，勾选：AppleALC（Boot Args留空）</li><li>Ethernet，勾选：IntelMausi</li><li>USB，勾选：USBInjectALL</li><li>WI-FI and Bluetooth，无需勾选，稍后手动添加驱动</li><li>Extra’s，无需勾选，里面的驱动是给AMD CPU使用的</li></ul><p><img src="images/hackintosh/genxkext.png" alt="驱动选择"></p><p>接下来在Firmware Drivers中，在<code>UEFI</code>中勾选<code>OpenRuntime.efi</code>和<code>HfsPlus.efi</code>。</p><p><img src="images/hackintosh/genxfirmwaredrivers.png" alt="固件选择"></p><p>最后在SMBIOS中，OC Gen-X会自动填入当前系统的SMBIOS信息，不需要去修改了。在Additional BootArgs中也不需要填入任何参数，稍后用OCC手动填入即可。</p><p>点击下方<code>Generate EFI</code>，就会在你的桌面生成一个EFI文件夹，此时可以关闭OC Gen-X了，接下来的操作就是修改这个EFI的配置。</p><p><img src="images/hackintosh/genxsuccess.png" alt="生成配置"></p><h1 id="添加固件、驱动、主题"><a href="#添加固件、驱动、主题" class="headerlink" title="添加固件、驱动、主题"></a>添加固件、驱动、主题</h1><p>OC Gen-X生成的EFI文件并不是立即就能使用的，还需要根据自己的需要进行修改，以下是我的修改过程。</p><p>首先打开<code>EFI/OC/Drivers</code>，可以看到里面只有刚刚勾选添加的2个固件，缺少了其他固件，OC是启动不起来的，因此需要添加OpenCore官方包中的固件。打开<code>OpenCore</code>官方EFI（准备阶段中下载解压的）中的<code>OpenCore-0.6.8-RELEASE/X64/EFI/OC/Drivers</code>，可以看到里面有很多OC的启动固件，把这些固件全部复制到Gen-X生成的EFI中。</p><p><img src="images/hackintosh/genxdriverscopy.png" alt="复制固件"></p><p>接下来打开<code>EFI/OC/Kexts</code>，可以看到文件夹中已经添加了我们刚刚在Gen-X中勾选的驱动。但每个人的配置都不同，还需要根据自己的配置添加对应的驱动。对于我的配置来说，我还需要添加的驱动和作用在以下列表中。</p><ul><li>AirportItlwm.kext，Intel AC 9560网卡驱动，这个Airport版本支持原生Airdrop</li><li>CPUFriend.kext，CPU变频补丁驱动，添加后有低频档位</li><li>HibernationFixup.kext，睡眠修复补丁，目前发现添加与否并不影响睡眠，先加了再说</li><li>IntelBluetoothFirmware.kext，Intel AC 9560蓝牙驱动</li><li>IntelBluetoothInjector.kext，修复系统蓝牙开关为灰色的补丁</li><li>NVMeFix.kext，NVME固态硬盘兼容性提升驱动</li></ul><p>添加完驱动后的Kexts文件夹如下图所示。</p><p><img src="images/hackintosh/genxkextscopy.png" alt="添加驱动"></p><p>（可选）最后可以根据需要添加Bootloader的主题，如果没有主题，OpenCore的启动界面是纯文字的，也不是不能用。但是为了好看，我还是弄了一套官方的主题。</p><p>从GitHub拉取<code>OcBinaryData</code>仓库，地址在<a href="https://github.com/acidanthera/OcBinaryData" target="_blank" rel="noopener">这里</a>。因为我不需要开机声音，所以我把拉取后把仓库中的<code>Resources/Audio</code>下的音频文件全部删除了。</p><p>最后，把整个Resources文件夹替换掉<code>EFI/OC/</code>中的Resources文件夹即可。</p><p>至此，EFI中的固件、驱动、主题文件准备完毕，接下来就是对配置文件进行修改。</p><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>在修改配置文件之前，我们需要准备一个有EFI分区的U盘，最好是以前配置Clover时留下来的一个备份。挂载这个U盘的EFI分区，将里面的EFI文件替换，然后就可以开始配置文件的修改了。</p><p>使用OpenCore Configurator打开U盘<code>EFI/OC</code>中的<code>config.plist</code>，开始配置文件的修改。</p><p>首先是<code>ACPI-ACPI设置</code>，这里需要根据机型的不同添加对应的SSDT文件，在右侧列表框的下方点击<code>下载/更新Acpi文件</code>，对于我的配置，我需要下载以下SSDT文件：</p><ul><li>SSDT-AWAC</li><li>SSDT-EC-USBX-DESKTOP</li><li>SSDT-PLUG-DRTNIA</li><li>SSDT-PMC</li></ul><p><img src="images/hackintosh/occacpidownload.png" alt="下载SSDT"></p><p>点击下载后，就可以关闭ACPI补丁下载器了，然后点击<code>快照添加</code>，刚刚下载的SSDT配置文件就会自动添加并启用，配置完成后的ACPI设置界面如下。</p><p><img src="images/hackintosh/occacpi.png" alt="ACPI设置"></p><p>接下来的<code>Booter-启动设置</code>，不需要修改里面的任何选项，直接跳过。</p><p>接下来的<code>DeviceProperties-设备属性设置</code>，如果想开启核显加速，就需要在里面添加核显设备。点击左侧设备列表的加号，在新添加的空白栏中填入<code>PciRoot(0x0)/Pci(0x2,0x0)</code>，然后点击右侧表格下方的加号，在新添加的空白栏中的键填入<code>AAPL,ig-platform-id</code>，在值中填入<code>0300983E</code>，不同CPU，不同核显和不同的加速效果有着不同的值，这个值需要在网上查询自己核显的<code>ig-platform-id</code>，添加后的效果如下。</p><p><img src="images/hackintosh/occdeviceproperties.png" alt="设备属性设置"></p><p>接下来的<code>Kernel-内核设置</code>，需要在<code>添加</code>页面加入自己需要启用的驱动，打开<code>EFI/OC/Kexts</code>，拖动自己添加的驱动到列表中，启用即可。这里需要注意调整启动顺序，自己添加驱动启动顺序最好放在最后面。添加后的效果如下。</p><p><img src="images/hackintosh/occkerneladd.png" alt="驱动页设置"></p><p>在<code>Kernel-内核设置</code>中，还需要添加的是RTC修复的补丁，否则每次重启开机BIOS都会进入安全模式，具体原因在xjn的博客中有详细描述，想了解更多的点<a href="https://blog.xjn819.com/post/rtc-issues-related-to-oc.html" target="_blank" rel="noopener">这里</a>。点击<code>补丁</code>，在表格右下角点2次加号，添加两个补丁条目。在两个条目中，标识符均填入<code>com.apple.driver.AppleRTC</code>，替换次数均填入<code>1</code>，均勾选启用。在第一个条目中的查找中填入<code>752E0FB6</code>，在第一个条目中的替换中填入<code>EB2E0FB6</code>。在第二个条目中的查找中填入<code>75330FB7</code>，在第二个条目中的替换中填入<code>EB330FB7</code>，最小内核和最大内核填入<code>18.5.0</code>（网上也有解决方法是不需要填入内核参数的，但我并没有进行测试，有兴趣的朋友可以测试一下）。填完后的效果如下。</p><p><img src="images/hackintosh/occkernelpatch.png" alt="补丁页设置"></p><p>接下来是<code>Misc-其他设置</code>，如果在上一节中添加了主题文件并且想启用，在<code>Boot</code>页的设置中需要把<code>Picker Mode启动界面模式修改为External</code>，如果想隐藏多余的启动项（例如：恢复分区、Reset NVRAM等），可以勾选<code>HideAuxiliary</code>，修改后的效果如下。</p><p><img src="images/hackintosh/occmiscboot.png" alt="Boot页设置"></p><p>在<code>Misc-其他设置</code>中，还需要修改启动的安全选项，在<code>Security</code>页中，将<code>Vault</code>参数改为<code>Optional</code>，如果使用<code>AirportItlwn</code>驱动，还需要将<code>SecureBootMode</code>参数修改为<code>Default</code>，这个参数会导致开机速度变慢，但为了使用Intel原生Wi-Fi驱动，也是没办法的事情，修改后的效果如下。</p><p><img src="images/hackintosh/occmiscsecurity.png" alt="Security页设置"></p><p>接下来是<code>NVRAM-随机访问储存器设置</code>，我们需要修改启动参数，不同配置的机型启动参数可能不同。点击左侧UUID表中的<code>7C436110-AB2A-4BBB-A880-FE41995C9F82</code>，在右侧<code>boot-args</code>中把默认的值删掉，填入<code>-v debug=0x100 keepsyms=1 nvda_drv=1 alcid=7</code>，下面是参数含义解释。</p><ul><li>-v，开启debug模式，测试无问题后可删去</li><li>debug=0x100，在启动遇到问题后不自动关机，而是停止操作，方便观察debug log</li><li>keepsyms=1，输出更多的debug信息，方便调试</li><li>nvda_drv=1，启用NVIDIA驱动，N卡独显需要使用</li><li>alcid=7，声卡ID注入，我的板载声卡注入ID为7</li></ul><p>配置完成后的效果如下。</p><p><img src="images/hackintosh/occnvram.png" alt="NVRAM配置"></p><p>接下来是<code>PlatformInfo-机型平台设置</code>，由于Gen-x在生成配置文件时已经自动填入机型信息，这一页不需要再手动配置了。</p><p>最后是<code>UEFI-UEFI设置</code>，如果要开启OC的主题，还需要添加UEFI驱动。点击<code>UEFI驱动</code>页面，点击<code>浏览</code>，将<code>EFI/OC/Drivers</code>中的<code>OpenCanopy.efi</code>添加到表格中，添加后效果如下。</p><p><img src="images/hackintosh/occuefi.png" alt="UEFI设置"></p><p>至此，OC的启动配置文件修改完成，按<code>command + s</code>保存配置，就可以开始重启，使用OC尝试引导系统了。</p><h1 id="清除Clover残余"><a href="#清除Clover残余" class="headerlink" title="清除Clover残余"></a>清除Clover残余</h1><p>如果使用OC能够成功引导系统，并且使用一段时间后没有任何问题，就可以将硬盘上的Clover EFI替换为OpenCore EFI了。替换的操作也是一样的，将整个EFI文件夹替换即可，最后在Terminal中执行以下代码，清除Clover残留文件即可完成迁移。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 Clover 位于系统偏好设置中的面板</span></span><br><span class="line">sudo rm -rf <span class="string">"/Library/PreferencePanes/Clover.prefPane"</span></span><br><span class="line"><span class="comment"># 删除 Clover 的自动脚本</span></span><br><span class="line">rm -rf <span class="string">"/etc/rc.clover.lib"</span></span><br><span class="line">rm -rf <span class="string">"/etc/rc.boot.d/10.save_and_rotate_boot_log.local"</span></span><br><span class="line">rm -rf <span class="string">"/etc/rc.boot.d/20.mount_ESP.local"</span></span><br><span class="line">rm -rf <span class="string">"/etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled"</span></span><br><span class="line">rm -rf <span class="string">"/etc/rc.boot.d/80.save_nvram_plist.local"</span></span><br><span class="line">rm -rf <span class="string">"/etc/rc.shutdown.local"</span></span><br><span class="line">rm -rf <span class="string">"/etc/rc.boot.d"</span></span><br><span class="line">rm -rf <span class="string">"/etc/rc.shutdown.d"</span></span><br><span class="line"><span class="comment"># 删除 Clover 的守护进程</span></span><br><span class="line">launchctl unload <span class="string">'/Library/LaunchDaemons/com.slice.CloverDaemonNew.plist'</span></span><br><span class="line">rm -rf <span class="string">'/Library/LaunchDaemons/com.slice.CloverDaemonNew.plist'</span></span><br><span class="line">rm -rf <span class="string">'/Library/Application Support/Clover/CloverDaemonNew'</span></span><br><span class="line">rm -rf <span class="string">'/Library/Application Support/Clover/CloverLogOut'</span></span><br><span class="line">rm -rf <span class="string">'/Library/Application Support/Clover/CloverWrapper.sh'</span></span><br></pre></td></tr></table></figure><p>在迁移到OC后，最好再重置一次NVRAM，重置完后系统就完全是由OC来引导启动了，接下来就开启愉快的OC之旅了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;目前，OpenCore Bootloader已经开发了相当一段时间，已经趋近于稳定。OpenCore的启动方式更接近于原生macOS电脑，对系统的注入更少，越来越多的驱动都基于OpenCore适配开发。因此，将Bootloader从Clover迁移到OpenCore也是时候提上日程了。以下博客记录了我的迁移过程，并向大家分享一下我的迁移方法。不同于网上的纯ProperTree手动配置、纯OpenCore Configurator图形配置或OC Gen-X直接生成，我同时用到了以上三种工具，节省了迁移成本的同时，也避免遇到了很多错误。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hackintosh" scheme="http://www.fisheryung.top/tags/hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>获取米家MIIO设备Token</title>
    <link href="http://www.fisheryung.top/%E8%8E%B7%E5%8F%96%E7%B1%B3%E5%AE%B6miio%E8%AE%BE%E5%A4%87token.html"/>
    <id>http://www.fisheryung.top/获取米家miio设备token.html</id>
    <published>2021-02-28T12:52:04.000Z</published>
    <updated>2021-03-27T08:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因毕设选题是和物联网相关的主题，要做一个能够控制智能家居设备的微信小程序。所以就有了自由控制米家智能家居设备的需求，想要控制米家MIIO设备，就需要获取智能设备的token。但小米对获取token的方法不断进行封堵，截止这篇博客发布时，通过Android手机Root，读取旧版米家中存有token的sqlite文件已经不可行了（旧版米家APP直接闪退）；通过抓包的方式读取device_list包中的token也不行了（数据包的body已经被加密）；python-miio中discover方法也早已不行了（返回的是无效的token）。我所知道的方法中，使用<a href="https://github.com/PiotrMachowski/Xiaomi-cloud-tokens-extractor" target="_blank" rel="noopener">tokens-extractor</a>和读取IOS设备备份文件数据的方法还可以使用，但何时失效就不好说了</p><a id="more"></a><h1 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h1><p>最简单的方法当然是使用<a href="https://github.com/PiotrMachowski/Xiaomi-cloud-tokens-extractor" target="_blank" rel="noopener">Xiaomi Cloud Tokens Extractor</a>了，该脚本模拟Android米家APP的登录，以直接获取到自己账号下的智能设备信息，就能直接拿到token了。操作的流程也很简单，下载脚本运行即可，脚本需要依赖python的requests库，以下是简单的shell代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br><span class="line">wget https://github.com/PiotrMachowski/Xiaomi-cloud-tokens-extractor/raw/master/token_extractor.py</span><br><span class="line">python3 token_extractor.py</span><br></pre></td></tr></table></figure><p>按照脚本中的提示输入账号密码，选择地区（一般是cn），然后看输出即可，如下图所示：</p><p><img src="./images/miio/token_success.png" alt="成功获取token"></p><p>但是，这个脚本不是一直都成功的，以上图片是我在2021年2月初时获取成功后截图的。如果出现脚本不能用的情况，就要等待作者更新脚本了，在这里先对作者说声辛苦了，非常感谢！</p><h1 id="读取IOS设备备份文件数据"><a href="#读取IOS设备备份文件数据" class="headerlink" title="读取IOS设备备份文件数据"></a>读取IOS设备备份文件数据</h1><p>这个方法相对来说比较麻烦，尤其是对于我这种手机文件多的，备份一次要好久…但是没办法，活还是得干嘛，至于小米何时再给数据文件来个加密，那就真的是麻烦了</p><h2 id="将设备备份"><a href="#将设备备份" class="headerlink" title="将设备备份"></a>将设备备份</h2><p>首先要修改一下备份的选项，在手机摘要页面的备份中，将<code>给iPhone备份加密</code>选项关掉，如下图所示，然后再点击立即备份，等待备份完成即可</p><p><img src="./images/miio/backup.png" alt="备份选项"></p><h2 id="iBackup-Viewer导出数据"><a href="#iBackup-Viewer导出数据" class="headerlink" title="iBackup Viewer导出数据"></a>iBackup Viewer导出数据</h2><p>点击<a href="https://www.imactools.com/iphonebackupviewer/" target="_blank" rel="noopener">这里</a>可以下载iBackup Viewer，下载完后安装即可，如果这个网站打不开，也可以下载我的服务器<a href="https://fisher.lazybone.xyz/downloads/software/iBackupViewer.dmg" target="_blank" rel="noopener">提供</a>的4.1760版本，安装完之后打开软件，点击自己刚刚备份的那个设备（那个壁纸可以点的），载入备份后点最后一个像分支一样的图标（Raw Files）。</p><p>在<code>AppDomain</code>中找到<code>com.xiaomi.mihome</code>并点击，此时右侧就显示米家APP备份的数据，在右侧点击<code>Name</code>以按照文件名排序，看到一个名为<code>xxx_mihome.sqlite</code>的文件后（xxx是你的小米账号ID），选择这个文件并点击右上角<code>Export</code>，点击<code>Selected...</code>，选择一个位置将这个文件导出即可，以下是操作流程图：</p><p><img src="./images/miio/export.png" alt="导出sqlite文件"></p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p>读取数据需要用到<code>python-miio</code>包，安装一下即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-miio</span><br></pre></td></tr></table></figure><p>接着使用<code>miio-extract-tokens</code>读取数据就可以获得token了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">miio-extract-tokens --dump-all xxx_mihome.sqlite</span><br></pre></td></tr></table></figure><p><img src="./images/miio/extract.png" alt="读取数据"></p><p>拿到token后，就能够做自己想做的事情了^_^</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因毕设选题是和物联网相关的主题，要做一个能够控制智能家居设备的微信小程序。所以就有了自由控制米家智能家居设备的需求，想要控制米家MIIO设备，就需要获取智能设备的token。但小米对获取token的方法不断进行封堵，截止这篇博客发布时，通过Android手机Root，读取旧版米家中存有token的sqlite文件已经不可行了（旧版米家APP直接闪退）；通过抓包的方式读取device_list包中的token也不行了（数据包的body已经被加密）；python-miio中discover方法也早已不行了（返回的是无效的token）。我所知道的方法中，使用&lt;a href=&quot;https://github.com/PiotrMachowski/Xiaomi-cloud-tokens-extractor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tokens-extractor&lt;/a&gt;和读取IOS设备备份文件数据的方法还可以使用，但何时失效就不好说了&lt;/p&gt;
    
    </summary>
    
    
      <category term="物联网" scheme="http://www.fisheryung.top/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="毕设" scheme="http://www.fisheryung.top/tags/%E6%AF%95%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>JDK源码编译</title>
    <link href="http://www.fisheryung.top/jdk%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91.html"/>
    <id>http://www.fisheryung.top/jdk源码编译.html</id>
    <published>2021-02-13T02:19:37.000Z</published>
    <updated>2021-02-14T01:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>考完研之后，接下来要准备的就是实习了。我也想尝试一下去春招，做好两手准备，所以需要开始学习面试要用到的知识了。我做过的比较好的项目主要使用的是Java，但之前都仅限于使用Java语言，并没有去看过Java的源码。为了深入理解Java这门语言（其实是为了准备面试），我将尝试去看Java的源码，注释写上自己的理解，并将这份源码编译，然后作为自己编译的第一个JDK使用。</p><a id="more"></a><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>前期的准备包括以下内容：</p><ul><li>源码和BootJDK的下载</li><li>检查和安装编译需要用到的Toolchain</li></ul><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p>源码下载很简单，去GitHub的<a href="https://github.com/openjdk" target="_blank" rel="noopener">OpenJDK</a>项目组里面找到需要编译的JDK版本对应的仓库，Clone下来即可</p><p>这里我编译的是JDK15，仓库地址在<a href="https://github.com/openjdk/jdk15" target="_blank" rel="noopener">这里</a>，这里我把源码Clone到Document中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Document</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openjdk/jdk15.git</span><br></pre></td></tr></table></figure><h2 id="BootJDK下载"><a href="#BootJDK下载" class="headerlink" title="BootJDK下载"></a>BootJDK下载</h2><p>编译需要一个BootJDK，用这个BootJDK去编译一个新的JDK出来，这个就有点像鸡生蛋，蛋生鸡的问题了hh</p><p>可以用本机已有的JDK，但是如果版本太老的话也有可能出现编译失败的问题，为了保证编译能够成功，我这里下载了JDK15作为BootJDK</p><p>下载JDK的网址在<a href="https://jdk.java.net/" target="_blank" rel="noopener">这里</a>，找到对应的系统版本点下载就好了，下载完之后解压到自己记得的地方</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf openjdk-15.0.2_osx-x64_bin.tar.gz -C /Users/fisher/Document</span><br></pre></td></tr></table></figure><h2 id="检查和安装ToolChain"><a href="#检查和安装ToolChain" class="headerlink" title="检查和安装ToolChain"></a>检查和安装ToolChain</h2><p>macOS首先需要检查安装Xcode command line tool，可以选择在App Store中直接安装Xcode，也可以在终端中使用以下命令仅安装Command line tool</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>接着检查clang，clang++，autoconf，make和freetype</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clang --version</span><br><span class="line">clang++ --version</span><br><span class="line">autoconf --version</span><br><span class="line">make --version</span><br><span class="line">freetype-config --ftversion</span><br></pre></td></tr></table></figure><p>如果没有安装的话，使用homebrew安装即可，这里以freetype为例子</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install freetype</span><br></pre></td></tr></table></figure><p>其他系统的ToolChain检查安装，可以参考<a href="https://github.com/openjdk/jdk/blob/master/doc/building.md#native-compiler-toolchain-requirements" target="_blank" rel="noopener">这份</a>文档</p><h1 id="配置与编译"><a href="#配置与编译" class="headerlink" title="配置与编译"></a>配置与编译</h1><p>前期准备工作完成后，就可以开始配置和编译了</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>切换到源码的目录下，使用<code>bash configure</code>命令配置，这里我使用2个参数，分别是：目标系统位数，BootJDK位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> jdk15source</span><br><span class="line">bash configure --with-target-bits=64 --with-boot-jdk=/Users/fisher/Documents/jdk15/Contents/Home</span><br></pre></td></tr></table></figure><p>接着就开始滚屏了，如果中途出现缺少依赖等提示，安装提示安装对应的依赖即可。当看到以下界面的时候，就说明编译前的配置成功了，可以正式开始编译了</p><p><img src="images/jdk/configure.png" alt="编译配置成功"></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在源码跟目录下使用<code>make images</code>命令编译，等待一段时间就可以编译完了</p><p>Linux建议系统内存要8G以上，我的虚拟机6G内存在编译到JavaDoc的时候出现了内存不足编译失败的情况</p><p><img src="images/jdk/compile.png" alt="编译完成"></p><p>看到以上图片，就表示编译已经完成</p><h1 id="验证编译结果"><a href="#验证编译结果" class="headerlink" title="验证编译结果"></a>验证编译结果</h1><p>切换目录到<code>./build/macosx-x86_64-server-release/jdk</code>下，用<code>./bin/java --version</code>就能看到自己编译的成果了</p><p><img src="images/jdk/verification.png" alt="验证编译成果"></p><p>接下来在IDEA中添加自己刚刚编译的JDK，将<code>source</code>定位到编译JDK使用的源码，在写代码和debug的时候就能够边看自己写的注释边工作了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;考完研之后，接下来要准备的就是实习了。我也想尝试一下去春招，做好两手准备，所以需要开始学习面试要用到的知识了。我做过的比较好的项目主要使用的是Java，但之前都仅限于使用Java语言，并没有去看过Java的源码。为了深入理解Java这门语言（其实是为了准备面试），我将尝试去看Java的源码，注释写上自己的理解，并将这份源码编译，然后作为自己编译的第一个JDK使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.fisheryung.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器更换国内软件源</title>
    <link href="http://www.fisheryung.top/docker%E5%AE%B9%E5%99%A8%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E8%BD%AF%E4%BB%B6%E6%BA%90.html"/>
    <id>http://www.fisheryung.top/docker容器更换国内软件源.html</id>
    <published>2020-07-19T07:54:04.000Z</published>
    <updated>2020-07-19T08:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>Docker容器使用apt作为软件包管理器，并且默认软件源是国外服务器，更新源和下载软件的速度都非常慢，因此需要更换为国内的软件源。但由于容器十分纯净，甚至连vi和vim都没有，不能通过编辑器打开修改软件源配置文件，关于这个问题的解决方法，我们可以使用shell的管道直接修改软件源配置文件。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><a id="more"></a><p>我们可以通过管道来将国内软件源地址写入到配置文件中，具体操作如下：</p><ol><li><p>进入容器，备份yum源配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it container bash</span><br><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure></li><li><p>写入国内软件源地址，此处用的是网易的软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/apt/sources.list &lt;&lt; EOF</span><br><span class="line">deb http://mirrors.163.com/debian/ buster main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.163.com/debian/ buster main contrib non-free</span></span><br><span class="line">deb http://mirrors.163.com/debian/ buster-updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.163.com/debian/ buster-updates main contrib non-free</span></span><br><span class="line">deb http://mirrors.163.com/debian/ buster-backports main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.163.com/debian/ buster-backports main contrib non-free</span></span><br><span class="line">deb http://mirrors.163.com/debian-security buster/updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.163.com/debian-security buster/updates main contrib non-free</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><img src="images/docker/writeconf.png" alt="写入配置"></p></li><li><p>更新apt软件包索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><p><img src="images/docker/updateapt.png" alt="更新包索引"></p></li><li><p>安装所需要的软件包，完成！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vim -y</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;Docker容器使用apt作为软件包管理器，并且默认软件源是国外服务器，更新源和下载软件的速度都非常慢，因此需要更换为国内的软件源。但由于容器十分纯净，甚至连vi和vim都没有，不能通过编辑器打开修改软件源配置文件，关于这个问题的解决方法，我们可以使用shell的管道直接修改软件源配置文件。&lt;/p&gt;&lt;h1 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h1&gt;
    
    </summary>
    
    
      <category term="服务器配置" scheme="http://www.fisheryung.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Docker" scheme="http://www.fisheryung.top/tags/docker/"/>
    
  </entry>
  
</feed>
